
.. include:: /autodoc_abbr_options_c.rst

.. _`sec:psimod`:

============================
psi4: Linking C++ and Python
============================

psi4
====



.. function:: psi4.DASUM

   Python Library Documentation: built-in function DASUM in module psi4

   

   DASUM(...)

       DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :

           docstring

       

           C++ signature :

               d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DAXPY

   Python Library Documentation: built-in function DAXPY in module psi4

   

   DAXPY(...)

       DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :

           docstring

       

           C++ signature :

               void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DCOPY

   Python Library Documentation: built-in function DCOPY in module psi4

   

   DCOPY(...)

       DCOPY( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> None :

           docstring

       

           C++ signature :

               void DCOPY(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DDOT

   Python Library Documentation: built-in function DDOT in module psi4

   

   DDOT(...)

       DDOT( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> float :

           docstring

       

           C++ signature :

               d DDOT(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DGBMV

   Python Library Documentation: built-in function DGBMV in module psi4

   

   DGBMV(...)

       DGBMV( (int)arg1, (str)arg2, (int)arg3, (int)arg4, (int)arg5, (int)arg6, (float)arg7, (Matrix)arg8, (int)arg9, (Vector)arg10, (int)arg11, (float)arg12, (Vector)arg13, (int)arg14) -> None :

           docstring

       

           C++ signature :

               void DGBMV(i,c,i,i,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DGEEV

   Python Library Documentation: built-in function DGEEV in module psi4

   

   DGEEV(...)

       DGEEV( (int)arg1, (str)arg2, (str)arg3, (int)arg4, (Matrix)arg5, (int)arg6, (Vector)arg7, (Vector)arg8, (Matrix)arg9, (int)arg10, (Matrix)arg11, (int)arg12, (Vector)arg13, (int)arg14) -> int :

           docstring

       

           C++ signature :

               i DGEEV(i,c,c,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DGEMM

   Python Library Documentation: built-in function DGEMM in module psi4

   

   DGEMM(...)

       DGEMM( (int)arg1, (str)arg2, (str)arg3, (int)arg4, (int)arg5, (int)arg6, (float)arg7, (Matrix)arg8, (int)arg9, (Matrix)arg10, (int)arg11, (float)arg12, (Matrix)arg13, (int)arg14) -> None :

           docstring

       

           C++ signature :

               void DGEMM(i,c,c,i,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DGEMV

   Python Library Documentation: built-in function DGEMV in module psi4

   

   DGEMV(...)

       DGEMV( (int)arg1, (str)arg2, (int)arg3, (int)arg4, (float)arg5, (Matrix)arg6, (int)arg7, (Vector)arg8, (int)arg9, (float)arg10, (Vector)arg11, (int)arg12) -> None :

           docstring

       

           C++ signature :

               void DGEMV(i,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DGER

   Python Library Documentation: built-in function DGER in module psi4

   

   DGER(...)

       DGER( (int)arg1, (int)arg2, (int)arg3, (float)arg4, (Vector)arg5, (int)arg6, (Vector)arg7, (int)arg8, (Matrix)arg9, (int)arg10) -> None :

           docstring

       

           C++ signature :

               void DGER(i,i,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DGETRF

   Python Library Documentation: built-in function DGETRF in module psi4

   

   DGETRF(...)

       DGETRF( (int)arg1, (int)arg2, (int)arg3, (Matrix)arg4, (int)arg5, (IntVector)arg6) -> int :

           docstring

       

           C++ signature :

               i DGETRF(i,i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi9IntVectorEEE)



.. function:: psi4.DGETRI

   Python Library Documentation: built-in function DGETRI in module psi4

   

   DGETRI(...)

       DGETRI( (int)arg1, (int)arg2, (Matrix)arg3, (int)arg4, (IntVector)arg5, (Vector)arg6, (int)arg7) -> int :

           docstring

       

           C++ signature :

               i DGETRI(i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi9IntVectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DGETRS

   Python Library Documentation: built-in function DGETRS in module psi4

   

   DGETRS(...)

       DGETRS( (int)arg1, (str)arg2, (int)arg3, (int)arg4, (Matrix)arg5, (int)arg6, (IntVector)arg7, (Matrix)arg8, (int)arg9) -> int :

           docstring

       

           C++ signature :

               i DGETRS(i,c,i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi9IntVectorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DNRM2

   Python Library Documentation: built-in function DNRM2 in module psi4

   

   DNRM2(...)

       DNRM2( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :

           docstring

       

           C++ signature :

               d DNRM2(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DPOTRF

   Python Library Documentation: built-in function DPOTRF in module psi4

   

   DPOTRF(...)

       DPOTRF( (int)arg1, (str)arg2, (int)arg3, (Matrix)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               i DPOTRF(i,c,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DPOTRI

   Python Library Documentation: built-in function DPOTRI in module psi4

   

   DPOTRI(...)

       DPOTRI( (int)arg1, (str)arg2, (int)arg3, (Matrix)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               i DPOTRI(i,c,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DPOTRS

   Python Library Documentation: built-in function DPOTRS in module psi4

   

   DPOTRS(...)

       DPOTRS( (int)arg1, (str)arg2, (int)arg3, (int)arg4, (Matrix)arg5, (int)arg6, (Matrix)arg7, (int)arg8) -> int :

           docstring

       

           C++ signature :

               i DPOTRS(i,c,i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DROT

   Python Library Documentation: built-in function DROT in module psi4

   

   DROT(...)

       DROT( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6, (float)arg7, (float)arg8) -> None :

           docstring

       

           C++ signature :

               void DROT(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,d,d)



.. function:: psi4.DSBMV

   Python Library Documentation: built-in function DSBMV in module psi4

   

   DSBMV(...)

       DSBMV( (int)arg1, (str)arg2, (int)arg3, (int)arg4, (float)arg5, (Matrix)arg6, (int)arg7, (Vector)arg8, (int)arg9, (float)arg10, (Vector)arg11, (int)arg12) -> None :

           docstring

       

           C++ signature :

               void DSBMV(i,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DSCAL

   Python Library Documentation: built-in function DSCAL in module psi4

   

   DSCAL(...)

       DSCAL( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5) -> None :

           docstring

       

           C++ signature :

               void DSCAL(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DSWAP

   Python Library Documentation: built-in function DSWAP in module psi4

   

   DSWAP(...)

       DSWAP( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> None :

           docstring

       

           C++ signature :

               void DSWAP(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DSYEV

   Python Library Documentation: built-in function DSYEV in module psi4

   

   DSYEV(...)

       DSYEV( (int)arg1, (str)arg2, (str)arg3, (int)arg4, (Matrix)arg5, (int)arg6, (Vector)arg7, (Vector)arg8, (int)arg9) -> int :

           docstring

       

           C++ signature :

               i DSYEV(i,c,c,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DSYMM

   Python Library Documentation: built-in function DSYMM in module psi4

   

   DSYMM(...)

       DSYMM( (int)arg1, (str)arg2, (str)arg3, (int)arg4, (int)arg5, (float)arg6, (Matrix)arg7, (int)arg8, (Matrix)arg9, (int)arg10, (float)arg11, (Matrix)arg12, (int)arg13) -> None :

           docstring

       

           C++ signature :

               void DSYMM(i,c,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DSYMV

   Python Library Documentation: built-in function DSYMV in module psi4

   

   DSYMV(...)

       DSYMV( (int)arg1, (str)arg2, (int)arg3, (float)arg4, (Matrix)arg5, (int)arg6, (Vector)arg7, (int)arg8, (float)arg9, (Vector)arg10, (int)arg11) -> None :

           docstring

       

           C++ signature :

               void DSYMV(i,c,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DSYR

   Python Library Documentation: built-in function DSYR in module psi4

   

   DSYR(...)

       DSYR( (int)arg1, (str)arg2, (int)arg3, (float)arg4, (Vector)arg5, (int)arg6, (Matrix)arg7, (int)arg8) -> None :

           docstring

       

           C++ signature :

               void DSYR(i,c,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DSYR2

   Python Library Documentation: built-in function DSYR2 in module psi4

   

   DSYR2(...)

       DSYR2( (int)arg1, (str)arg2, (int)arg3, (float)arg4, (Vector)arg5, (int)arg6, (Vector)arg7, (int)arg8, (Matrix)arg9, (int)arg10) -> None :

           docstring

       

           C++ signature :

               void DSYR2(i,c,i,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DSYR2K

   Python Library Documentation: built-in function DSYR2K in module psi4

   

   DSYR2K(...)

       DSYR2K( (int)arg1, (str)arg2, (str)arg3, (int)arg4, (int)arg5, (float)arg6, (Matrix)arg7, (int)arg8, (Matrix)arg9, (int)arg10, (float)arg11, (Matrix)arg12, (int)arg13) -> None :

           docstring

       

           C++ signature :

               void DSYR2K(i,c,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DSYRK

   Python Library Documentation: built-in function DSYRK in module psi4

   

   DSYRK(...)

       DSYRK( (int)arg1, (str)arg2, (str)arg3, (int)arg4, (int)arg5, (float)arg6, (Matrix)arg7, (int)arg8, (float)arg9, (Matrix)arg10, (int)arg11) -> None :

           docstring

       

           C++ signature :

               void DSYRK(i,c,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DSYSV

   Python Library Documentation: built-in function DSYSV in module psi4

   

   DSYSV(...)

       DSYSV( (int)arg1, (str)arg2, (int)arg3, (int)arg4, (Matrix)arg5, (int)arg6, (IntVector)arg7, (Matrix)arg8, (int)arg9, (Vector)arg10, (int)arg11) -> int :

           docstring

       

           C++ signature :

               i DSYSV(i,c,i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi9IntVectorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DTBMV

   Python Library Documentation: built-in function DTBMV in module psi4

   

   DTBMV(...)

       DTBMV( (int)arg1, (str)arg2, (str)arg3, (str)arg4, (int)arg5, (int)arg6, (Matrix)arg7, (int)arg8, (Vector)arg9, (int)arg10) -> None :

           docstring

       

           C++ signature :

               void DTBMV(i,c,c,c,i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DTBSV

   Python Library Documentation: built-in function DTBSV in module psi4

   

   DTBSV(...)

       DTBSV( (int)arg1, (str)arg2, (str)arg3, (str)arg4, (int)arg5, (int)arg6, (Matrix)arg7, (int)arg8, (Vector)arg9, (int)arg10) -> None :

           docstring

       

           C++ signature :

               void DTBSV(i,c,c,c,i,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DTRMM

   Python Library Documentation: built-in function DTRMM in module psi4

   

   DTRMM(...)

       DTRMM( (int)arg1, (str)arg2, (str)arg3, (str)arg4, (str)arg5, (int)arg6, (int)arg7, (float)arg8, (Matrix)arg9, (int)arg10, (Matrix)arg11, (int)arg12) -> None :

           docstring

       

           C++ signature :

               void DTRMM(i,c,c,c,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DTRMV

   Python Library Documentation: built-in function DTRMV in module psi4

   

   DTRMV(...)

       DTRMV( (int)arg1, (str)arg2, (str)arg3, (str)arg4, (int)arg5, (Matrix)arg6, (int)arg7, (Vector)arg8, (int)arg9) -> None :

           docstring

       

           C++ signature :

               void DTRMV(i,c,c,c,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.DTRSM

   Python Library Documentation: built-in function DTRSM in module psi4

   

   DTRSM(...)

       DTRSM( (int)arg1, (str)arg2, (str)arg3, (str)arg4, (str)arg5, (int)arg6, (int)arg7, (float)arg8, (Matrix)arg9, (int)arg10, (Matrix)arg11, (int)arg12) -> None :

           docstring

       

           C++ signature :

               void DTRSM(i,c,c,c,c,i,i,d,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.DTRSV

   Python Library Documentation: built-in function DTRSV in module psi4

   

   DTRSV(...)

       DTRSV( (int)arg1, (str)arg2, (str)arg3, (str)arg4, (int)arg5, (Matrix)arg6, (int)arg7, (Vector)arg8, (int)arg9) -> None :

           docstring

       

           C++ signature :

               void DTRSV(i,c,c,c,i,N5boost10shared_ptrIN3psi6MatrixEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.IDAMAX

   Python Library Documentation: built-in function IDAMAX in module psi4

   

   IDAMAX(...)

       IDAMAX( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> int :

           docstring

       

           C++ signature :

               m IDAMAX(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i)



.. function:: psi4.adc

   Python Library Documentation: built-in function adc in module psi4

   

   adc(...)

       adc( (Wavefunction)arg1) -> Wavefunction :

           Runs the ADC propagator code, for excited states.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE adc(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.atomic_displacements

   Python Library Documentation: built-in function atomic_displacements in module psi4

   

   atomic_displacements(...)

       atomic_displacements( (Molecule)arg1) -> matrix_vector :

           Returns list of displacements generated by displacing each atom in the +/- x, y, z directions

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE atomic_displacements(N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.be_quiet

   Python Library Documentation: built-in function be_quiet in module psi4

   

   be_quiet(...)

       be_quiet() -> None :

           Redirects output to /dev/null.  To switch back to regular output mode, use reopen_outfile()

       

           C++ signature :

               void be_quiet()



.. function:: psi4.benchmark_blas1

   Python Library Documentation: built-in function benchmark_blas1 in module psi4

   

   benchmark_blas1(...)

       benchmark_blas1( (int)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void benchmark_blas1(i,d)



.. function:: psi4.benchmark_blas2

   Python Library Documentation: built-in function benchmark_blas2 in module psi4

   

   benchmark_blas2(...)

       benchmark_blas2( (int)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void benchmark_blas2(i,d)



.. function:: psi4.benchmark_blas3

   Python Library Documentation: built-in function benchmark_blas3 in module psi4

   

   benchmark_blas3(...)

       benchmark_blas3( (int)arg1, (float)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void benchmark_blas3(i,d,i)



.. function:: psi4.benchmark_disk

   Python Library Documentation: built-in function benchmark_disk in module psi4

   

   benchmark_disk(...)

       benchmark_disk( (int)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void benchmark_disk(i,d)



.. function:: psi4.benchmark_integrals

   Python Library Documentation: built-in function benchmark_integrals in module psi4

   

   benchmark_integrals(...)

       benchmark_integrals( (int)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void benchmark_integrals(i,d)



.. function:: psi4.benchmark_math

   Python Library Documentation: built-in function benchmark_math in module psi4

   

   benchmark_math(...)

       benchmark_math( (float)arg1) -> None :

           docstring

       

           C++ signature :

               void benchmark_math(d)



.. function:: psi4.ccdensity

   Python Library Documentation: built-in function ccdensity in module psi4

   

   ccdensity(...)

       ccdensity( (Wavefunction)arg1) -> float :

           Runs the code to compute coupled cluster density matrices.

       

           C++ signature :

               d ccdensity(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.ccenergy

   Python Library Documentation: built-in function ccenergy in module psi4

   

   ccenergy(...)

       ccenergy( (Wavefunction)arg1) -> Wavefunction :

           Runs the coupled cluster energy code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE ccenergy(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.cceom

   Python Library Documentation: built-in function cceom in module psi4

   

   cceom(...)

       cceom( (Wavefunction)arg1) -> float :

           Runs the equation of motion coupled cluster code, for excited states.

       

           C++ signature :

               d cceom(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.cchbar

   Python Library Documentation: built-in function cchbar in module psi4

   

   cchbar(...)

       cchbar( (Wavefunction)arg1) -> None :

           Runs the code to generate the similarity transformed Hamiltonian.

       

           C++ signature :

               void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.cclambda

   Python Library Documentation: built-in function cclambda in module psi4

   

   cclambda(...)

       cclambda( (Wavefunction)arg1) -> Wavefunction :

           Runs the coupled cluster lambda equations code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.ccresponse

   Python Library Documentation: built-in function ccresponse in module psi4

   

   ccresponse(...)

       ccresponse( (Wavefunction)arg1) -> float :

           Runs the coupled cluster response theory code.

       

           C++ signature :

               d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.ccsort

   Python Library Documentation: built-in function ccsort in module psi4

   

   ccsort(...)

       ccsort() -> float :

           Runs CCSORT, which reorders integrals for use in the coupled cluster codes.

       

           C++ signature :

               d ccsort()



.. function:: psi4.cctransort

   Python Library Documentation: built-in function cctransort in module psi4

   

   cctransort(...)

       cctransort( (Wavefunction)arg1) -> None :

           Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.

       

           C++ signature :

               void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.cctriples

   Python Library Documentation: built-in function cctriples in module psi4

   

   cctriples(...)

       cctriples( (Wavefunction)arg1) -> float :

           Runs the coupled cluster (T) energy code.

       

           C++ signature :

               d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.clean

   Python Library Documentation: built-in function clean in module psi4

   

   clean(...)

       clean() -> None :

           Function to remove scratch files. Call between independent jobs.

       

           C++ signature :

               void clean()



.. function:: psi4.clean_variables

   Python Library Documentation: built-in function clean_variables in module psi4

   

   clean_variables(...)

       clean_variables() -> None :

           Empties all PSI variables that have set internally.

       

           C++ signature :

               void clean_variables()



.. function:: psi4.close_outfile

   Python Library Documentation: built-in function close_outfile in module psi4

   

   close_outfile(...)

       close_outfile() -> None :

           Closes the output file.

       

           C++ signature :

               void close_outfile()



.. function:: psi4.compute_shell

   Python Library Documentation: built-in function compute_shell in module psi4

   

   compute_shell(...)

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.dcft

   Python Library Documentation: built-in function dcft in module psi4

   

   dcft(...)

       dcft( (Wavefunction)arg1) -> Wavefunction :

           Runs the density cumulant functional theory code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.detci

   Python Library Documentation: built-in function detci in module psi4

   

   detci(...)

       detci( (Wavefunction)arg1) -> Wavefunction :

           Runs the determinant-based configuration interaction code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.dfmp2

   Python Library Documentation: built-in function dfmp2 in module psi4

   

   dfmp2(...)

       dfmp2( (Wavefunction)arg1) -> Wavefunction :

           Runs the DF-MP2 code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.dfocc

   Python Library Documentation: built-in function dfocc in module psi4

   

   dfocc(...)

       dfocc( (Wavefunction)arg1) -> Wavefunction :

           Runs the density-fitted orbital optimized CC codes.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.displace_atom

   Python Library Documentation: built-in function displace_atom in module psi4

   

   displace_atom(...)

       displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :

           Displaces one coordinate of single atom.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d)



.. function:: psi4.dmrg

   Python Library Documentation: built-in function dmrg in module psi4

   

   dmrg(...)

       dmrg( (Wavefunction)arg1) -> Wavefunction :

           Runs the DMRG code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.efp_init

   Python Library Documentation: built-in function efp_init in module psi4

   

   efp_init(...)

       efp_init() -> EFP :

           Initializes the EFP library and returns an EFP object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init()



.. function:: psi4.efp_set_options

   Python Library Documentation: built-in function efp_set_options in module psi4

   

   efp_set_options(...)

       efp_set_options() -> None :

           Set EFP options from environment options object.

       

           C++ signature :

               void efp_set_options()



.. function:: psi4.fd_1_0

   Python Library Documentation: built-in function fd_1_0 in module psi4

   

   fd_1_0(...)

       fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :

           Performs a finite difference gradient computation, from energy points.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE)



.. function:: psi4.fd_freq_0

   Python Library Documentation: built-in function fd_freq_0 in module psi4

   

   fd_freq_0(...)

       fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :

           Performs a finite difference frequency computation, from energy points, for a given irrep.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i)



.. function:: psi4.fd_freq_1

   Python Library Documentation: built-in function fd_freq_1 in module psi4

   

   fd_freq_1(...)

       fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :

           Performs a finite difference frequency computation, from gradients, for a given irrep.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i)



.. function:: psi4.fd_geoms_1_0

   Python Library Documentation: built-in function fd_geoms_1_0 in module psi4

   

   fd_geoms_1_0(...)

       fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :

           Gets list of displacements needed for a finite difference gradient computation, from energy points.

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.fd_geoms_freq_0

   Python Library Documentation: built-in function fd_geoms_freq_0 in module psi4

   

   fd_geoms_freq_0(...)

       fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :

           Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i)



.. function:: psi4.fd_geoms_freq_1

   Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4

   

   fd_geoms_freq_1(...)

       fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :

           Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i)



.. function:: psi4.fisapt

   Python Library Documentation: built-in function fisapt in module psi4

   

   fisapt(...)

       fisapt( (Wavefunction)arg1) -> float :

           Runs the functional-group intramolecular symmetry adapted perturbation theory code.

       

           C++ signature :

               d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.flush_outfile

   Python Library Documentation: built-in function flush_outfile in module psi4

   

   flush_outfile(...)

       flush_outfile() -> None :

           Flushes the output file.

       

           C++ signature :

               void flush_outfile()



.. function:: psi4.fnocc

   Python Library Documentation: built-in function fnocc in module psi4

   

   fnocc(...)

       fnocc( (Wavefunction)arg1) -> Wavefunction :

           Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.get_active_efp

   Python Library Documentation: built-in function get_active_efp in module psi4

   

   get_active_efp(...)

       get_active_efp() -> EFP :

           Returns the currently active EFP object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp()



.. function:: psi4.get_active_molecule

   Python Library Documentation: built-in function get_active_molecule in module psi4

   

   get_active_molecule(...)

       get_active_molecule() -> Molecule :

           Returns the currently active molecule object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule()



.. function:: psi4.get_array_variable

   Python Library Documentation: built-in function get_array_variable in module psi4

   

   get_array_variable(...)

       get_array_variable( (str)arg1) -> Matrix :

           Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss)



.. function:: psi4.get_array_variables

   Python Library Documentation: built-in function get_array_variables in module psi4

   

   get_array_variables(...)

       get_array_variables() -> dict :

           Returns dictionary of the PSI variables set internally by the modules or python driver.

       

           C++ signature :

               N5boost6python4dictE get_array_variables()



.. function:: psi4.get_atomic_point_charges

   Python Library Documentation: built-in function get_atomic_point_charges in module psi4

   

   get_atomic_point_charges(...)

       get_atomic_point_charges() -> Vector :

           Returns the most recently computed atomic point charges, as a double * object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges()



.. function:: psi4.get_efp_torque

   Python Library Documentation: built-in function get_efp_torque in module psi4

   

   get_efp_torque(...)

       get_efp_torque() -> Matrix :

           Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque()



.. function:: psi4.get_frequencies

   Python Library Documentation: built-in function get_frequencies in module psi4

   

   get_frequencies(...)

       get_frequencies() -> Vector :

           Returns the most recently computed frequencies, as a 3N-6 Vector object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE get_frequencies()



.. function:: psi4.get_global_option

   Python Library Documentation: built-in function get_global_option in module psi4

   

   get_global_option(...)

       get_global_option( (str)arg1) -> object :

           Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.

       

           C++ signature :

               N5boost6python3api6objectE get_global_option(Ss)



.. function:: psi4.get_global_option_list

   Python Library Documentation: built-in function get_global_option_list in module psi4

   

   get_global_option_list(...)

       get_global_option_list() -> list :

           Returns a list of all global options.

       

           C++ signature :

               N5boost6python4listE get_global_option_list()



.. function:: psi4.get_gradient

   Python Library Documentation: built-in function get_gradient in module psi4

   

   get_gradient(...)

       get_gradient() -> Matrix :

           Returns the most recently computed gradient, as a N by 3 Matrix object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_gradient()



.. function:: psi4.get_input_directory

   Python Library Documentation: built-in function get_input_directory in module psi4

   

   get_input_directory(...)

       get_input_directory() -> str :

           Returns the location of the input file.

       

           C++ signature :

               Ss get_input_directory()



.. function:: psi4.get_legacy_molecule

   Python Library Documentation: built-in function get_legacy_molecule in module psi4

   

   get_legacy_molecule(...)

       get_legacy_molecule() -> Molecule :

           Returns the currently active molecule object.

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule()



.. function:: psi4.get_local_option

   Python Library Documentation: built-in function get_local_option in module psi4

   

   get_local_option(...)

       get_local_option( (str)arg1, (str)arg2) -> object :

           Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.

       

           C++ signature :

               N5boost6python3api6objectE get_local_option(Ss,Ss)



.. function:: psi4.get_memory

   Python Library Documentation: built-in function get_memory in module psi4

   

   get_memory(...)

       get_memory() -> int :

           Returns the amount of memory available to Psi (in bytes).

       

           C++ signature :

               m get_memory()



.. function:: psi4.get_option

   Python Library Documentation: built-in function get_option in module psi4

   

   get_option(...)

       get_option( (str)arg1, (str)arg2) -> object :

           Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.

       

           C++ signature :

               N5boost6python3api6objectE get_option(Ss,Ss)



.. function:: psi4.get_variable

   Python Library Documentation: built-in function get_variable in module psi4

   

   get_variable(...)

       get_variable( (str)arg1) -> float :

           Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).

       

           C++ signature :

               d get_variable(Ss)



.. function:: psi4.get_variables

   Python Library Documentation: built-in function get_variables in module psi4

   

   get_variables(...)

       get_variables() -> dict :

           Returns dictionary of the PSI variables set internally by the modules or python driver.

       

           C++ signature :

               N5boost6python4dictE get_variables()



.. function:: psi4.get_writer_file_prefix

   Python Library Documentation: built-in function get_writer_file_prefix in module psi4

   

   get_writer_file_prefix(...)

       get_writer_file_prefix( (str)arg1) -> str :

           Returns the prefix to use for writing files for external programs.

       

           C++ signature :

               Ss get_writer_file_prefix(Ss)



.. function:: psi4.git_version

   Python Library Documentation: built-in function git_version in module psi4

   

   git_version(...)

       git_version() -> str :

           Returns the git version of this copy of Psi.

       

           C++ signature :

               PKc git_version()



.. function:: psi4.has_global_option_changed

   Python Library Documentation: built-in function has_global_option_changed in module psi4

   

   has_global_option_changed(...)

       has_global_option_changed( (str)arg1) -> bool :

           Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.

       

           C++ signature :

               b has_global_option_changed(Ss)



.. function:: psi4.has_local_option_changed

   Python Library Documentation: built-in function has_local_option_changed in module psi4

   

   has_local_option_changed(...)

       has_local_option_changed( (str)arg1, (str)arg2) -> bool :

           Returns boolean for whether the keyword *arg2* has been touched in the scope of the specified module *arg1*, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the module scope by the user.

       

           C++ signature :

               b has_local_option_changed(Ss,Ss)



.. function:: psi4.has_option_changed

   Python Library Documentation: built-in function has_option_changed in module psi4

   

   has_option_changed(...)

       has_option_changed( (str)arg1, (str)arg2) -> bool :

           Returns boolean for whether the option *arg2* has been touched either locally to the specified module *arg1* or globally, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched by the user.

       

           C++ signature :

               b has_option_changed(Ss,Ss)



.. function:: psi4.legacy_wavefunction

   Python Library Documentation: built-in function legacy_wavefunction in module psi4

   

   legacy_wavefunction(...)

       legacy_wavefunction() -> Wavefunction :

           Returns the current legacy_wavefunction object from the most recent computation.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE legacy_wavefunction()



.. function:: psi4.libfock

   Python Library Documentation: built-in function libfock in module psi4

   

   libfock(...)

       libfock( (Wavefunction)arg1) -> Wavefunction :

           Runs a CPHF calculation, using libfock.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE libfock(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.mcscf

   Python Library Documentation: built-in function mcscf in module psi4

   

   mcscf(...)

       mcscf( (Wavefunction)arg1) -> Wavefunction :

           Runs the MCSCF code, (N.B. restricted to certain active spaces).

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE mcscf(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.mrcc_generate_input

   Python Library Documentation: built-in function mrcc_generate_input in module psi4

   

   mrcc_generate_input(...)

       mrcc_generate_input( (Wavefunction)arg1, (dict)arg2) -> PsiReturnType :

           Generates an input for Kallay's MRCC code.

       

           C++ signature :

               N3psi13PsiReturnTypeE mrcc_generate_input(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE)



.. function:: psi4.mrcc_load_densities

   Python Library Documentation: built-in function mrcc_load_densities in module psi4

   

   mrcc_load_densities(...)

       mrcc_load_densities( (Wavefunction)arg1, (dict)arg2) -> PsiReturnType :

           Reads in the density matrices from Kallay's MRCC code.

       

           C++ signature :

               N3psi13PsiReturnTypeE mrcc_load_densities(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE)



.. function:: psi4.new_wavefunction

   Python Library Documentation: built-in function new_wavefunction in module psi4

   

   new_wavefunction(...)

       new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :

           Builds a new wavefunction from scratch.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss)



.. function:: psi4.nthread

   Python Library Documentation: built-in function nthread in module psi4

   

   nthread(...)

       nthread() -> int :

           Returns the number of threads to use in SMP parallel computations.

       

           C++ signature :

               i nthread()



.. function:: psi4.nuclear_dipole

   Python Library Documentation: built-in function nuclear_dipole in module psi4

   

   nuclear_dipole(...)

       nuclear_dipole( (Molecule)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.occ

   Python Library Documentation: built-in function occ in module psi4

   

   occ(...)

       occ( (Wavefunction)arg1) -> Wavefunction :

           Runs the orbital optimized CC codes.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.opt_clean

   Python Library Documentation: built-in function opt_clean in module psi4

   

   opt_clean(...)

       opt_clean() -> None :

           Cleans up the optimizer's scratch files.

       

           C++ signature :

               void opt_clean()



.. function:: psi4.optking

   Python Library Documentation: built-in function optking in module psi4

   

   optking(...)

       optking() -> int :

           Runs the geometry optimization / frequency analysis code.

       

           C++ signature :

               i optking()



.. function:: psi4.outfile_name

   Python Library Documentation: built-in function outfile_name in module psi4

   

   outfile_name(...)

       outfile_name() -> str :

           Returns the name of the output file.

       

           C++ signature :

               Ss outfile_name()



.. function:: psi4.plugin

   Python Library Documentation: built-in function plugin in module psi4

   

   plugin(...)

       plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.plugin_close

   Python Library Documentation: built-in function plugin_close in module psi4

   

   plugin_close(...)

       plugin_close( (str)arg1) -> None :

           docstring

       

           C++ signature :

               void plugin_close(Ss)



.. function:: psi4.plugin_close_all

   Python Library Documentation: built-in function plugin_close_all in module psi4

   

   plugin_close_all(...)

       plugin_close_all() -> None :

           docstring

       

           C++ signature :

               void plugin_close_all()



.. function:: psi4.plugin_load

   Python Library Documentation: built-in function plugin_load in module psi4

   

   plugin_load(...)

       plugin_load( (str)arg1) -> int :

           docstring

       

           C++ signature :

               i plugin_load(Ss)



.. function:: psi4.prepare_options_for_module

   Python Library Documentation: built-in function prepare_options_for_module in module psi4

   

   prepare_options_for_module(...)

       prepare_options_for_module( (str)arg1) -> None :

           Sets the options module up to return options pertaining to the named argument (e.g. SCF).

       

           C++ signature :

               void prepare_options_for_module(Ss)



.. function:: psi4.print_global_options

   Python Library Documentation: built-in function print_global_options in module psi4

   

   print_global_options(...)

       print_global_options() -> None :

           Prints the currently set global (all modules) options to the output file.

       

           C++ signature :

               void print_global_options()



.. function:: psi4.print_options

   Python Library Documentation: built-in function print_options in module psi4

   

   print_options(...)

       print_options() -> None :

           Prints the currently set options (to the output file) for the current module.

       

           C++ signature :

               void print_options()



.. function:: psi4.print_out

   Python Library Documentation: built-in function print_out in module psi4

   

   print_out(...)

       print_out( (str)arg1) -> None :

           Prints a string (using sprintf-like notation) to the output file.

       

           C++ signature :

               void print_out(Ss)



.. function:: psi4.print_variables

   Python Library Documentation: built-in function print_variables in module psi4

   

   print_variables(...)

       print_variables() -> None :

           Prints all PSI variables that have been set internally.

       

           C++ signature :

               void print_variables()



.. function:: psi4.psi_top_srcdir

   Python Library Documentation: built-in function psi_top_srcdir in module psi4

   

   psi_top_srcdir(...)

       psi_top_srcdir() -> str :

           Returns the location of the source code.

       

           C++ signature :

               Ss psi_top_srcdir()



.. function:: psi4.psimrcc

   Python Library Documentation: built-in function psimrcc in module psi4

   

   psimrcc(...)

       psimrcc( (Wavefunction)arg1) -> float :

           Runs the multireference coupled cluster code.

       

           C++ signature :

               d psimrcc(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.reopen_outfile

   Python Library Documentation: built-in function reopen_outfile in module psi4

   

   reopen_outfile(...)

       reopen_outfile() -> None :

           Reopens the output file.

       

           C++ signature :

               void reopen_outfile()



.. function:: psi4.revoke_global_option_changed

   Python Library Documentation: built-in function revoke_global_option_changed in module psi4

   

   revoke_global_option_changed(...)

       revoke_global_option_changed( (str)arg1) -> None :

           Given a string of a keyword name *arg1*, sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.

       

           C++ signature :

               void revoke_global_option_changed(Ss)



.. function:: psi4.revoke_local_option_changed

   Python Library Documentation: built-in function revoke_local_option_changed in module psi4

   

   revoke_local_option_changed(...)

       revoke_local_option_changed( (str)arg1, (str)arg2) -> None :

           Given a string of a keyword name *arg2* and a particular module *arg1*, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.

       

           C++ signature :

               void revoke_local_option_changed(Ss,Ss)



.. function:: psi4.run_gdma

   Python Library Documentation: built-in function run_gdma in module psi4

   

   run_gdma(...)

       run_gdma( (Wavefunction)arg1, (str)arg2) -> float :

           Runs the GDMA code.

       

           C++ signature :

               d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss)



.. function:: psi4.sapt

   Python Library Documentation: built-in function sapt in module psi4

   

   sapt(...)

       sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :

           Runs the symmetry adapted perturbation theory code.

       

           C++ signature :

               d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.scatter

   Python Library Documentation: built-in function scatter in module psi4

   

   scatter(...)

       scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :

           New Scatter function.

       

           C++ signature :

               void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE)



.. function:: psi4.scf

   Python Library Documentation: built-in function scf in module psi4

   

   scf(...)

       scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :

           Runs the SCF code.

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object)



.. function:: psi4.scfgrad

   Python Library Documentation: built-in function scfgrad in module psi4

   

   scfgrad(...)

       scfgrad( (Wavefunction)arg1) -> Matrix :

           Run scfgrad, which is a specialized DF-SCF gradient program.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.scfhess

   Python Library Documentation: built-in function scfhess in module psi4

   

   scfhess(...)

       scfhess( (Wavefunction)arg1) -> Matrix :

           Run scfhess, which is a specialized DF-SCF hessian program.

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE scfhess(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.set_active_molecule

   Python Library Documentation: built-in function set_active_molecule in module psi4

   

   set_active_molecule(...)

       set_active_molecule( (Molecule)arg1) -> None :

           Activates a previously defined (in the input) molecule, by name.

       

           C++ signature :

               void set_active_molecule(N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.set_array_variable

   Python Library Documentation: built-in function set_array_variable in module psi4

   

   set_array_variable(...)

       set_array_variable( (str)arg1, (Matrix)arg2) -> None :

           Sets a PSI variable, by name.

       

           C++ signature :

               void set_array_variable(Ss,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.set_efp_torque

   Python Library Documentation: built-in function set_efp_torque in module psi4

   

   set_efp_torque(...)

       set_efp_torque( (Matrix)arg1) -> None :

           Assigns the global EFP gradient to the values stored in the Nefp by 6 Matrix argument.

       

           C++ signature :

               void set_efp_torque(N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.set_frequencies

   Python Library Documentation: built-in function set_frequencies in module psi4

   

   set_frequencies(...)

       set_frequencies( (Vector)arg1) -> None :

           Assigns the global frequencies to the values stored in the 3N-6 Vector argument.

       

           C++ signature :

               void set_frequencies(N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.set_global_option

   Python Library Documentation: built-in function set_global_option in module psi4

   

   set_global_option(...)

       set_global_option( (str)arg1, (str)arg2) -> bool :

           Sets value *arg2* to string keyword *arg1* for all modules.

       

           C++ signature :

               b set_global_option(Ss,Ss)

       

       set_global_option( (str)arg1, (float)arg2) -> bool :

           Sets value *arg2* to double keyword *arg1* for all modules.

       

           C++ signature :

               b set_global_option(Ss,d)

       

       set_global_option( (str)arg1, (int)arg2) -> bool :

           Sets value *arg2* to integer keyword *arg1* for all modules.

       

           C++ signature :

               b set_global_option(Ss,i)

       

       set_global_option( (str)arg1, (list)arg2 [, (object)arg3]) -> bool :

       

           C++ signature :

               b set_global_option(Ss,N5boost6python4listE [,PN3psi8DataTypeE])



.. function:: psi4.set_global_option_python

   Python Library Documentation: built-in function set_global_option_python in module psi4

   

   set_global_option_python(...)

       set_global_option_python( (str)arg1, (object)arg2) -> bool :

           Sets a global option to a Python object type.

       

           C++ signature :

               b set_global_option_python(Ss,N5boost6python3api6objectE {lvalue})



.. function:: psi4.set_gradient

   Python Library Documentation: built-in function set_gradient in module psi4

   

   set_gradient(...)

       set_gradient( (Matrix)arg1) -> None :

           Assigns the global gradient to the values stored in the N by 3 Matrix argument.

       

           C++ signature :

               void set_gradient(N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.set_legacy_molecule

   Python Library Documentation: built-in function set_legacy_molecule in module psi4

   

   set_legacy_molecule(...)

       set_legacy_molecule( (Molecule)arg1) -> None :

           Activates a previously defined (in the input) molecule, by name.

       

           C++ signature :

               void set_legacy_molecule(N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.set_legacy_wavefunction

   Python Library Documentation: built-in function set_legacy_wavefunction in module psi4

   

   set_legacy_wavefunction(...)

       set_legacy_wavefunction( (Wavefunction)arg1) -> None :

           Returns the current legacy_wavefunction object from the most recent computation.

       

           C++ signature :

               void set_legacy_wavefunction(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.set_local_option

   Python Library Documentation: built-in function set_local_option in module psi4

   

   set_local_option(...)

       set_local_option( (str)arg1, (str)arg2, (str)arg3) -> bool :

           Sets value *arg3* to string keyword *arg2* scoped only to a specific module *arg1*.

       

           C++ signature :

               b set_local_option(Ss,Ss,Ss)

       

       set_local_option( (str)arg1, (str)arg2, (float)arg3) -> bool :

           Sets value *arg3* to double keyword *arg2* scoped only to a specific module *arg1*.

       

           C++ signature :

               b set_local_option(Ss,Ss,d)

       

       set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :

           Sets value *arg3* to integer keyword *arg2* scoped only to a specific module *arg1*.

       

           C++ signature :

               b set_local_option(Ss,Ss,i)

       

       set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool :

       

           C++ signature :

               b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE])



.. function:: psi4.set_local_option_python

   Python Library Documentation: built-in function set_local_option_python in module psi4

   

   set_local_option_python(...)

       set_local_option_python( (str)arg1, (object)arg2) -> None :

           Sets an option to a Python object, but scoped only to a single module.

       

           C++ signature :

               void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue})



.. function:: psi4.set_memory

   Python Library Documentation: built-in function set_memory in module psi4

   

   set_memory(...)

       set_memory( (int)arg1) -> None :

           Sets the memory available to Psi (in bytes).

       

           C++ signature :

               void set_memory(m)



.. function:: psi4.set_nthread

   Python Library Documentation: built-in function set_nthread in module psi4

   

   set_nthread(...)

       set_nthread( (int)arg1) -> None :

           Sets the number of threads to use in SMP parallel computations.

       

           C++ signature :

               void set_nthread(i)



.. function:: psi4.set_parent_symmetry

   Python Library Documentation: built-in function set_parent_symmetry in module psi4

   

   set_parent_symmetry(...)

       set_parent_symmetry( (str)arg1) -> None :

           Sets the symmetry of the 'parent' (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.

       

           C++ signature :

               void set_parent_symmetry(Ss)



.. function:: psi4.set_variable

   Python Library Documentation: built-in function set_variable in module psi4

   

   set_variable(...)

       set_variable( (str)arg1, (float)arg2) -> None :

           Sets a PSI variable, by name.

       

           C++ signature :

               void set_variable(Ss,d)



.. function:: psi4.thermo

   Python Library Documentation: built-in function thermo in module psi4

   

   thermo(...)

       thermo( (Wavefunction)arg1, (Vector)arg2) -> float :

           Computes thermodynamic data.

       

           C++ signature :

               d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.transqt2

   Python Library Documentation: built-in function transqt2 in module psi4

   

   transqt2(...)

       transqt2( (Wavefunction)arg1) -> float :

           Runs the (deprecated) transformation code.

       

           C++ signature :

               d transqt2(N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.version

   Python Library Documentation: built-in function version in module psi4

   

   version(...)

       version() -> str :

           Returns the version ID of this copy of Psi.

       

           C++ signature :

               PKc version()



.. _`sec:psimod_AOShellCombinationsIterator`:



AOShellCombinationsIterator
===========================



.. function:: psi4.AOShellCombinationsIterator.first

   Python Library Documentation: method first

   

   first(...) unbound psi4.AOShellCombinationsIterator method

       first( (AOShellCombinationsIterator)arg1) -> None :

           docstring

       

           C++ signature :

               void first(N3psi27AOShellCombinationsIteratorE {lvalue})



.. function:: psi4.AOShellCombinationsIterator.is_done

   Python Library Documentation: method is_done

   

   is_done(...) unbound psi4.AOShellCombinationsIterator method

       is_done( (AOShellCombinationsIterator)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_done(N3psi27AOShellCombinationsIteratorE {lvalue})



.. function:: psi4.AOShellCombinationsIterator.next

   Python Library Documentation: method next

   

   next(...) unbound psi4.AOShellCombinationsIterator method

       next( (AOShellCombinationsIterator)arg1) -> None :

           docstring

       

           C++ signature :

               void next(N3psi27AOShellCombinationsIteratorE {lvalue})



.. function:: psi4.AOShellCombinationsIterator.p

   Python Library Documentation: property

   

       docstring



.. function:: psi4.AOShellCombinationsIterator.q

   Python Library Documentation: property

   

       docstring



.. function:: psi4.AOShellCombinationsIterator.r

   Python Library Documentation: property

   

       docstring



.. function:: psi4.AOShellCombinationsIterator.s

   Python Library Documentation: property

   

       docstring



.. _`sec:psimod_AngularMomentumInt`:



AngularMomentumInt
==================



.. function:: psi4.AngularMomentumInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.AngularMomentumInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.AngularMomentumInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.AngularMomentumInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.AngularMomentumInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.AngularMomentumInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.AngularMomentumInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.AngularMomentumInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.AngularMomentumInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.AngularMomentumInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_BasisSet`:



BasisSet
========



.. function:: psi4.BasisSet.ao_to_shell

   Python Library Documentation: method ao_to_shell

   

   ao_to_shell(...) unbound psi4.BasisSet method

       ao_to_shell( (BasisSet)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i ao_to_shell(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.construct

   Python Library Documentation: built-in function construct

   

   construct(...)

       construct( (BasisSetParser)arg1, (Molecule)arg2, (str)arg3) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE construct(N5boost10shared_ptrIN3psi14BasisSetParserEEE,N5boost10shared_ptrIN3psi8MoleculeEEE,Ss)



.. function:: psi4.BasisSet.decontract

   Python Library Documentation: method decontract

   

   decontract(...) unbound psi4.BasisSet method

       decontract( (BasisSet)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE decontract(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.function_to_center

   Python Library Documentation: method function_to_center

   

   function_to_center(...) unbound psi4.BasisSet method

       function_to_center( (BasisSet)arg1, (int)arg2) -> int :

           Given a function number, return the number of the center it is on.

       

           C++ signature :

               i function_to_center(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.function_to_shell

   Python Library Documentation: method function_to_shell

   

   function_to_shell(...) unbound psi4.BasisSet method

       function_to_shell( (BasisSet)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i function_to_shell(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.genbas

   Python Library Documentation: method genbas

   

   genbas(...) unbound psi4.BasisSet method

       genbas( (BasisSet)arg1) -> str :

           Returns basis set per atom in CFOUR format

       

           C++ signature :

               Ss genbas(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.has_puream

   Python Library Documentation: method has_puream

   

   has_puream(...) unbound psi4.BasisSet method

       has_puream( (BasisSet)arg1) -> bool :

           Spherical harmonics?

       

           C++ signature :

               b has_puream(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.make_filename

   Python Library Documentation: built-in function make_filename

   

   make_filename(...)

       make_filename( (str)arg1) -> str :

           Returns filename for basis name: pluses, stars, parentheses replaced and gbs extension added

       

           C++ signature :

               Ss make_filename(Ss)



.. function:: psi4.BasisSet.max_am

   Python Library Documentation: method max_am

   

   max_am(...) unbound psi4.BasisSet method

       max_am( (BasisSet)arg1) -> int :

           Returns maximum angular momentum used

       

           C++ signature :

               i max_am(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.max_function_per_shell

   Python Library Documentation: method max_function_per_shell

   

   max_function_per_shell(...) unbound psi4.BasisSet method

       max_function_per_shell( (BasisSet)arg1) -> int :

           docstring

       

           C++ signature :

               i max_function_per_shell(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.max_nprimitive

   Python Library Documentation: method max_nprimitive

   

   max_nprimitive(...) unbound psi4.BasisSet method

       max_nprimitive( (BasisSet)arg1) -> int :

           docstring

       

           C++ signature :

               i max_nprimitive(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.nao

   Python Library Documentation: method nao

   

   nao(...) unbound psi4.BasisSet method

       nao( (BasisSet)arg1) -> int :

           Returns number of atomic orbitals (Cartesian)

       

           C++ signature :

               i nao(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.nbf

   Python Library Documentation: method nbf

   

   nbf(...) unbound psi4.BasisSet method

       nbf( (BasisSet)arg1) -> int :

           Returns number of basis functions (Cartesian or spherical depending on has_puream)

       

           C++ signature :

               i nbf(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.nprimitive

   Python Library Documentation: method nprimitive

   

   nprimitive(...) unbound psi4.BasisSet method

       nprimitive( (BasisSet)arg1) -> int :

           Returns total number of primitives in all contractions

       

           C++ signature :

               i nprimitive(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.nshell

   Python Library Documentation: method nshell

   

   nshell(...) unbound psi4.BasisSet method

       nshell( (BasisSet)arg1) -> int :

           Returns number of shells

       

           C++ signature :

               i nshell(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.nshell_on_center

   Python Library Documentation: method nshell_on_center

   

   nshell_on_center(...) unbound psi4.BasisSet method

       nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i nshell_on_center(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.print_detail_out

   Python Library Documentation: method print_detail_out

   

   print_detail_out(...) unbound psi4.BasisSet method

       print_detail_out( (BasisSet)arg1) -> None :

           docstring

       

           C++ signature :

               void print_detail_out(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.BasisSet method

       print_out( (BasisSet)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi8BasisSetE {lvalue})



.. function:: psi4.BasisSet.pyconstruct_auxiliary

   Python Library Documentation: built-in function pyconstruct_auxiliary

   

   pyconstruct_auxiliary(...)

       pyconstruct_auxiliary( (Molecule)arg1, (str)arg2, (str)arg3, (str)arg4, (str)arg5 [, (int)arg6]) -> BasisSet :

           Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_auxiliary(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,Ss,Ss [,i])



.. function:: psi4.BasisSet.pyconstruct_orbital

   Python Library Documentation: built-in function pyconstruct_orbital

   

   pyconstruct_orbital(...)

       pyconstruct_orbital( (Molecule)arg1, (str)arg2, (str)arg3 [, (int)arg4]) -> BasisSet :

           Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i])



.. function:: psi4.BasisSet.shell

   Python Library Documentation: method shell

   

   shell(...) unbound psi4.BasisSet method

       shell( (BasisSet)arg1, (int)arg2) -> GaussianShell :

           docstring

       

           C++ signature :

               N3psi13GaussianShellE shell(N3psi8BasisSetE {lvalue},i)

       

       shell( (BasisSet)arg1, (int)arg2, (int)arg3) -> GaussianShell :

           docstring

       

           C++ signature :

               N3psi13GaussianShellE shell(N3psi8BasisSetE {lvalue},i,i)



.. function:: psi4.BasisSet.shell_to_ao_function

   Python Library Documentation: method shell_to_ao_function

   

   shell_to_ao_function(...) unbound psi4.BasisSet method

       shell_to_ao_function( (BasisSet)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i shell_to_ao_function(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.shell_to_basis_function

   Python Library Documentation: method shell_to_basis_function

   

   shell_to_basis_function(...) unbound psi4.BasisSet method

       shell_to_basis_function( (BasisSet)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i shell_to_basis_function(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.shell_to_center

   Python Library Documentation: method shell_to_center

   

   shell_to_center(...) unbound psi4.BasisSet method

       shell_to_center( (BasisSet)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i shell_to_center(N3psi8BasisSetE {lvalue},i)



.. function:: psi4.BasisSet.zero_ao_basis_set

   Python Library Documentation: built-in function zero_ao_basis_set

   

   zero_ao_basis_set(...)

       zero_ao_basis_set() -> BasisSet :

           Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set()



.. _`sec:psimod_BasisSetParser`:



BasisSetParser
==============



.. _`sec:psimod_BoysLocalizer`:



BoysLocalizer
=============



.. function:: psi4.BoysLocalizer.L

   Python Library Documentation: property

   

       Localized orbital coefficients



.. function:: psi4.BoysLocalizer.U

   Python Library Documentation: property

   

       Orbital rotation matrix



.. function:: psi4.BoysLocalizer.build

   Python Library Documentation: built-in function build

   

   build(...)

       build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.BoysLocalizer.converged

   Python Library Documentation: property

   

       Did the localization procedure converge?



.. function:: psi4.BoysLocalizer.localize

   Python Library Documentation: method localize

   

   localize(...) unbound psi4.BoysLocalizer method

       localize( (Localizer)arg1) -> None :

           Perform the localization procedure

       

           C++ signature :

               void localize(N3psi9LocalizerE {lvalue})



.. _`sec:psimod_CIVector`:



CIVector
========



.. function:: psi4.CIVector.axpy

   Python Library Documentation: method axpy

   

   axpy(...) unbound psi4.CIVector method

       axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :

           docstring

       

           C++ signature :

               void axpy(N3psi5detci6CIvectE {lvalue},d,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i)



.. function:: psi4.CIVector.close_io_files

   Python Library Documentation: method close_io_files

   

   close_io_files(...) unbound psi4.CIVector method

       close_io_files( (CIVector)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void close_io_files(N3psi5detci6CIvectE {lvalue},i)



.. function:: psi4.CIVector.copy

   Python Library Documentation: method copy

   

   copy(...) unbound psi4.CIVector method

       copy( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> None :

           docstring

       

           C++ signature :

               void copy(N3psi5detci6CIvectE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i)



.. function:: psi4.CIVector.dcalc

   Python Library Documentation: method dcalc

   

   dcalc(...) unbound psi4.CIVector method

       dcalc( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4) -> float :

           docstring

       

           C++ signature :

               d dcalc(N3psi5detci6CIvectE {lvalue},d,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i)



.. function:: psi4.CIVector.init_io_files

   Python Library Documentation: method init_io_files

   

   init_io_files(...) unbound psi4.CIVector method

       init_io_files( (CIVector)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void init_io_files(N3psi5detci6CIvectE {lvalue},b)



.. function:: psi4.CIVector.norm

   Python Library Documentation: method norm

   

   norm(...) unbound psi4.CIVector method

       norm( (CIVector)arg1, (int)arg2) -> float :

           docstring

       

           C++ signature :

               d norm(N3psi5detci6CIvectE {lvalue},i)



.. function:: psi4.CIVector.np

   Python Library Documentation: property

   

       Returns a view of the CIVector's buffer



.. function:: psi4.CIVector.read

   Python Library Documentation: method read

   

   read(...) unbound psi4.CIVector method

       read( (CIVector)arg1, (int)arg2, (int)arg3) -> int :

           docstring

       

           C++ signature :

               i read(N3psi5detci6CIvectE {lvalue},i,i)



.. function:: psi4.CIVector.scale

   Python Library Documentation: method scale

   

   scale(...) unbound psi4.CIVector method

       scale( (CIVector)arg1, (float)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void scale(N3psi5detci6CIvectE {lvalue},d,i)



.. function:: psi4.CIVector.set_nvec

   Python Library Documentation: method set_nvec

   

   set_nvec(...) unbound psi4.CIVector method

       set_nvec( (CIVector)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void set_nvec(N3psi5detci6CIvectE {lvalue},i)



.. function:: psi4.CIVector.symnormalize

   Python Library Documentation: method symnormalize

   

   symnormalize(...) unbound psi4.CIVector method

       symnormalize( (CIVector)arg1, (float)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void symnormalize(N3psi5detci6CIvectE {lvalue},d,i)



.. function:: psi4.CIVector.vdot

   Python Library Documentation: method vdot

   

   vdot(...) unbound psi4.CIVector method

       vdot( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> float :

           docstring

       

           C++ signature :

               d vdot(N3psi5detci6CIvectE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i)



.. function:: psi4.CIVector.write

   Python Library Documentation: method write

   

   write(...) unbound psi4.CIVector method

       write( (CIVector)arg1, (int)arg2, (int)arg3) -> int :

           docstring

       

           C++ signature :

               i write(N3psi5detci6CIvectE {lvalue},i,i)



.. function:: psi4.CIVector.zero

   Python Library Documentation: method zero

   

   zero(...) unbound psi4.CIVector method

       zero( (CIVector)arg1) -> None :

           docstring

       

           C++ signature :

               void zero(N3psi5detci6CIvectE {lvalue})



.. _`sec:psimod_CIWavefunction`:



CIWavefunction
==============



.. function:: psi4.CIWavefunction.Ca

   Python Library Documentation: method Ca

   

   Ca(...) unbound psi4.CIWavefunction method

       Ca( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.Ca_subset

   Python Library Documentation: method Ca_subset

   

   Ca_subset(...) unbound psi4.CIWavefunction method

       Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CIWavefunction.Cb

   Python Library Documentation: method Cb

   

   Cb(...) unbound psi4.CIWavefunction method

       Cb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.Cb_subset

   Python Library Documentation: method Cb_subset

   

   Cb_subset(...) unbound psi4.CIWavefunction method

       Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CIWavefunction.Da

   Python Library Documentation: method Da

   

   Da(...) unbound psi4.CIWavefunction method

       Da( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Da(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.Db

   Python Library Documentation: method Db

   

   Db(...) unbound psi4.CIWavefunction method

       Db( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Db(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.Fa

   Python Library Documentation: method Fa

   

   Fa(...) unbound psi4.CIWavefunction method

       Fa( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fa(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.Fb

   Python Library Documentation: method Fb

   

   Fb(...) unbound psi4.CIWavefunction method

       Fb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.Hd_vector

   Python Library Documentation: method Hd_vector

   

   Hd_vector(...) unbound psi4.CIWavefunction method

       Hd_vector( (CIWavefunction)arg1, (int)arg2) -> CIVector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi5detci6CIvectEEE Hd_vector(N3psi5detci14CIWavefunctionE {lvalue},i)



.. function:: psi4.CIWavefunction.X

   Python Library Documentation: method X

   

   X(...) unbound psi4.CIWavefunction method

       X( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE X(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.add_postiteration_callback

   Python Library Documentation: method add_postiteration_callback

   

   add_postiteration_callback(...) unbound psi4.CIWavefunction method

       add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_postiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.CIWavefunction.add_preiteration_callback

   Python Library Documentation: method add_preiteration_callback

   

   add_preiteration_callback(...) unbound psi4.CIWavefunction method

       add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_preiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.CIWavefunction.alpha_orbital_space

   Python Library Documentation: method alpha_orbital_space

   

   alpha_orbital_space(...) unbound psi4.CIWavefunction method

       alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE alpha_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.CIWavefunction.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.CIWavefunction method

       aotoso( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.atomic_point_charges

   Python Library Documentation: method atomic_point_charges

   

   atomic_point_charges(...) unbound psi4.CIWavefunction method

       atomic_point_charges( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE atomic_point_charges(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.CIWavefunction method

       basisset( (Wavefunction)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.beta_orbital_space

   Python Library Documentation: method beta_orbital_space

   

   beta_orbital_space(...) unbound psi4.CIWavefunction method

       beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.CIWavefunction.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.CIWavefunction method

       compute_energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.CIWavefunction method

       compute_gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.compute_mcscf

   Python Library Documentation: method compute_mcscf

   

   compute_mcscf(...) unbound psi4.CIWavefunction method

       compute_mcscf( (CIWavefunction)arg1) -> None :

           docstring

       

           C++ signature :

               void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.deep_copy

   Python Library Documentation: method deep_copy

   

   deep_copy(...) unbound psi4.CIWavefunction method

       deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.CIWavefunction.diag_h

   Python Library Documentation: method diag_h

   

   diag_h(...) unbound psi4.CIWavefunction method

       diag_h( (CIWavefunction)arg1) -> None :

           docstring

       

           C++ signature :

               void diag_h(N3psi5detci14CIWavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.doccpi

   Python Library Documentation: method doccpi

   

   doccpi(...) unbound psi4.CIWavefunction method

       doccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.energy

   Python Library Documentation: method energy

   

   energy(...) unbound psi4.CIWavefunction method

       energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.epsilon_a

   Python Library Documentation: method epsilon_a

   

   epsilon_a(...) unbound psi4.CIWavefunction method

       epsilon_a( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.epsilon_a_subset

   Python Library Documentation: method epsilon_a_subset

   

   epsilon_a_subset(...) unbound psi4.CIWavefunction method

       epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CIWavefunction.epsilon_b

   Python Library Documentation: method epsilon_b

   

   epsilon_b(...) unbound psi4.CIWavefunction method

       epsilon_b( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.epsilon_b_subset

   Python Library Documentation: method epsilon_b_subset

   

   epsilon_b_subset(...) unbound psi4.CIWavefunction method

       epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CIWavefunction.form_opdm

   Python Library Documentation: method form_opdm

   

   form_opdm(...) unbound psi4.CIWavefunction method

       form_opdm( (CIWavefunction)arg1) -> None :

           docstring

       

           C++ signature :

               void form_opdm(N3psi5detci14CIWavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.form_tpdm

   Python Library Documentation: method form_tpdm

   

   form_tpdm(...) unbound psi4.CIWavefunction method

       form_tpdm( (CIWavefunction)arg1) -> None :

           docstring

       

           C++ signature :

               void form_tpdm(N3psi5detci14CIWavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.frequencies

   Python Library Documentation: method frequencies

   

   frequencies(...) unbound psi4.CIWavefunction method

       frequencies( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE frequencies(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.frzcpi

   Python Library Documentation: method frzcpi

   

   frzcpi(...) unbound psi4.CIWavefunction method

       frzcpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzcpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.frzvpi

   Python Library Documentation: method frzvpi

   

   frzvpi(...) unbound psi4.CIWavefunction method

       frzvpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzvpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.get_dimension

   Python Library Documentation: method get_dimension

   

   get_dimension(...) unbound psi4.CIWavefunction method

       get_dimension( (CIWavefunction)arg1, (str)arg2) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE get_dimension(N3psi5detci14CIWavefunctionE {lvalue},Ss)



.. function:: psi4.CIWavefunction.get_opdm

   Python Library Documentation: method get_opdm

   

   get_opdm(...) unbound psi4.CIWavefunction method

       get_opdm( (CIWavefunction)arg1, (int)arg2, (int)arg3, (str)arg4, (bool)arg5) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_opdm(N3psi5detci14CIWavefunctionE {lvalue},i,i,Ss,b)



.. function:: psi4.CIWavefunction.get_orbitals

   Python Library Documentation: method get_orbitals

   

   get_orbitals(...) unbound psi4.CIWavefunction method

       get_orbitals( (CIWavefunction)arg1, (str)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_orbitals(N3psi5detci14CIWavefunctionE {lvalue},Ss)



.. function:: psi4.CIWavefunction.get_tpdm

   Python Library Documentation: method get_tpdm

   

   get_tpdm(...) unbound psi4.CIWavefunction method

       get_tpdm( (CIWavefunction)arg1, (str)arg2, (bool)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_tpdm(N3psi5detci14CIWavefunctionE {lvalue},Ss,b)



.. function:: psi4.CIWavefunction.gradient

   Python Library Documentation: method gradient

   

   gradient(...) unbound psi4.CIWavefunction method

       gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.hamiltonian

   Python Library Documentation: method hamiltonian

   

   hamiltonian(...) unbound psi4.CIWavefunction method

       hamiltonian( (CIWavefunction)arg1, (int)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hamiltonian(N3psi5detci14CIWavefunctionE {lvalue},m)



.. function:: psi4.CIWavefunction.hessian

   Python Library Documentation: method hessian

   

   hessian(...) unbound psi4.CIWavefunction method

       hessian( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hessian(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.molecule

   Python Library Documentation: method molecule

   

   molecule(...) unbound psi4.CIWavefunction method

       molecule( (Wavefunction)arg1) -> Molecule :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE molecule(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nalpha

   Python Library Documentation: method nalpha

   

   nalpha(...) unbound psi4.CIWavefunction method

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})

       

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nalphapi

   Python Library Documentation: method nalphapi

   

   nalphapi(...) unbound psi4.CIWavefunction method

       nalphapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nalphapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.CIWavefunction method

       name( (Wavefunction)arg1) -> str :

           The level of theory this wavefunction corresponds to.

       

           C++ signature :

               Ss name(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nbeta

   Python Library Documentation: method nbeta

   

   nbeta(...) unbound psi4.CIWavefunction method

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})

       

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nbetapi

   Python Library Documentation: method nbetapi

   

   nbetapi(...) unbound psi4.CIWavefunction method

       nbetapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nbetapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.ndet

   Python Library Documentation: method ndet

   

   ndet(...) unbound psi4.CIWavefunction method

       ndet( (CIWavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               m ndet(N3psi5detci14CIWavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.new_civector

   Python Library Documentation: method new_civector

   

   new_civector(...) unbound psi4.CIWavefunction method

       new_civector( (CIWavefunction)arg1, (int)arg2, (int)arg3, (bool)arg4, (bool)arg5) -> CIVector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi5detci6CIvectEEE new_civector(N3psi5detci14CIWavefunctionE {lvalue},i,i,b,b)



.. function:: psi4.CIWavefunction.nfrzc

   Python Library Documentation: method nfrzc

   

   nfrzc(...) unbound psi4.CIWavefunction method

       nfrzc( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nfrzc(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.CIWavefunction method

       nirrep( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nmo

   Python Library Documentation: method nmo

   

   nmo(...) unbound psi4.CIWavefunction method

       nmo( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nmo(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nmopi

   Python Library Documentation: method nmopi

   

   nmopi(...) unbound psi4.CIWavefunction method

       nmopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nmopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.normalmodes

   Python Library Documentation: method normalmodes

   

   normalmodes(...) unbound psi4.CIWavefunction method

       normalmodes( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE normalmodes(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nso

   Python Library Documentation: method nso

   

   nso(...) unbound psi4.CIWavefunction method

       nso( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.nsopi

   Python Library Documentation: method nsopi

   

   nsopi(...) unbound psi4.CIWavefunction method

       nsopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nsopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.opdm

   Python Library Documentation: method opdm

   

   opdm(...) unbound psi4.CIWavefunction method

       opdm( (CIWavefunction)arg1, (CIVector)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE opdm(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i)



.. function:: psi4.CIWavefunction.pitzer_to_ci_order_onel

   Python Library Documentation: method pitzer_to_ci_order_onel

   

   pitzer_to_ci_order_onel(...) unbound psi4.CIWavefunction method

       pitzer_to_ci_order_onel( (CIWavefunction)arg1, (Matrix)arg2, (Vector)arg3) -> None :

           docstring

       

           C++ signature :

               void pitzer_to_ci_order_onel(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.CIWavefunction.pitzer_to_ci_order_twoel

   Python Library Documentation: method pitzer_to_ci_order_twoel

   

   pitzer_to_ci_order_twoel(...) unbound psi4.CIWavefunction method

       pitzer_to_ci_order_twoel( (CIWavefunction)arg1, (Matrix)arg2, (Vector)arg3) -> None :

           docstring

       

           C++ signature :

               void pitzer_to_ci_order_twoel(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.CIWavefunction.reference_wavefunction

   Python Library Documentation: method reference_wavefunction

   

   reference_wavefunction(...) unbound psi4.CIWavefunction method

       reference_wavefunction( (Wavefunction)arg1) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE reference_wavefunction(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.rotate_mcscf_integrals

   Python Library Documentation: method rotate_mcscf_integrals

   

   rotate_mcscf_integrals(...) unbound psi4.CIWavefunction method

       rotate_mcscf_integrals( (CIWavefunction)arg1, (Matrix)arg2, (Vector)arg3, (Vector)arg4) -> None :

           docstring

       

           C++ signature :

               void rotate_mcscf_integrals(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.CIWavefunction.same_a_b_dens

   Python Library Documentation: method same_a_b_dens

   

   same_a_b_dens(...) unbound psi4.CIWavefunction method

       same_a_b_dens( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_dens(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.same_a_b_orbs

   Python Library Documentation: method same_a_b_orbs

   

   same_a_b_orbs(...) unbound psi4.CIWavefunction method

       same_a_b_orbs( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_orbs(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.set_frequencies

   Python Library Documentation: method set_frequencies

   

   set_frequencies(...) unbound psi4.CIWavefunction method

       set_frequencies( (Wavefunction)arg1, (Vector)arg2) -> None :

           docstring

       

           C++ signature :

               void set_frequencies(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue})



.. function:: psi4.CIWavefunction.set_gradient

   Python Library Documentation: method set_gradient

   

   set_gradient(...) unbound psi4.CIWavefunction method

       set_gradient( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gradient(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.CIWavefunction.set_hessian

   Python Library Documentation: method set_hessian

   

   set_hessian(...) unbound psi4.CIWavefunction method

       set_hessian( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.CIWavefunction.set_orbitals

   Python Library Documentation: method set_orbitals

   

   set_orbitals(...) unbound psi4.CIWavefunction method

       set_orbitals( (CIWavefunction)arg1, (str)arg2, (Matrix)arg3) -> None :

           docstring

       

           C++ signature :

               void set_orbitals(N3psi5detci14CIWavefunctionE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.CIWavefunction.set_reference_wavefunction

   Python Library Documentation: method set_reference_wavefunction

   

   set_reference_wavefunction(...) unbound psi4.CIWavefunction method

       set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.CIWavefunction.shallow_copy

   Python Library Documentation: method shallow_copy

   

   shallow_copy(...) unbound psi4.CIWavefunction method

       shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.CIWavefunction.sigma

   Python Library Documentation: method sigma

   

   sigma(...) unbound psi4.CIWavefunction method

       sigma( (CIWavefunction)arg1, (CIVector)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :

           docstring

       

           C++ signature :

               void sigma(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i)

       

       sigma( (CIWavefunction)arg1, (CIVector)arg2, (CIVector)arg3, (int)arg4, (int)arg5, (Vector)arg6, (Vector)arg7) -> None :

           docstring

       

           C++ signature :

               void sigma(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.CIWavefunction.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.CIWavefunction method

       sobasisset( (Wavefunction)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.soccpi

   Python Library Documentation: method soccpi

   

   soccpi(...) unbound psi4.CIWavefunction method

       soccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.tpdm

   Python Library Documentation: method tpdm

   

   tpdm(...) unbound psi4.CIWavefunction method

       tpdm( (CIWavefunction)arg1, (CIVector)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE tpdm(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i)



.. function:: psi4.CIWavefunction.transform_ci_integrals

   Python Library Documentation: method transform_ci_integrals

   

   transform_ci_integrals(...) unbound psi4.CIWavefunction method

       transform_ci_integrals( (CIWavefunction)arg1) -> None :

           docstring

       

           C++ signature :

               void transform_ci_integrals(N3psi5detci14CIWavefunctionE {lvalue})



.. function:: psi4.CIWavefunction.transform_mcscf_integrals

   Python Library Documentation: method transform_mcscf_integrals

   

   transform_mcscf_integrals(...) unbound psi4.CIWavefunction method

       transform_mcscf_integrals( (CIWavefunction)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void transform_mcscf_integrals(N3psi5detci14CIWavefunctionE {lvalue},b)



.. _`sec:psimod_CUHF`:



CUHF
====



.. function:: psi4.CUHF.Ca

   Python Library Documentation: method Ca

   

   Ca(...) unbound psi4.CUHF method

       Ca( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.Ca_subset

   Python Library Documentation: method Ca_subset

   

   Ca_subset(...) unbound psi4.CUHF method

       Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CUHF.Cb

   Python Library Documentation: method Cb

   

   Cb(...) unbound psi4.CUHF method

       Cb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.Cb_subset

   Python Library Documentation: method Cb_subset

   

   Cb_subset(...) unbound psi4.CUHF method

       Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CUHF.Da

   Python Library Documentation: method Da

   

   Da(...) unbound psi4.CUHF method

       Da( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Da(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.Db

   Python Library Documentation: method Db

   

   Db(...) unbound psi4.CUHF method

       Db( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Db(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.Fa

   Python Library Documentation: method Fa

   

   Fa(...) unbound psi4.CUHF method

       Fa( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fa(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.Fb

   Python Library Documentation: method Fb

   

   Fb(...) unbound psi4.CUHF method

       Fb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.X

   Python Library Documentation: method X

   

   X(...) unbound psi4.CUHF method

       X( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE X(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.add_postiteration_callback

   Python Library Documentation: method add_postiteration_callback

   

   add_postiteration_callback(...) unbound psi4.CUHF method

       add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_postiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.CUHF.add_preiteration_callback

   Python Library Documentation: method add_preiteration_callback

   

   add_preiteration_callback(...) unbound psi4.CUHF method

       add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_preiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.CUHF.alpha_orbital_space

   Python Library Documentation: method alpha_orbital_space

   

   alpha_orbital_space(...) unbound psi4.CUHF method

       alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE alpha_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.CUHF.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.CUHF method

       aotoso( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.atomic_point_charges

   Python Library Documentation: method atomic_point_charges

   

   atomic_point_charges(...) unbound psi4.CUHF method

       atomic_point_charges( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE atomic_point_charges(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.CUHF method

       basisset( (Wavefunction)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.beta_orbital_space

   Python Library Documentation: method beta_orbital_space

   

   beta_orbital_space(...) unbound psi4.CUHF method

       beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.CUHF.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.CUHF method

       compute_energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.CUHF method

       compute_gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.deep_copy

   Python Library Documentation: method deep_copy

   

   deep_copy(...) unbound psi4.CUHF method

       deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.CUHF.doccpi

   Python Library Documentation: method doccpi

   

   doccpi(...) unbound psi4.CUHF method

       doccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.energy

   Python Library Documentation: method energy

   

   energy(...) unbound psi4.CUHF method

       energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.epsilon_a

   Python Library Documentation: method epsilon_a

   

   epsilon_a(...) unbound psi4.CUHF method

       epsilon_a( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.epsilon_a_subset

   Python Library Documentation: method epsilon_a_subset

   

   epsilon_a_subset(...) unbound psi4.CUHF method

       epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CUHF.epsilon_b

   Python Library Documentation: method epsilon_b

   

   epsilon_b(...) unbound psi4.CUHF method

       epsilon_b( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.epsilon_b_subset

   Python Library Documentation: method epsilon_b_subset

   

   epsilon_b_subset(...) unbound psi4.CUHF method

       epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.CUHF.frequencies

   Python Library Documentation: method frequencies

   

   frequencies(...) unbound psi4.CUHF method

       frequencies( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE frequencies(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.frzcpi

   Python Library Documentation: method frzcpi

   

   frzcpi(...) unbound psi4.CUHF method

       frzcpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzcpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.frzvpi

   Python Library Documentation: method frzvpi

   

   frzvpi(...) unbound psi4.CUHF method

       frzvpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzvpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.gradient

   Python Library Documentation: method gradient

   

   gradient(...) unbound psi4.CUHF method

       gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.hessian

   Python Library Documentation: method hessian

   

   hessian(...) unbound psi4.CUHF method

       hessian( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hessian(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.molecule

   Python Library Documentation: method molecule

   

   molecule(...) unbound psi4.CUHF method

       molecule( (Wavefunction)arg1) -> Molecule :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE molecule(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nalpha

   Python Library Documentation: method nalpha

   

   nalpha(...) unbound psi4.CUHF method

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})

       

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nalphapi

   Python Library Documentation: method nalphapi

   

   nalphapi(...) unbound psi4.CUHF method

       nalphapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nalphapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.CUHF method

       name( (Wavefunction)arg1) -> str :

           The level of theory this wavefunction corresponds to.

       

           C++ signature :

               Ss name(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nbeta

   Python Library Documentation: method nbeta

   

   nbeta(...) unbound psi4.CUHF method

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})

       

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nbetapi

   Python Library Documentation: method nbetapi

   

   nbetapi(...) unbound psi4.CUHF method

       nbetapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nbetapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nfrzc

   Python Library Documentation: method nfrzc

   

   nfrzc(...) unbound psi4.CUHF method

       nfrzc( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nfrzc(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.CUHF method

       nirrep( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nmo

   Python Library Documentation: method nmo

   

   nmo(...) unbound psi4.CUHF method

       nmo( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nmo(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nmopi

   Python Library Documentation: method nmopi

   

   nmopi(...) unbound psi4.CUHF method

       nmopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nmopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.normalmodes

   Python Library Documentation: method normalmodes

   

   normalmodes(...) unbound psi4.CUHF method

       normalmodes( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE normalmodes(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nso

   Python Library Documentation: method nso

   

   nso(...) unbound psi4.CUHF method

       nso( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.nsopi

   Python Library Documentation: method nsopi

   

   nsopi(...) unbound psi4.CUHF method

       nsopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nsopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.occupation_a

   Python Library Documentation: method occupation_a

   

   occupation_a(...) unbound psi4.CUHF method

       occupation_a( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue})



.. function:: psi4.CUHF.occupation_b

   Python Library Documentation: method occupation_b

   

   occupation_b(...) unbound psi4.CUHF method

       occupation_b( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue})



.. function:: psi4.CUHF.reference_wavefunction

   Python Library Documentation: method reference_wavefunction

   

   reference_wavefunction(...) unbound psi4.CUHF method

       reference_wavefunction( (Wavefunction)arg1) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE reference_wavefunction(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.same_a_b_dens

   Python Library Documentation: method same_a_b_dens

   

   same_a_b_dens(...) unbound psi4.CUHF method

       same_a_b_dens( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_dens(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.same_a_b_orbs

   Python Library Documentation: method same_a_b_orbs

   

   same_a_b_orbs(...) unbound psi4.CUHF method

       same_a_b_orbs( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_orbs(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.semicanonicalize

   Python Library Documentation: method semicanonicalize

   

   semicanonicalize(...) unbound psi4.CUHF method

       semicanonicalize( (HF)arg1) -> None :

           docstring

       

           C++ signature :

               void semicanonicalize(N3psi3scf2HFE {lvalue})



.. function:: psi4.CUHF.set_frequencies

   Python Library Documentation: method set_frequencies

   

   set_frequencies(...) unbound psi4.CUHF method

       set_frequencies( (Wavefunction)arg1, (Vector)arg2) -> None :

           docstring

       

           C++ signature :

               void set_frequencies(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue})



.. function:: psi4.CUHF.set_gradient

   Python Library Documentation: method set_gradient

   

   set_gradient(...) unbound psi4.CUHF method

       set_gradient( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gradient(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.CUHF.set_hessian

   Python Library Documentation: method set_hessian

   

   set_hessian(...) unbound psi4.CUHF method

       set_hessian( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.CUHF.set_reference_wavefunction

   Python Library Documentation: method set_reference_wavefunction

   

   set_reference_wavefunction(...) unbound psi4.CUHF method

       set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.CUHF.shallow_copy

   Python Library Documentation: method shallow_copy

   

   shallow_copy(...) unbound psi4.CUHF method

       shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.CUHF.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.CUHF method

       sobasisset( (Wavefunction)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.CUHF.soccpi

   Python Library Documentation: method soccpi

   

   soccpi(...) unbound psi4.CUHF method

       soccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue})



.. _`sec:psimod_CdSalcList`:



CdSalcList
==========



.. function:: psi4.CdSalcList.matrix

   Python Library Documentation: method matrix

   

   matrix(...) unbound psi4.CdSalcList method

       matrix( (CdSalcList)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue})



.. function:: psi4.CdSalcList.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.CdSalcList method

       print_out( (CdSalcList)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi10CdSalcListE {lvalue})



.. _`sec:psimod_CorrelationFactor`:



CorrelationFactor
=================



.. function:: psi4.CorrelationFactor.set_params

   Python Library Documentation: method set_params

   

   set_params(...) unbound psi4.CorrelationFactor method

       set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :

           docstring

       

           C++ signature :

               void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. _`sec:psimod_CubeProperties`:



CubeProperties
==============



.. function:: psi4.CubeProperties.compute_properties

   Python Library Documentation: method compute_properties

   

   compute_properties(...) unbound psi4.CubeProperties method

       compute_properties( (CubeProperties)arg1) -> None :

           docstring

       

           C++ signature :

               void compute_properties(N3psi14CubePropertiesE {lvalue})



.. _`sec:psimod_DFChargeFitter`:



DFChargeFitter
==============



.. function:: psi4.DFChargeFitter.d

   Python Library Documentation: method d

   

   d(...) unbound psi4.DFChargeFitter method

       d( (DFChargeFitter)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue})



.. function:: psi4.DFChargeFitter.fit

   Python Library Documentation: method fit

   

   fit(...) unbound psi4.DFChargeFitter method

       fit( (DFChargeFitter)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE fit(N3psi14DFChargeFitterE {lvalue})



.. function:: psi4.DFChargeFitter.setAuxiliary

   Python Library Documentation: method setAuxiliary

   

   setAuxiliary(...) unbound psi4.DFChargeFitter method

       setAuxiliary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :

           docstring

       

           C++ signature :

               void setAuxiliary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.DFChargeFitter.setD

   Python Library Documentation: method setD

   

   setD(...) unbound psi4.DFChargeFitter method

       setD( (DFChargeFitter)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void setD(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.DFChargeFitter.setPrimary

   Python Library Documentation: method setPrimary

   

   setPrimary(...) unbound psi4.DFChargeFitter method

       setPrimary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :

           docstring

       

           C++ signature :

               void setPrimary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE)



.. _`sec:psimod_DFTensor`:



DFTensor
========



.. function:: psi4.DFTensor.Idfmo

   Python Library Documentation: method Idfmo

   

   Idfmo(...) unbound psi4.DFTensor method

       Idfmo( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Idfmo(N3psi8DFTensorE {lvalue})



.. function:: psi4.DFTensor.Imo

   Python Library Documentation: method Imo

   

   Imo(...) unbound psi4.DFTensor method

       Imo( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Imo(N3psi8DFTensorE {lvalue})



.. function:: psi4.DFTensor.Qmo

   Python Library Documentation: method Qmo

   

   Qmo(...) unbound psi4.DFTensor method

       Qmo( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Qmo(N3psi8DFTensorE {lvalue})



.. function:: psi4.DFTensor.Qoo

   Python Library Documentation: method Qoo

   

   Qoo(...) unbound psi4.DFTensor method

       Qoo( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Qoo(N3psi8DFTensorE {lvalue})



.. function:: psi4.DFTensor.Qov

   Python Library Documentation: method Qov

   

   Qov(...) unbound psi4.DFTensor method

       Qov( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Qov(N3psi8DFTensorE {lvalue})



.. function:: psi4.DFTensor.Qso

   Python Library Documentation: method Qso

   

   Qso(...) unbound psi4.DFTensor method

       Qso( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Qso(N3psi8DFTensorE {lvalue})



.. function:: psi4.DFTensor.Qvv

   Python Library Documentation: method Qvv

   

   Qvv(...) unbound psi4.DFTensor method

       Qvv( (DFTensor)arg1) -> Matrix :

           doctsring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Qvv(N3psi8DFTensorE {lvalue})



.. _`sec:psimod_Deriv`:



Deriv
=====



.. function:: psi4.Deriv.compute

   Python Library Documentation: method compute

   

   compute(...) unbound psi4.Deriv method

       compute( (Deriv)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue})



.. function:: psi4.Deriv.set_deriv_density_backtransformed

   Python Library Documentation: method set_deriv_density_backtransformed

   

   set_deriv_density_backtransformed(...) unbound psi4.Deriv method

       set_deriv_density_backtransformed( (Deriv)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_deriv_density_backtransformed(N3psi5DerivE {lvalue},b)



.. function:: psi4.Deriv.set_ignore_reference

   Python Library Documentation: method set_ignore_reference

   

   set_ignore_reference(...) unbound psi4.Deriv method

       set_ignore_reference( (Deriv)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_ignore_reference(N3psi5DerivE {lvalue},b)



.. function:: psi4.Deriv.set_tpdm_presorted

   Python Library Documentation: method set_tpdm_presorted

   

   set_tpdm_presorted(...) unbound psi4.Deriv method

       set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_tpdm_presorted(N3psi5DerivE {lvalue},b)



.. _`sec:psimod_DiagonalizeOrder`:



DiagonalizeOrder
================



.. function:: psi4.DiagonalizeOrder.Ascending

   Python Library Documentation: DiagonalizeOrder in module psi4 object

   

   class DiagonalizeOrder(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      DiagonalizeOrder

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Ascending = psi4.DiagonalizeOrder.Ascending

    |  

    |  Descending = psi4.DiagonalizeOrder.Descending

    |  

    |  names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...

    |  

    |  values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.DiagonalizeOrder.Descending

   Python Library Documentation: DiagonalizeOrder in module psi4 object

   

   class DiagonalizeOrder(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      DiagonalizeOrder

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Ascending = psi4.DiagonalizeOrder.Ascending

    |  

    |  Descending = psi4.DiagonalizeOrder.Descending

    |  

    |  names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...

    |  

    |  values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.DiagonalizeOrder.bit_length

   Python Library Documentation: method_descriptor

   

   bit_length(...)

       int.bit_length() -> int

       

       Number of bits necessary to represent self in binary.

       >>> bin(37)

       '0b100101'

       >>> (37).bit_length()

       6



.. function:: psi4.DiagonalizeOrder.conjugate

   Python Library Documentation: method_descriptor

   

   conjugate(...)

       Returns self, the complex conjugate of any int.



.. function:: psi4.DiagonalizeOrder.denominator

   Python Library Documentation: getset descriptor __builtin__.int.denominator

   

   denominator

       the denominator of a rational number in lowest terms



.. function:: psi4.DiagonalizeOrder.imag

   Python Library Documentation: getset descriptor __builtin__.int.imag

   

   imag

       the imaginary part of a complex number



.. function:: psi4.DiagonalizeOrder.name

   Python Library Documentation: member descriptor Boost.Python.enum.name

   

   name



.. function:: psi4.DiagonalizeOrder.names

   Python Library Documentation: dict object

   

   class dict(object)

    |  dict() -> new empty dictionary

    |  dict(mapping) -> new dictionary initialized from a mapping object's

    |      (key, value) pairs

    |  dict(iterable) -> new dictionary initialized as if via:

    |      d = {}

    |      for k, v in iterable:

    |          d[k] = v

    |  dict(**kwargs) -> new dictionary initialized with the name=value pairs

    |      in the keyword argument list.  For example:  dict(one=1, two=2)

    |  

    |  Methods defined here:

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __contains__(...)

    |      D.__contains__(k) -> True if D has a key k, else False

    |  

    |  __delitem__(...)

    |      x.__delitem__(y) <==> del x[y]

    |  

    |  __eq__(...)

    |      x.__eq__(y) <==> x==y

    |  

    |  __ge__(...)

    |      x.__ge__(y) <==> x>=y

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getitem__(...)

    |      x.__getitem__(y) <==> x[y]

    |  

    |  __gt__(...)

    |      x.__gt__(y) <==> x>y

    |  

    |  __init__(...)

    |      x.__init__(...) initializes x; see help(type(x)) for signature

    |  

    |  __iter__(...)

    |      x.__iter__() <==> iter(x)

    |  

    |  __le__(...)

    |      x.__le__(y) <==> x<=y

    |  

    |  __len__(...)

    |      x.__len__() <==> len(x)

    |  

    |  __lt__(...)

    |      x.__lt__(y) <==> x<y

    |  

    |  __ne__(...)

    |      x.__ne__(y) <==> x!=y

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __setitem__(...)

    |      x.__setitem__(i, y) <==> x[i]=y

    |  

    |  __sizeof__(...)

    |      D.__sizeof__() -> size of D in memory, in bytes

    |  

    |  clear(...)

    |      D.clear() -> None.  Remove all items from D.

    |  

    |  copy(...)

    |      D.copy() -> a shallow copy of D

    |  

    |  fromkeys(...)

    |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.

    |      v defaults to None.

    |  

    |  get(...)

    |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.

    |  

    |  has_key(...)

    |      D.has_key(k) -> True if D has a key k, else False

    |  

    |  items(...)

    |      D.items() -> list of D's (key, value) pairs, as 2-tuples

    |  

    |  iteritems(...)

    |      D.iteritems() -> an iterator over the (key, value) items of D

    |  

    |  iterkeys(...)

    |      D.iterkeys() -> an iterator over the keys of D

    |  

    |  itervalues(...)

    |      D.itervalues() -> an iterator over the values of D

    |  

    |  keys(...)

    |      D.keys() -> list of D's keys

    |  

    |  pop(...)

    |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    |      If key is not found, d is returned if given, otherwise KeyError is raised

    |  

    |  popitem(...)

    |      D.popitem() -> (k, v), remove and return some (key, value) pair as a

    |      2-tuple; but raise KeyError if D is empty.

    |  

    |  setdefault(...)

    |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D

    |  

    |  update(...)

    |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.

    |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    |      In either case, this is followed by: for k in F: D[k] = F[k]

    |  

    |  values(...)

    |      D.values() -> list of D's values

    |  

    |  viewitems(...)

    |      D.viewitems() -> a set-like object providing a view on D's items

    |  

    |  viewkeys(...)

    |      D.viewkeys() -> a set-like object providing a view on D's keys

    |  

    |  viewvalues(...)

    |      D.viewvalues() -> an object providing a view on D's values

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __hash__ = None

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.DiagonalizeOrder.numerator

   Python Library Documentation: getset descriptor __builtin__.int.numerator

   

   numerator

       the numerator of a rational number in lowest terms



.. function:: psi4.DiagonalizeOrder.real

   Python Library Documentation: getset descriptor __builtin__.int.real

   

   real

       the real part of a complex number



.. function:: psi4.DiagonalizeOrder.values

   Python Library Documentation: dict object

   

   class dict(object)

    |  dict() -> new empty dictionary

    |  dict(mapping) -> new dictionary initialized from a mapping object's

    |      (key, value) pairs

    |  dict(iterable) -> new dictionary initialized as if via:

    |      d = {}

    |      for k, v in iterable:

    |          d[k] = v

    |  dict(**kwargs) -> new dictionary initialized with the name=value pairs

    |      in the keyword argument list.  For example:  dict(one=1, two=2)

    |  

    |  Methods defined here:

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __contains__(...)

    |      D.__contains__(k) -> True if D has a key k, else False

    |  

    |  __delitem__(...)

    |      x.__delitem__(y) <==> del x[y]

    |  

    |  __eq__(...)

    |      x.__eq__(y) <==> x==y

    |  

    |  __ge__(...)

    |      x.__ge__(y) <==> x>=y

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getitem__(...)

    |      x.__getitem__(y) <==> x[y]

    |  

    |  __gt__(...)

    |      x.__gt__(y) <==> x>y

    |  

    |  __init__(...)

    |      x.__init__(...) initializes x; see help(type(x)) for signature

    |  

    |  __iter__(...)

    |      x.__iter__() <==> iter(x)

    |  

    |  __le__(...)

    |      x.__le__(y) <==> x<=y

    |  

    |  __len__(...)

    |      x.__len__() <==> len(x)

    |  

    |  __lt__(...)

    |      x.__lt__(y) <==> x<y

    |  

    |  __ne__(...)

    |      x.__ne__(y) <==> x!=y

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __setitem__(...)

    |      x.__setitem__(i, y) <==> x[i]=y

    |  

    |  __sizeof__(...)

    |      D.__sizeof__() -> size of D in memory, in bytes

    |  

    |  clear(...)

    |      D.clear() -> None.  Remove all items from D.

    |  

    |  copy(...)

    |      D.copy() -> a shallow copy of D

    |  

    |  fromkeys(...)

    |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.

    |      v defaults to None.

    |  

    |  get(...)

    |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.

    |  

    |  has_key(...)

    |      D.has_key(k) -> True if D has a key k, else False

    |  

    |  items(...)

    |      D.items() -> list of D's (key, value) pairs, as 2-tuples

    |  

    |  iteritems(...)

    |      D.iteritems() -> an iterator over the (key, value) items of D

    |  

    |  iterkeys(...)

    |      D.iterkeys() -> an iterator over the keys of D

    |  

    |  itervalues(...)

    |      D.itervalues() -> an iterator over the values of D

    |  

    |  keys(...)

    |      D.keys() -> list of D's keys

    |  

    |  pop(...)

    |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    |      If key is not found, d is returned if given, otherwise KeyError is raised

    |  

    |  popitem(...)

    |      D.popitem() -> (k, v), remove and return some (key, value) pair as a

    |      2-tuple; but raise KeyError if D is empty.

    |  

    |  setdefault(...)

    |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D

    |  

    |  update(...)

    |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.

    |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    |      In either case, this is followed by: for k in F: D[k] = F[k]

    |  

    |  values(...)

    |      D.values() -> list of D's values

    |  

    |  viewitems(...)

    |      D.viewitems() -> a set-like object providing a view on D's items

    |  

    |  viewkeys(...)

    |      D.viewkeys() -> a set-like object providing a view on D's keys

    |  

    |  viewvalues(...)

    |      D.viewvalues() -> an object providing a view on D's values

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __hash__ = None

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. _`sec:psimod_Dimension`:



Dimension
=========



.. function:: psi4.Dimension.from_list

   Python Library Documentation: method _dimension_from_list in module p4util.numpy_helper

   

   _dimension_from_list(self, dims, name='New Dimension') method of Boost.Python.class instance

       Builds a psi4.Dimension object from a python list or tuple. If a dimension

       object is passed a copy will be returned.



.. function:: psi4.Dimension.init

   Python Library Documentation: method init

   

   init(...) unbound psi4.Dimension method

       init( (Dimension)arg1, (str)arg2, (int)arg3) -> None :

           Re-initializes the dimension object

       

           C++ signature :

               void init(N3psi9DimensionE {lvalue},Ss,i)



.. function:: psi4.Dimension.n

   Python Library Documentation: method n

   

   n(...) unbound psi4.Dimension method

       n( (Dimension)arg1) -> int :

           The order of the dimension

       

           C++ signature :

               i n(N3psi9DimensionE {lvalue})



.. function:: psi4.Dimension.name

   Python Library Documentation: property

   

       The name of the dimension. Used in printing.



.. function:: psi4.Dimension.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.Dimension method

       print_out( (Dimension)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi9DimensionE {lvalue})



.. function:: psi4.Dimension.to_tuple

   Python Library Documentation: method _dimension_to_tuple in module p4util.numpy_helper

   

   _dimension_to_tuple(dim) unbound psi4.Dimension method

       Converts a psi4.Dimension object to a tuple.



.. _`sec:psimod_DipoleInt`:



DipoleInt
=========



.. function:: psi4.DipoleInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.DipoleInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.DipoleInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.DipoleInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.DipoleInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.DipoleInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.DipoleInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.DipoleInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.DipoleInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.DipoleInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_Dispersion`:



Dispersion
==========



.. function:: psi4.Dispersion.a1

   Python Library Documentation: method a1

   

   a1(...) unbound psi4.Dispersion method

       a1( (Dispersion)arg1) -> float :

           docstring

       

           C++ signature :

               d a1(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.a2

   Python Library Documentation: method a2

   

   a2(...) unbound psi4.Dispersion method

       a2( (Dispersion)arg1) -> float :

           docstring

       

           C++ signature :

               d a2(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.bibtex

   Python Library Documentation: method bibtex

   

   bibtex(...) unbound psi4.Dispersion method

       bibtex( (Dispersion)arg1) -> str :

           Get the BibTeX key for the literature reference.

       

           C++ signature :

               Ss bibtex(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.build

   Python Library Documentation: built-in function build

   

   build(...)

       build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d)



.. function:: psi4.Dispersion.citation

   Python Library Documentation: method citation

   

   citation(...) unbound psi4.Dispersion method

       citation( (Dispersion)arg1) -> str :

           docstring

       

           C++ signature :

               Ss citation(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.Dispersion method

       compute_energy( (Dispersion)arg1, (Molecule)arg2) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi10DispersionE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Dispersion.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.Dispersion method

       compute_gradient( (Dispersion)arg1, (Molecule)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi10DispersionE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Dispersion.compute_hessian

   Python Library Documentation: method compute_hessian

   

   compute_hessian(...) unbound psi4.Dispersion method

       compute_hessian( (Dispersion)arg1, (Molecule)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_hessian(N3psi10DispersionE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Dispersion.d

   Python Library Documentation: method d

   

   d(...) unbound psi4.Dispersion method

       d( (Dispersion)arg1) -> float :

           docstring

       

           C++ signature :

               d d(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.description

   Python Library Documentation: method description

   

   description(...) unbound psi4.Dispersion method

       description( (Dispersion)arg1) -> str :

           docstring

       

           C++ signature :

               Ss description(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.Dispersion method

       name( (Dispersion)arg1) -> str :

           docstring

       

           C++ signature :

               Ss name(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.print_energy

   Python Library Documentation: method print_energy

   

   print_energy(...) unbound psi4.Dispersion method

       print_energy( (Dispersion)arg1, (Molecule)arg2) -> str :

           docstring

       

           C++ signature :

               Ss print_energy(N3psi10DispersionE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Dispersion.print_gradient

   Python Library Documentation: method print_gradient

   

   print_gradient(...) unbound psi4.Dispersion method

       print_gradient( (Dispersion)arg1, (Molecule)arg2) -> str :

           docstring

       

           C++ signature :

               Ss print_gradient(N3psi10DispersionE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Dispersion.print_hessian

   Python Library Documentation: method print_hessian

   

   print_hessian(...) unbound psi4.Dispersion method

       print_hessian( (Dispersion)arg1, (Molecule)arg2) -> str :

           docstring

       

           C++ signature :

               Ss print_hessian(N3psi10DispersionE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Dispersion.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.Dispersion method

       print_out( (Dispersion)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.s6

   Python Library Documentation: method s6

   

   s6(...) unbound psi4.Dispersion method

       s6( (Dispersion)arg1) -> float :

           docstring

       

           C++ signature :

               d s6(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.s8

   Python Library Documentation: method s8

   

   s8(...) unbound psi4.Dispersion method

       s8( (Dispersion)arg1) -> float :

           docstring

       

           C++ signature :

               d s8(N3psi10DispersionE {lvalue})



.. function:: psi4.Dispersion.set_bibtex

   Python Library Documentation: method set_bibtex

   

   set_bibtex(...) unbound psi4.Dispersion method

       set_bibtex( (Dispersion)arg1, (str)arg2) -> None :

           Set the BibTeX key for the literature reference.

       

           C++ signature :

               void set_bibtex(N3psi10DispersionE {lvalue},Ss)



.. function:: psi4.Dispersion.set_citation

   Python Library Documentation: method set_citation

   

   set_citation(...) unbound psi4.Dispersion method

       set_citation( (Dispersion)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_citation(N3psi10DispersionE {lvalue},Ss)



.. function:: psi4.Dispersion.set_description

   Python Library Documentation: method set_description

   

   set_description(...) unbound psi4.Dispersion method

       set_description( (Dispersion)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_description(N3psi10DispersionE {lvalue},Ss)



.. function:: psi4.Dispersion.set_name

   Python Library Documentation: method set_name

   

   set_name(...) unbound psi4.Dispersion method

       set_name( (Dispersion)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_name(N3psi10DispersionE {lvalue},Ss)



.. function:: psi4.Dispersion.sr6

   Python Library Documentation: method sr6

   

   sr6(...) unbound psi4.Dispersion method

       sr6( (Dispersion)arg1) -> float :

           docstring

       

           C++ signature :

               d sr6(N3psi10DispersionE {lvalue})



.. _`sec:psimod_DoublePyBuffer`:



DoublePyBuffer
==============



.. _`sec:psimod_EFP`:



EFP
===



.. function:: psi4.EFP.compute

   Python Library Documentation: method compute

   

   compute(...) unbound psi4.EFP method

       compute( (EFP)arg1) -> None :

           Computes libefp energies and, if active, torque

       

           C++ signature :

               void compute(N3psi3efp3EFPE {lvalue})



.. function:: psi4.EFP.nfragments

   Python Library Documentation: method nfragments

   

   nfragments(...) unbound psi4.EFP method

       nfragments( (EFP)arg1) -> int :

           Returns the number of EFP fragments in the molecule

       

           C++ signature :

               i nfragments(N3psi3efp3EFPE {lvalue})



.. function:: psi4.EFP.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.EFP method

       print_out( (EFP)arg1) -> None :

           Prints options settings and EFP and QM geometries

       

           C++ signature :

               void print_out(N3psi3efp3EFPE {lvalue})



.. function:: psi4.EFP.set_qm_atoms

   Python Library Documentation: method set_qm_atoms

   

   set_qm_atoms(...) unbound psi4.EFP method

       set_qm_atoms( (EFP)arg1) -> None :

           Provides libefp with QM fragment information

       

           C++ signature :

               void set_qm_atoms(N3psi3efp3EFPE {lvalue})



.. _`sec:psimod_ERI`:



ERI
===



.. function:: psi4.ERI.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.ERI method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.ERI.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ERI.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ERI.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.ERI method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_ElectricFieldInt`:



ElectricFieldInt
================



.. function:: psi4.ElectricFieldInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.ElectricFieldInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.ElectricFieldInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.ElectricFieldInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.ElectricFieldInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.ElectricFieldInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.ElectricFieldInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ElectricFieldInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ElectricFieldInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.ElectricFieldInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_ElectrostaticInt`:



ElectrostaticInt
================



.. function:: psi4.ElectrostaticInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.ElectrostaticInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.ElectrostaticInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.ElectrostaticInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.ElectrostaticInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.ElectrostaticInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.ElectrostaticInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ElectrostaticInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ElectrostaticInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.ElectrostaticInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_Environment`:



Environment
===========



.. _`sec:psimod_ErfComplementERI`:



ErfComplementERI
================



.. function:: psi4.ErfComplementERI.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.ErfComplementERI method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.ErfComplementERI.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ErfComplementERI.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ErfComplementERI.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.ErfComplementERI method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_ErfERI`:



ErfERI
======



.. function:: psi4.ErfERI.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.ErfERI method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.ErfERI.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ErfERI.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ErfERI.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.ErfERI method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_ExternalPotential`:



ExternalPotential
=================



.. function:: psi4.ExternalPotential.addBasis

   Python Library Documentation: method addBasis

   

   addBasis(...) unbound psi4.ExternalPotential method

       addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :

           docstring

       

           C++ signature :

               void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.ExternalPotential.addCharge

   Python Library Documentation: method addCharge

   

   addCharge(...) unbound psi4.ExternalPotential method

       addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

           docstring

       

           C++ signature :

               void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d)



.. function:: psi4.ExternalPotential.clear

   Python Library Documentation: method clear

   

   clear(...) unbound psi4.ExternalPotential method

       clear( (ExternalPotential)arg1) -> None :

           docstring

       

           C++ signature :

               void clear(N3psi17ExternalPotentialE {lvalue})



.. function:: psi4.ExternalPotential.computePotentialMatrix

   Python Library Documentation: method computePotentialMatrix

   

   computePotentialMatrix(...) unbound psi4.ExternalPotential method

       computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.ExternalPotential.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.ExternalPotential method

       print_out( (ExternalPotential)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi17ExternalPotentialE {lvalue})



.. function:: psi4.ExternalPotential.setName

   Python Library Documentation: method setName

   

   setName(...) unbound psi4.ExternalPotential method

       setName( (ExternalPotential)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void setName(N3psi17ExternalPotentialE {lvalue},Ss)



.. _`sec:psimod_F12`:



F12
===



.. function:: psi4.F12.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.F12 method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.F12.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.F12 method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_F12DoubleCommutator`:



F12DoubleCommutator
===================



.. function:: psi4.F12DoubleCommutator.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.F12DoubleCommutator method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.F12DoubleCommutator.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12DoubleCommutator.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12DoubleCommutator.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.F12DoubleCommutator method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_F12G12`:



F12G12
======



.. function:: psi4.F12G12.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.F12G12 method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.F12G12.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12G12.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12G12.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.F12G12 method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_F12Squared`:



F12Squared
==========



.. function:: psi4.F12Squared.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.F12Squared method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.F12Squared.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12Squared.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.F12Squared.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.F12Squared method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_FCHKWriter`:



FCHKWriter
==========



.. function:: psi4.FCHKWriter.write

   Python Library Documentation: method write

   

   write(...) unbound psi4.FCHKWriter method

       write( (FCHKWriter)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void write(N3psi10FCHKWriterE {lvalue},Ss)



.. _`sec:psimod_FittedSlaterCorrelationFactor`:



FittedSlaterCorrelationFactor
=============================



.. function:: psi4.FittedSlaterCorrelationFactor.exponent

   Python Library Documentation: method exponent

   

   exponent(...) unbound psi4.FittedSlaterCorrelationFactor method

       exponent( (FittedSlaterCorrelationFactor)arg1) -> float :

       

           C++ signature :

               d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue})



.. function:: psi4.FittedSlaterCorrelationFactor.set_params

   Python Library Documentation: method set_params

   

   set_params(...) unbound psi4.FittedSlaterCorrelationFactor method

       set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :

           docstring

       

           C++ signature :

               void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. _`sec:psimod_FittingMetric`:



FittingMetric
=============



.. function:: psi4.FittingMetric.form_QR_inverse

   Python Library Documentation: method form_QR_inverse

   

   form_QR_inverse(...) unbound psi4.FittingMetric method

       form_QR_inverse( (FittingMetric)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void form_QR_inverse(N3psi13FittingMetricE {lvalue},d)



.. function:: psi4.FittingMetric.form_cholesky_inverse

   Python Library Documentation: method form_cholesky_inverse

   

   form_cholesky_inverse(...) unbound psi4.FittingMetric method

       form_cholesky_inverse( (FittingMetric)arg1) -> None :

           docstring

       

           C++ signature :

               void form_cholesky_inverse(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.form_eig_inverse

   Python Library Documentation: method form_eig_inverse

   

   form_eig_inverse(...) unbound psi4.FittingMetric method

       form_eig_inverse( (FittingMetric)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void form_eig_inverse(N3psi13FittingMetricE {lvalue},d)



.. function:: psi4.FittingMetric.form_fitting_metric

   Python Library Documentation: method form_fitting_metric

   

   form_fitting_metric(...) unbound psi4.FittingMetric method

       form_fitting_metric( (FittingMetric)arg1) -> None :

           docstring

       

           C++ signature :

               void form_fitting_metric(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.form_full_inverse

   Python Library Documentation: method form_full_inverse

   

   form_full_inverse(...) unbound psi4.FittingMetric method

       form_full_inverse( (FittingMetric)arg1) -> None :

           docstring

       

           C++ signature :

               void form_full_inverse(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.get_algorithm

   Python Library Documentation: method get_algorithm

   

   get_algorithm(...) unbound psi4.FittingMetric method

       get_algorithm( (FittingMetric)arg1) -> str :

           docstring

       

           C++ signature :

               Ss get_algorithm(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.get_metric

   Python Library Documentation: method get_metric

   

   get_metric(...) unbound psi4.FittingMetric method

       get_metric( (FittingMetric)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE get_metric(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.get_pivots

   Python Library Documentation: method get_pivots

   

   get_pivots(...) unbound psi4.FittingMetric method

       get_pivots( (FittingMetric)arg1) -> IntVector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi9IntVectorEEE get_pivots(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.get_reverse_pivots

   Python Library Documentation: method get_reverse_pivots

   

   get_reverse_pivots(...) unbound psi4.FittingMetric method

       get_reverse_pivots( (FittingMetric)arg1) -> IntVector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi9IntVectorEEE get_reverse_pivots(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.is_inverted

   Python Library Documentation: method is_inverted

   

   is_inverted(...) unbound psi4.FittingMetric method

       is_inverted( (FittingMetric)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_inverted(N3psi13FittingMetricE {lvalue})



.. function:: psi4.FittingMetric.is_poisson

   Python Library Documentation: method is_poisson

   

   is_poisson(...) unbound psi4.FittingMetric method

       is_poisson( (FittingMetric)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_poisson(N3psi13FittingMetricE {lvalue})



.. _`sec:psimod_Functional`:



Functional
==========



.. function:: psi4.Functional.alpha

   Python Library Documentation: method alpha

   

   alpha(...) unbound psi4.Functional method

       alpha( (Functional)arg1) -> float :

           docstring

       

           C++ signature :

               d alpha(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.build_base

   Python Library Documentation: built-in function build_base

   

   build_base(...)

       build_base( (str)arg1) -> Functional :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10FunctionalEEE build_base(Ss)



.. function:: psi4.Functional.citation

   Python Library Documentation: method citation

   

   citation(...) unbound psi4.Functional method

       citation( (Functional)arg1) -> str :

           docstring

       

           C++ signature :

               Ss citation(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.description

   Python Library Documentation: method description

   

   description(...) unbound psi4.Functional method

       description( (Functional)arg1) -> str :

           docstring

       

           C++ signature :

               Ss description(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.is_gga

   Python Library Documentation: method is_gga

   

   is_gga(...) unbound psi4.Functional method

       is_gga( (Functional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_gga(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.is_lrc

   Python Library Documentation: method is_lrc

   

   is_lrc(...) unbound psi4.Functional method

       is_lrc( (Functional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_lrc(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.is_meta

   Python Library Documentation: method is_meta

   

   is_meta(...) unbound psi4.Functional method

       is_meta( (Functional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_meta(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.lsda_cutoff

   Python Library Documentation: method lsda_cutoff

   

   lsda_cutoff(...) unbound psi4.Functional method

       lsda_cutoff( (Functional)arg1) -> float :

           docstring

       

           C++ signature :

               d lsda_cutoff(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.meta_cutoff

   Python Library Documentation: method meta_cutoff

   

   meta_cutoff(...) unbound psi4.Functional method

       meta_cutoff( (Functional)arg1) -> float :

           docstring

       

           C++ signature :

               d meta_cutoff(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.Functional method

       name( (Functional)arg1) -> str :

           docstring

       

           C++ signature :

               Ss name(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.omega

   Python Library Documentation: method omega

   

   omega(...) unbound psi4.Functional method

       omega( (Functional)arg1) -> float :

           docstring

       

           C++ signature :

               d omega(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.print_detail

   Python Library Documentation: method print_detail

   

   print_detail(...) unbound psi4.Functional method

       print_detail( (SuperFunctional)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void print_detail(N3psi15SuperFunctionalE {lvalue},i)



.. function:: psi4.Functional.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.Functional method

       print_out( (Functional)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi10FunctionalE {lvalue})



.. function:: psi4.Functional.set_alpha

   Python Library Documentation: method set_alpha

   

   set_alpha(...) unbound psi4.Functional method

       set_alpha( (Functional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_alpha(N3psi10FunctionalE {lvalue},d)



.. function:: psi4.Functional.set_citation

   Python Library Documentation: method set_citation

   

   set_citation(...) unbound psi4.Functional method

       set_citation( (Functional)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_citation(N3psi10FunctionalE {lvalue},Ss)



.. function:: psi4.Functional.set_description

   Python Library Documentation: method set_description

   

   set_description(...) unbound psi4.Functional method

       set_description( (Functional)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_description(N3psi10FunctionalE {lvalue},Ss)



.. function:: psi4.Functional.set_gga

   Python Library Documentation: method set_gga

   

   set_gga(...) unbound psi4.Functional method

       set_gga( (Functional)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gga(N3psi10FunctionalE {lvalue},b)



.. function:: psi4.Functional.set_lsda_cutoff

   Python Library Documentation: method set_lsda_cutoff

   

   set_lsda_cutoff(...) unbound psi4.Functional method

       set_lsda_cutoff( (Functional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_lsda_cutoff(N3psi10FunctionalE {lvalue},d)



.. function:: psi4.Functional.set_meta

   Python Library Documentation: method set_meta

   

   set_meta(...) unbound psi4.Functional method

       set_meta( (Functional)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_meta(N3psi10FunctionalE {lvalue},b)



.. function:: psi4.Functional.set_meta_cutoff

   Python Library Documentation: method set_meta_cutoff

   

   set_meta_cutoff(...) unbound psi4.Functional method

       set_meta_cutoff( (Functional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_meta_cutoff(N3psi10FunctionalE {lvalue},d)



.. function:: psi4.Functional.set_name

   Python Library Documentation: method set_name

   

   set_name(...) unbound psi4.Functional method

       set_name( (Functional)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_name(N3psi10FunctionalE {lvalue},Ss)



.. function:: psi4.Functional.set_omega

   Python Library Documentation: method set_omega

   

   set_omega(...) unbound psi4.Functional method

       set_omega( (Functional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_omega(N3psi10FunctionalE {lvalue},d)



.. function:: psi4.Functional.set_parameter

   Python Library Documentation: method set_parameter

   

   set_parameter(...) unbound psi4.Functional method

       set_parameter( (Functional)arg1, (str)arg2, (float)arg3) -> None :

           docstring

       

           C++ signature :

               void set_parameter(N3psi10FunctionalE {lvalue},Ss,d)



.. _`sec:psimod_Gaussian94BasisSetParser`:



Gaussian94BasisSetParser
========================



.. _`sec:psimod_GaussianShell`:



GaussianShell
=============



.. function:: psi4.GaussianShell.AMCHAR

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.am

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.amchar

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.coef

   Python Library Documentation: method coef

   

   coef(...) unbound psi4.GaussianShell method

       coef( (GaussianShell)arg1, (int)arg2) -> float :

           docstring

       

           C++ signature :

               d coef(N3psi13GaussianShellE {lvalue},i)



.. function:: psi4.GaussianShell.erd_coef

   Python Library Documentation: method erd_coef

   

   erd_coef(...) unbound psi4.GaussianShell method

       erd_coef( (GaussianShell)arg1, (int)arg2) -> float :

           docstring

       

           C++ signature :

               d erd_coef(N3psi13GaussianShellE {lvalue},i)



.. function:: psi4.GaussianShell.exp

   Python Library Documentation: method exp

   

   exp(...) unbound psi4.GaussianShell method

       exp( (GaussianShell)arg1, (int)arg2) -> float :

           Returns the exponent of the given primitive

       

           C++ signature :

               d exp(N3psi13GaussianShellE {lvalue},i)



.. function:: psi4.GaussianShell.function_index

   Python Library Documentation: property

   

       Basis function index where this shell starts.



.. function:: psi4.GaussianShell.is_cartesian

   Python Library Documentation: method is_cartesian

   

   is_cartesian(...) unbound psi4.GaussianShell method

       is_cartesian( (GaussianShell)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_cartesian(N3psi13GaussianShellE {lvalue})



.. function:: psi4.GaussianShell.is_pure

   Python Library Documentation: method is_pure

   

   is_pure(...) unbound psi4.GaussianShell method

       is_pure( (GaussianShell)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_pure(N3psi13GaussianShellE {lvalue})



.. function:: psi4.GaussianShell.ncartesian

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.ncenter

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.nfunction

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.nprimitive

   Python Library Documentation: property

   

       docstring



.. function:: psi4.GaussianShell.original_coef

   Python Library Documentation: method original_coef

   

   original_coef(...) unbound psi4.GaussianShell method

       original_coef( (GaussianShell)arg1, (int)arg2) -> float :

           docstring

       

           C++ signature :

               d original_coef(N3psi13GaussianShellE {lvalue},i)



.. _`sec:psimod_GeometryUnits`:



GeometryUnits
=============



.. function:: psi4.GeometryUnits.Angstrom

   Python Library Documentation: GeometryUnits in module psi4 object

   

   class GeometryUnits(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      GeometryUnits

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Angstrom = psi4.GeometryUnits.Angstrom

    |  

    |  Bohr = psi4.GeometryUnits.Bohr

    |  

    |  names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...

    |  

    |  values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.GeometryUnits.Bohr

   Python Library Documentation: GeometryUnits in module psi4 object

   

   class GeometryUnits(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      GeometryUnits

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Angstrom = psi4.GeometryUnits.Angstrom

    |  

    |  Bohr = psi4.GeometryUnits.Bohr

    |  

    |  names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...

    |  

    |  values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.GeometryUnits.bit_length

   Python Library Documentation: method_descriptor

   

   bit_length(...)

       int.bit_length() -> int

       

       Number of bits necessary to represent self in binary.

       >>> bin(37)

       '0b100101'

       >>> (37).bit_length()

       6



.. function:: psi4.GeometryUnits.conjugate

   Python Library Documentation: method_descriptor

   

   conjugate(...)

       Returns self, the complex conjugate of any int.



.. function:: psi4.GeometryUnits.denominator

   Python Library Documentation: getset descriptor __builtin__.int.denominator

   

   denominator

       the denominator of a rational number in lowest terms



.. function:: psi4.GeometryUnits.imag

   Python Library Documentation: getset descriptor __builtin__.int.imag

   

   imag

       the imaginary part of a complex number



.. function:: psi4.GeometryUnits.name

   Python Library Documentation: member descriptor Boost.Python.enum.name

   

   name



.. function:: psi4.GeometryUnits.names

   Python Library Documentation: dict object

   

   class dict(object)

    |  dict() -> new empty dictionary

    |  dict(mapping) -> new dictionary initialized from a mapping object's

    |      (key, value) pairs

    |  dict(iterable) -> new dictionary initialized as if via:

    |      d = {}

    |      for k, v in iterable:

    |          d[k] = v

    |  dict(**kwargs) -> new dictionary initialized with the name=value pairs

    |      in the keyword argument list.  For example:  dict(one=1, two=2)

    |  

    |  Methods defined here:

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __contains__(...)

    |      D.__contains__(k) -> True if D has a key k, else False

    |  

    |  __delitem__(...)

    |      x.__delitem__(y) <==> del x[y]

    |  

    |  __eq__(...)

    |      x.__eq__(y) <==> x==y

    |  

    |  __ge__(...)

    |      x.__ge__(y) <==> x>=y

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getitem__(...)

    |      x.__getitem__(y) <==> x[y]

    |  

    |  __gt__(...)

    |      x.__gt__(y) <==> x>y

    |  

    |  __init__(...)

    |      x.__init__(...) initializes x; see help(type(x)) for signature

    |  

    |  __iter__(...)

    |      x.__iter__() <==> iter(x)

    |  

    |  __le__(...)

    |      x.__le__(y) <==> x<=y

    |  

    |  __len__(...)

    |      x.__len__() <==> len(x)

    |  

    |  __lt__(...)

    |      x.__lt__(y) <==> x<y

    |  

    |  __ne__(...)

    |      x.__ne__(y) <==> x!=y

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __setitem__(...)

    |      x.__setitem__(i, y) <==> x[i]=y

    |  

    |  __sizeof__(...)

    |      D.__sizeof__() -> size of D in memory, in bytes

    |  

    |  clear(...)

    |      D.clear() -> None.  Remove all items from D.

    |  

    |  copy(...)

    |      D.copy() -> a shallow copy of D

    |  

    |  fromkeys(...)

    |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.

    |      v defaults to None.

    |  

    |  get(...)

    |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.

    |  

    |  has_key(...)

    |      D.has_key(k) -> True if D has a key k, else False

    |  

    |  items(...)

    |      D.items() -> list of D's (key, value) pairs, as 2-tuples

    |  

    |  iteritems(...)

    |      D.iteritems() -> an iterator over the (key, value) items of D

    |  

    |  iterkeys(...)

    |      D.iterkeys() -> an iterator over the keys of D

    |  

    |  itervalues(...)

    |      D.itervalues() -> an iterator over the values of D

    |  

    |  keys(...)

    |      D.keys() -> list of D's keys

    |  

    |  pop(...)

    |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    |      If key is not found, d is returned if given, otherwise KeyError is raised

    |  

    |  popitem(...)

    |      D.popitem() -> (k, v), remove and return some (key, value) pair as a

    |      2-tuple; but raise KeyError if D is empty.

    |  

    |  setdefault(...)

    |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D

    |  

    |  update(...)

    |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.

    |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    |      In either case, this is followed by: for k in F: D[k] = F[k]

    |  

    |  values(...)

    |      D.values() -> list of D's values

    |  

    |  viewitems(...)

    |      D.viewitems() -> a set-like object providing a view on D's items

    |  

    |  viewkeys(...)

    |      D.viewkeys() -> a set-like object providing a view on D's keys

    |  

    |  viewvalues(...)

    |      D.viewvalues() -> an object providing a view on D's values

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __hash__ = None

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.GeometryUnits.numerator

   Python Library Documentation: getset descriptor __builtin__.int.numerator

   

   numerator

       the numerator of a rational number in lowest terms



.. function:: psi4.GeometryUnits.real

   Python Library Documentation: getset descriptor __builtin__.int.real

   

   real

       the real part of a complex number



.. function:: psi4.GeometryUnits.values

   Python Library Documentation: dict object

   

   class dict(object)

    |  dict() -> new empty dictionary

    |  dict(mapping) -> new dictionary initialized from a mapping object's

    |      (key, value) pairs

    |  dict(iterable) -> new dictionary initialized as if via:

    |      d = {}

    |      for k, v in iterable:

    |          d[k] = v

    |  dict(**kwargs) -> new dictionary initialized with the name=value pairs

    |      in the keyword argument list.  For example:  dict(one=1, two=2)

    |  

    |  Methods defined here:

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __contains__(...)

    |      D.__contains__(k) -> True if D has a key k, else False

    |  

    |  __delitem__(...)

    |      x.__delitem__(y) <==> del x[y]

    |  

    |  __eq__(...)

    |      x.__eq__(y) <==> x==y

    |  

    |  __ge__(...)

    |      x.__ge__(y) <==> x>=y

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getitem__(...)

    |      x.__getitem__(y) <==> x[y]

    |  

    |  __gt__(...)

    |      x.__gt__(y) <==> x>y

    |  

    |  __init__(...)

    |      x.__init__(...) initializes x; see help(type(x)) for signature

    |  

    |  __iter__(...)

    |      x.__iter__() <==> iter(x)

    |  

    |  __le__(...)

    |      x.__le__(y) <==> x<=y

    |  

    |  __len__(...)

    |      x.__len__() <==> len(x)

    |  

    |  __lt__(...)

    |      x.__lt__(y) <==> x<y

    |  

    |  __ne__(...)

    |      x.__ne__(y) <==> x!=y

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __setitem__(...)

    |      x.__setitem__(i, y) <==> x[i]=y

    |  

    |  __sizeof__(...)

    |      D.__sizeof__() -> size of D in memory, in bytes

    |  

    |  clear(...)

    |      D.clear() -> None.  Remove all items from D.

    |  

    |  copy(...)

    |      D.copy() -> a shallow copy of D

    |  

    |  fromkeys(...)

    |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.

    |      v defaults to None.

    |  

    |  get(...)

    |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.

    |  

    |  has_key(...)

    |      D.has_key(k) -> True if D has a key k, else False

    |  

    |  items(...)

    |      D.items() -> list of D's (key, value) pairs, as 2-tuples

    |  

    |  iteritems(...)

    |      D.iteritems() -> an iterator over the (key, value) items of D

    |  

    |  iterkeys(...)

    |      D.iterkeys() -> an iterator over the keys of D

    |  

    |  itervalues(...)

    |      D.itervalues() -> an iterator over the values of D

    |  

    |  keys(...)

    |      D.keys() -> list of D's keys

    |  

    |  pop(...)

    |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    |      If key is not found, d is returned if given, otherwise KeyError is raised

    |  

    |  popitem(...)

    |      D.popitem() -> (k, v), remove and return some (key, value) pair as a

    |      2-tuple; but raise KeyError if D is empty.

    |  

    |  setdefault(...)

    |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D

    |  

    |  update(...)

    |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.

    |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    |      In either case, this is followed by: for k in F: D[k] = F[k]

    |  

    |  values(...)

    |      D.values() -> list of D's values

    |  

    |  viewitems(...)

    |      D.viewitems() -> a set-like object providing a view on D's items

    |  

    |  viewkeys(...)

    |      D.viewkeys() -> a set-like object providing a view on D's keys

    |  

    |  viewvalues(...)

    |      D.viewvalues() -> an object providing a view on D's values

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __hash__ = None

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. _`sec:psimod_HF`:



HF
==



.. function:: psi4.HF.Ca

   Python Library Documentation: method Ca

   

   Ca(...) unbound psi4.HF method

       Ca( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.Ca_subset

   Python Library Documentation: method Ca_subset

   

   Ca_subset(...) unbound psi4.HF method

       Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.HF.Cb

   Python Library Documentation: method Cb

   

   Cb(...) unbound psi4.HF method

       Cb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.Cb_subset

   Python Library Documentation: method Cb_subset

   

   Cb_subset(...) unbound psi4.HF method

       Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.HF.Da

   Python Library Documentation: method Da

   

   Da(...) unbound psi4.HF method

       Da( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Da(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.Db

   Python Library Documentation: method Db

   

   Db(...) unbound psi4.HF method

       Db( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Db(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.Fa

   Python Library Documentation: method Fa

   

   Fa(...) unbound psi4.HF method

       Fa( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fa(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.Fb

   Python Library Documentation: method Fb

   

   Fb(...) unbound psi4.HF method

       Fb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.X

   Python Library Documentation: method X

   

   X(...) unbound psi4.HF method

       X( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE X(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.add_postiteration_callback

   Python Library Documentation: method add_postiteration_callback

   

   add_postiteration_callback(...) unbound psi4.HF method

       add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_postiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.HF.add_preiteration_callback

   Python Library Documentation: method add_preiteration_callback

   

   add_preiteration_callback(...) unbound psi4.HF method

       add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_preiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.HF.alpha_orbital_space

   Python Library Documentation: method alpha_orbital_space

   

   alpha_orbital_space(...) unbound psi4.HF method

       alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE alpha_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.HF.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.HF method

       aotoso( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.atomic_point_charges

   Python Library Documentation: method atomic_point_charges

   

   atomic_point_charges(...) unbound psi4.HF method

       atomic_point_charges( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE atomic_point_charges(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.HF method

       basisset( (Wavefunction)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.beta_orbital_space

   Python Library Documentation: method beta_orbital_space

   

   beta_orbital_space(...) unbound psi4.HF method

       beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.HF.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.HF method

       compute_energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.HF method

       compute_gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.deep_copy

   Python Library Documentation: method deep_copy

   

   deep_copy(...) unbound psi4.HF method

       deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.HF.doccpi

   Python Library Documentation: method doccpi

   

   doccpi(...) unbound psi4.HF method

       doccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.energy

   Python Library Documentation: method energy

   

   energy(...) unbound psi4.HF method

       energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.epsilon_a

   Python Library Documentation: method epsilon_a

   

   epsilon_a(...) unbound psi4.HF method

       epsilon_a( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.epsilon_a_subset

   Python Library Documentation: method epsilon_a_subset

   

   epsilon_a_subset(...) unbound psi4.HF method

       epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.HF.epsilon_b

   Python Library Documentation: method epsilon_b

   

   epsilon_b(...) unbound psi4.HF method

       epsilon_b( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.epsilon_b_subset

   Python Library Documentation: method epsilon_b_subset

   

   epsilon_b_subset(...) unbound psi4.HF method

       epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.HF.frequencies

   Python Library Documentation: method frequencies

   

   frequencies(...) unbound psi4.HF method

       frequencies( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE frequencies(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.frzcpi

   Python Library Documentation: method frzcpi

   

   frzcpi(...) unbound psi4.HF method

       frzcpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzcpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.frzvpi

   Python Library Documentation: method frzvpi

   

   frzvpi(...) unbound psi4.HF method

       frzvpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzvpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.gradient

   Python Library Documentation: method gradient

   

   gradient(...) unbound psi4.HF method

       gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.hessian

   Python Library Documentation: method hessian

   

   hessian(...) unbound psi4.HF method

       hessian( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hessian(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.molecule

   Python Library Documentation: method molecule

   

   molecule(...) unbound psi4.HF method

       molecule( (Wavefunction)arg1) -> Molecule :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE molecule(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nalpha

   Python Library Documentation: method nalpha

   

   nalpha(...) unbound psi4.HF method

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})

       

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nalphapi

   Python Library Documentation: method nalphapi

   

   nalphapi(...) unbound psi4.HF method

       nalphapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nalphapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.HF method

       name( (Wavefunction)arg1) -> str :

           The level of theory this wavefunction corresponds to.

       

           C++ signature :

               Ss name(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nbeta

   Python Library Documentation: method nbeta

   

   nbeta(...) unbound psi4.HF method

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})

       

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nbetapi

   Python Library Documentation: method nbetapi

   

   nbetapi(...) unbound psi4.HF method

       nbetapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nbetapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nfrzc

   Python Library Documentation: method nfrzc

   

   nfrzc(...) unbound psi4.HF method

       nfrzc( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nfrzc(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.HF method

       nirrep( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nmo

   Python Library Documentation: method nmo

   

   nmo(...) unbound psi4.HF method

       nmo( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nmo(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nmopi

   Python Library Documentation: method nmopi

   

   nmopi(...) unbound psi4.HF method

       nmopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nmopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.normalmodes

   Python Library Documentation: method normalmodes

   

   normalmodes(...) unbound psi4.HF method

       normalmodes( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE normalmodes(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nso

   Python Library Documentation: method nso

   

   nso(...) unbound psi4.HF method

       nso( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.nsopi

   Python Library Documentation: method nsopi

   

   nsopi(...) unbound psi4.HF method

       nsopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nsopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.occupation_a

   Python Library Documentation: method occupation_a

   

   occupation_a(...) unbound psi4.HF method

       occupation_a( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue})



.. function:: psi4.HF.occupation_b

   Python Library Documentation: method occupation_b

   

   occupation_b(...) unbound psi4.HF method

       occupation_b( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue})



.. function:: psi4.HF.reference_wavefunction

   Python Library Documentation: method reference_wavefunction

   

   reference_wavefunction(...) unbound psi4.HF method

       reference_wavefunction( (Wavefunction)arg1) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE reference_wavefunction(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.same_a_b_dens

   Python Library Documentation: method same_a_b_dens

   

   same_a_b_dens(...) unbound psi4.HF method

       same_a_b_dens( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_dens(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.same_a_b_orbs

   Python Library Documentation: method same_a_b_orbs

   

   same_a_b_orbs(...) unbound psi4.HF method

       same_a_b_orbs( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_orbs(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.semicanonicalize

   Python Library Documentation: method semicanonicalize

   

   semicanonicalize(...) unbound psi4.HF method

       semicanonicalize( (HF)arg1) -> None :

           docstring

       

           C++ signature :

               void semicanonicalize(N3psi3scf2HFE {lvalue})



.. function:: psi4.HF.set_frequencies

   Python Library Documentation: method set_frequencies

   

   set_frequencies(...) unbound psi4.HF method

       set_frequencies( (Wavefunction)arg1, (Vector)arg2) -> None :

           docstring

       

           C++ signature :

               void set_frequencies(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue})



.. function:: psi4.HF.set_gradient

   Python Library Documentation: method set_gradient

   

   set_gradient(...) unbound psi4.HF method

       set_gradient( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gradient(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.HF.set_hessian

   Python Library Documentation: method set_hessian

   

   set_hessian(...) unbound psi4.HF method

       set_hessian( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.HF.set_reference_wavefunction

   Python Library Documentation: method set_reference_wavefunction

   

   set_reference_wavefunction(...) unbound psi4.HF method

       set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.HF.shallow_copy

   Python Library Documentation: method shallow_copy

   

   shallow_copy(...) unbound psi4.HF method

       shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.HF.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.HF method

       sobasisset( (Wavefunction)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.HF.soccpi

   Python Library Documentation: method soccpi

   

   soccpi(...) unbound psi4.HF method

       soccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue})



.. _`sec:psimod_IO`:



IO
==



.. function:: psi4.IO.change_file_namespace

   Python Library Documentation: built-in function change_file_namespace

   

   change_file_namespace(...)

       change_file_namespace( (int)arg1, (str)arg2, (str)arg3) -> None :

           docstring

       

           C++ signature :

               void change_file_namespace(j,Ss,Ss)



.. function:: psi4.IO.close

   Python Library Documentation: method close

   

   close(...) unbound psi4.IO method

       close( (IO)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void close(N3psi4PSIOE {lvalue},j,i)



.. function:: psi4.IO.get_default_namespace

   Python Library Documentation: built-in function get_default_namespace

   

   get_default_namespace(...)

       get_default_namespace() -> str :

           docstring

       

           C++ signature :

               Ss get_default_namespace()



.. function:: psi4.IO.open

   Python Library Documentation: method open

   

   open(...) unbound psi4.IO method

       open( (IO)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void open(N3psi4PSIOE {lvalue},j,i)



.. function:: psi4.IO.open_check

   Python Library Documentation: method open_check

   

   open_check(...) unbound psi4.IO method

       open_check( (IO)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i open_check(N3psi4PSIOE {lvalue},j)



.. function:: psi4.IO.rehash

   Python Library Documentation: method rehash

   

   rehash(...) unbound psi4.IO method

       rehash( (IO)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void rehash(N3psi4PSIOE {lvalue},j)



.. function:: psi4.IO.set_default_namespace

   Python Library Documentation: built-in function set_default_namespace

   

   set_default_namespace(...)

       set_default_namespace( (str)arg1) -> None :

           docstring

       

           C++ signature :

               void set_default_namespace(Ss)



.. function:: psi4.IO.set_pid

   Python Library Documentation: method set_pid

   

   set_pid(...) unbound psi4.IO method

       set_pid( (IO)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_pid(N3psi4PSIOE {lvalue},Ss)



.. function:: psi4.IO.shared_object

   Python Library Documentation: built-in function shared_object

   

   shared_object(...)

       shared_object() -> IO :

       

           C++ signature :

               N5boost10shared_ptrIN3psi4PSIOEEE shared_object()



.. function:: psi4.IO.state

   Python Library Documentation: method state

   

   state(...) unbound psi4.IO method

       state( (IO)arg1) -> int :

           docstring

       

           C++ signature :

               i state(N3psi4PSIOE {lvalue})



.. function:: psi4.IO.tocclean

   Python Library Documentation: method tocclean

   

   tocclean(...) unbound psi4.IO method

       tocclean( (IO)arg1, (int)arg2, (str)arg3) -> None :

           docstring

       

           C++ signature :

               void tocclean(N3psi4PSIOE {lvalue},j,PKc)



.. function:: psi4.IO.tocprint

   Python Library Documentation: method tocprint

   

   tocprint(...) unbound psi4.IO method

       tocprint( (IO)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void tocprint(N3psi4PSIOE {lvalue},j)



.. function:: psi4.IO.tocwrite

   Python Library Documentation: method tocwrite

   

   tocwrite(...) unbound psi4.IO method

       tocwrite( (IO)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void tocwrite(N3psi4PSIOE {lvalue},j)



.. _`sec:psimod_IOManager`:



IOManager
=========



.. function:: psi4.IOManager.crashclean

   Python Library Documentation: method crashclean

   

   crashclean(...) unbound psi4.IOManager method

       crashclean( (IOManager)arg1) -> None :

           docstring

       

           C++ signature :

               void crashclean(N3psi11PSIOManagerE {lvalue})



.. function:: psi4.IOManager.get_default_path

   Python Library Documentation: method get_default_path

   

   get_default_path(...) unbound psi4.IOManager method

       get_default_path( (IOManager)arg1) -> str :

           docstring

       

           C++ signature :

               Ss get_default_path(N3psi11PSIOManagerE {lvalue})



.. function:: psi4.IOManager.get_file_path

   Python Library Documentation: method get_file_path

   

   get_file_path(...) unbound psi4.IOManager method

       get_file_path( (IOManager)arg1, (int)arg2) -> str :

           docstring

       

           C++ signature :

               Ss get_file_path(N3psi11PSIOManagerE {lvalue},i)



.. function:: psi4.IOManager.mark_file_for_retention

   Python Library Documentation: method mark_file_for_retention

   

   mark_file_for_retention(...) unbound psi4.IOManager method

       mark_file_for_retention( (IOManager)arg1, (str)arg2, (bool)arg3) -> None :

           docstring

       

           C++ signature :

               void mark_file_for_retention(N3psi11PSIOManagerE {lvalue},Ss,b)



.. function:: psi4.IOManager.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.IOManager method

       print_out( (IOManager)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi11PSIOManagerE {lvalue})



.. function:: psi4.IOManager.psiclean

   Python Library Documentation: method psiclean

   

   psiclean(...) unbound psi4.IOManager method

       psiclean( (IOManager)arg1) -> None :

           docstring

       

           C++ signature :

               void psiclean(N3psi11PSIOManagerE {lvalue})



.. function:: psi4.IOManager.set_default_path

   Python Library Documentation: method set_default_path

   

   set_default_path(...) unbound psi4.IOManager method

       set_default_path( (IOManager)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_default_path(N3psi11PSIOManagerE {lvalue},Ss)



.. function:: psi4.IOManager.set_specific_path

   Python Library Documentation: method set_specific_path

   

   set_specific_path(...) unbound psi4.IOManager method

       set_specific_path( (IOManager)arg1, (int)arg2, (str)arg3) -> None :

           docstring

       

           C++ signature :

               void set_specific_path(N3psi11PSIOManagerE {lvalue},i,Ss)



.. function:: psi4.IOManager.set_specific_retention

   Python Library Documentation: method set_specific_retention

   

   set_specific_retention(...) unbound psi4.IOManager method

       set_specific_retention( (IOManager)arg1, (int)arg2, (bool)arg3) -> None :

           docstring

       

           C++ signature :

               void set_specific_retention(N3psi11PSIOManagerE {lvalue},i,b)



.. function:: psi4.IOManager.shared_object

   Python Library Documentation: built-in function shared_object

   

   shared_object(...)

       shared_object() -> IOManager :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi11PSIOManagerEEE shared_object()



.. function:: psi4.IOManager.write_scratch_file

   Python Library Documentation: method write_scratch_file

   

   write_scratch_file(...) unbound psi4.IOManager method

       write_scratch_file( (IOManager)arg1, (str)arg2, (str)arg3) -> None :

           docstring

       

           C++ signature :

               void write_scratch_file(N3psi11PSIOManagerE {lvalue},Ss,Ss)



.. _`sec:psimod_IntVector`:



IntVector
=========



.. function:: psi4.IntVector.dim

   Python Library Documentation: method dim

   

   dim(...) unbound psi4.IntVector method

       dim( (IntVector)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i dim(N3psi9IntVectorE {lvalue},i)



.. function:: psi4.IntVector.get

   Python Library Documentation: method get

   

   get(...) unbound psi4.IntVector method

       get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :

           docstring

       

           C++ signature :

               i get(N3psi9IntVectorE {lvalue},i,i)



.. function:: psi4.IntVector.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.IntVector method

       nirrep( (IntVector)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi9IntVectorE {lvalue})



.. function:: psi4.IntVector.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.IntVector method

       print_out( (IntVector)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi9IntVectorE {lvalue})



.. function:: psi4.IntVector.set

   Python Library Documentation: method set

   

   set(...) unbound psi4.IntVector method

       set( (IntVector)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

           docstring

       

           C++ signature :

               void set(N3psi9IntVectorE {lvalue},i,i,i)



.. _`sec:psimod_IntegralFactory`:



IntegralFactory
===============



.. function:: psi4.IntegralFactory.ao_angular_momentum

   Python Library Documentation: method ao_angular_momentum

   

   ao_angular_momentum(...) unbound psi4.IntegralFactory method

       ao_angular_momentum( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_angular_momentum(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_dipole

   Python Library Documentation: method ao_dipole

   

   ao_dipole(...) unbound psi4.IntegralFactory method

       ao_dipole( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_dipole(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_kinetic

   Python Library Documentation: method ao_kinetic

   

   ao_kinetic(...) unbound psi4.IntegralFactory method

       ao_kinetic( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_kinetic(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_multipoles

   Python Library Documentation: method ao_multipoles

   

   ao_multipoles(...) unbound psi4.IntegralFactory method

       ao_multipoles( (IntegralFactory)arg1, (int)arg2) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_multipoles(N3psi15IntegralFactoryE {lvalue},i)



.. function:: psi4.IntegralFactory.ao_nabla

   Python Library Documentation: method ao_nabla

   

   ao_nabla(...) unbound psi4.IntegralFactory method

       ao_nabla( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_nabla(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_overlap

   Python Library Documentation: method ao_overlap

   

   ao_overlap(...) unbound psi4.IntegralFactory method

       ao_overlap( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_overlap(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_potential

   Python Library Documentation: method ao_potential

   

   ao_potential(...) unbound psi4.IntegralFactory method

       ao_potential( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_potential(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_pseudospectral

   Python Library Documentation: method ao_pseudospectral

   

   ao_pseudospectral(...) unbound psi4.IntegralFactory method

       ao_pseudospectral( (IntegralFactory)arg1 [, (int)arg2]) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_pseudospectral(N3psi15IntegralFactoryE {lvalue} [,i])



.. function:: psi4.IntegralFactory.ao_quadrupole

   Python Library Documentation: method ao_quadrupole

   

   ao_quadrupole(...) unbound psi4.IntegralFactory method

       ao_quadrupole( (IntegralFactory)arg1) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_quadrupole(N3psi15IntegralFactoryE {lvalue})



.. function:: psi4.IntegralFactory.ao_traceless_quadrupole

   Python Library Documentation: method ao_traceless_quadrupole

   

   ao_traceless_quadrupole(...) unbound psi4.IntegralFactory method

       ao_traceless_quadrupole( (IntegralFactory)arg1) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE ao_traceless_quadrupole(N3psi15IntegralFactoryE {lvalue})



.. function:: psi4.IntegralFactory.electric_field

   Python Library Documentation: method electric_field

   

   electric_field(...) unbound psi4.IntegralFactory method

       electric_field( (IntegralFactory)arg1) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE electric_field(N3psi15IntegralFactoryE {lvalue})



.. function:: psi4.IntegralFactory.electrostatic

   Python Library Documentation: method electrostatic

   

   electrostatic(...) unbound psi4.IntegralFactory method

       electrostatic( (IntegralFactory)arg1) -> OneBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12OneBodyAOIntE electrostatic(N3psi15IntegralFactoryE {lvalue})



.. function:: psi4.IntegralFactory.erf_complement_eri

   Python Library Documentation: method erf_complement_eri

   

   erf_complement_eri(...) unbound psi4.IntegralFactory method

       erf_complement_eri( (IntegralFactory)arg1, (float)arg2 [, (int)arg3 [, (bool)arg4]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE erf_complement_eri(N3psi15IntegralFactoryE {lvalue},d [,i [,b]])



.. function:: psi4.IntegralFactory.erf_eri

   Python Library Documentation: method erf_eri

   

   erf_eri(...) unbound psi4.IntegralFactory method

       erf_eri( (IntegralFactory)arg1, (float)arg2 [, (int)arg3 [, (bool)arg4]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE erf_eri(N3psi15IntegralFactoryE {lvalue},d [,i [,b]])



.. function:: psi4.IntegralFactory.eri

   Python Library Documentation: method eri

   

   eri(...) unbound psi4.IntegralFactory method

       eri( (IntegralFactory)arg1 [, (int)arg2 [, (bool)arg3]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE eri(N3psi15IntegralFactoryE {lvalue} [,i [,b]])



.. function:: psi4.IntegralFactory.f12

   Python Library Documentation: method f12

   

   f12(...) unbound psi4.IntegralFactory method

       f12( (IntegralFactory)arg1, (CorrelationFactor)arg2 [, (int)arg3 [, (bool)arg4]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE f12(N3psi15IntegralFactoryE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE [,i [,b]])



.. function:: psi4.IntegralFactory.f12_double_commutator

   Python Library Documentation: method f12_double_commutator

   

   f12_double_commutator(...) unbound psi4.IntegralFactory method

       f12_double_commutator( (IntegralFactory)arg1, (CorrelationFactor)arg2 [, (int)arg3 [, (bool)arg4]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE f12_double_commutator(N3psi15IntegralFactoryE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE [,i [,b]])



.. function:: psi4.IntegralFactory.f12_squared

   Python Library Documentation: method f12_squared

   

   f12_squared(...) unbound psi4.IntegralFactory method

       f12_squared( (IntegralFactory)arg1, (CorrelationFactor)arg2 [, (int)arg3 [, (bool)arg4]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE f12_squared(N3psi15IntegralFactoryE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE [,i [,b]])



.. function:: psi4.IntegralFactory.f12g12

   Python Library Documentation: method f12g12

   

   f12g12(...) unbound psi4.IntegralFactory method

       f12g12( (IntegralFactory)arg1, (CorrelationFactor)arg2 [, (int)arg3 [, (bool)arg4]]) -> TwoBodyAOInt :

           docstring

       

           C++ signature :

               PN3psi12TwoBodyAOIntE f12g12(N3psi15IntegralFactoryE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE [,i [,b]])



.. function:: psi4.IntegralFactory.overlap_3c

   Python Library Documentation: method overlap_3c

   

   overlap_3c(...) unbound psi4.IntegralFactory method

       overlap_3c( (IntegralFactory)arg1) -> ThreeCenterOverlapInt :

           docstring

       

           C++ signature :

               PN3psi21ThreeCenterOverlapIntE overlap_3c(N3psi15IntegralFactoryE {lvalue})



.. function:: psi4.IntegralFactory.shells_iterator

   Python Library Documentation: method shells_iterator

   

   shells_iterator(...) unbound psi4.IntegralFactory method

       shells_iterator( (IntegralFactory)arg1) -> AOShellCombinationsIterator :

           docstring

       

           C++ signature :

               PN3psi27AOShellCombinationsIteratorE shells_iterator(N3psi15IntegralFactoryE {lvalue})



.. function:: psi4.IntegralFactory.so_multipoles

   Python Library Documentation: method so_multipoles

   

   so_multipoles(...) unbound psi4.IntegralFactory method

       so_multipoles( (IntegralFactory)arg1, (int)arg2) -> object :

           docstring

       

           C++ signature :

               PN3psi12OneBodySOIntE so_multipoles(N3psi15IntegralFactoryE {lvalue},i)



.. function:: psi4.IntegralFactory.so_overlap

   Python Library Documentation: method so_overlap

   

   so_overlap(...) unbound psi4.IntegralFactory method

       so_overlap( (IntegralFactory)arg1 [, (int)arg2]) -> object :

           docstring

       

           C++ signature :

               PN3psi12OneBodySOIntE so_overlap(N3psi15IntegralFactoryE {lvalue} [,i])



.. _`sec:psimod_JK`:



JK
==



.. function:: psi4.JK.C_left

   Python Library Documentation: method C_left

   

   C_left(...) unbound psi4.JK method

       C_left( (JK)arg1) -> matrix_vector :

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_left(N3psi2JKE {lvalue})



.. function:: psi4.JK.C_right

   Python Library Documentation: method C_right

   

   C_right(...) unbound psi4.JK method

       C_right( (JK)arg1) -> matrix_vector :

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_right(N3psi2JKE {lvalue})



.. function:: psi4.JK.D

   Python Library Documentation: method D

   

   D(...) unbound psi4.JK method

       D( (JK)arg1) -> matrix_vector :

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE D(N3psi2JKE {lvalue})



.. function:: psi4.JK.J

   Python Library Documentation: method J

   

   J(...) unbound psi4.JK method

       J( (JK)arg1) -> matrix_vector :

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE J(N3psi2JKE {lvalue})



.. function:: psi4.JK.K

   Python Library Documentation: method K

   

   K(...) unbound psi4.JK method

       K( (JK)arg1) -> matrix_vector :

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE K(N3psi2JKE {lvalue})



.. function:: psi4.JK.build_JK

   Python Library Documentation: built-in function build_JK

   

   build_JK(...)

       build_JK( (BasisSet)arg1) -> JK :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi2JKEEE build_JK(N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.JK.compute

   Python Library Documentation: method compute

   

   compute(...) unbound psi4.JK method

       compute( (JK)arg1) -> None :

       

           C++ signature :

               void compute(N3psi2JKE {lvalue})



.. function:: psi4.JK.finalize

   Python Library Documentation: method finalize

   

   finalize(...) unbound psi4.JK method

       finalize( (JK)arg1) -> None :

       

           C++ signature :

               void finalize(N3psi2JKE {lvalue})



.. function:: psi4.JK.initialize

   Python Library Documentation: method initialize

   

   initialize(...) unbound psi4.JK method

       initialize( (JK)arg1) -> None :

       

           C++ signature :

               void initialize(N3psi2JKE {lvalue})



.. function:: psi4.JK.print_header

   Python Library Documentation: method print_header

   

   print_header(...) unbound psi4.JK method

       print_header( (JK)arg1) -> None :

           docstring

       

           C++ signature :

               void print_header(N3psi2JKE {lvalue})



.. function:: psi4.JK.wK

   Python Library Documentation: method wK

   

   wK(...) unbound psi4.JK method

       wK( (JK)arg1) -> matrix_vector :

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE wK(N3psi2JKE {lvalue})



.. _`sec:psimod_KineticInt`:



KineticInt
==========



.. function:: psi4.KineticInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.KineticInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.KineticInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.KineticInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.KineticInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.KineticInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.KineticInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.KineticInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.KineticInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.KineticInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_LaplaceDenominator`:



LaplaceDenominator
==================



.. function:: psi4.LaplaceDenominator.denominator_occ

   Python Library Documentation: method denominator_occ

   

   denominator_occ(...) unbound psi4.LaplaceDenominator method

       denominator_occ( (LaplaceDenominator)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue})



.. function:: psi4.LaplaceDenominator.denominator_vir

   Python Library Documentation: method denominator_vir

   

   denominator_vir(...) unbound psi4.LaplaceDenominator method

       denominator_vir( (LaplaceDenominator)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE denominator_vir(N3psi18LaplaceDenominatorE {lvalue})



.. _`sec:psimod_LibParallelHelper`:



LibParallelHelper
=================



.. function:: psi4.LibParallelHelper.AddTask

   Python Library Documentation: method AddTask

   

   AddTask(...) unbound psi4.LibParallelHelper method

       AddTask( (LibParallelHelper)arg1, (str)arg2, (int)arg3) -> None :

       

           C++ signature :

               void AddTask(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python3strE {lvalue},i)



.. function:: psi4.LibParallelHelper.Begin

   Python Library Documentation: method Begin

   

   Begin(...) unbound psi4.LibParallelHelper method

       Begin( (LibParallelHelper)arg1) -> str :

       

           C++ signature :

               N5boost6python3strE Begin(N3psi11LibParallel17LibParallelHelperE {lvalue})



.. function:: psi4.LibParallelHelper.Done

   Python Library Documentation: method Done

   

   Done(...) unbound psi4.LibParallelHelper method

       Done( (LibParallelHelper)arg1) -> bool :

       

           C++ signature :

               b Done(N3psi11LibParallel17LibParallelHelperE {lvalue})



.. function:: psi4.LibParallelHelper.MakeJob

   Python Library Documentation: method MakeJob

   

   MakeJob(...) unbound psi4.LibParallelHelper method

       MakeJob( (LibParallelHelper)arg1) -> None :

       

           C++ signature :

               void MakeJob(N3psi11LibParallel17LibParallelHelperE {lvalue})



.. function:: psi4.LibParallelHelper.Next

   Python Library Documentation: method Next

   

   Next(...) unbound psi4.LibParallelHelper method

       Next( (LibParallelHelper)arg1) -> str :

       

           C++ signature :

               N5boost6python3strE Next(N3psi11LibParallel17LibParallelHelperE {lvalue})



.. function:: psi4.LibParallelHelper.Synch

   Python Library Documentation: method Synch

   

   Synch(...) unbound psi4.LibParallelHelper method

       Synch( (LibParallelHelper)arg1, (list)arg2, (int)arg3) -> list :

       

           C++ signature :

               N5boost6python4listE Synch(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python4listE {lvalue},i)



.. _`sec:psimod_Localizer`:



Localizer
=========



.. function:: psi4.Localizer.L

   Python Library Documentation: property

   

       Localized orbital coefficients



.. function:: psi4.Localizer.U

   Python Library Documentation: property

   

       Orbital rotation matrix



.. function:: psi4.Localizer.build

   Python Library Documentation: built-in function build

   

   build(...)

       build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Localizer.converged

   Python Library Documentation: property

   

       Did the localization procedure converge?



.. function:: psi4.Localizer.localize

   Python Library Documentation: method localize

   

   localize(...) unbound psi4.Localizer method

       localize( (Localizer)arg1) -> None :

           Perform the localization procedure

       

           C++ signature :

               void localize(N3psi9LocalizerE {lvalue})



.. _`sec:psimod_Matrix`:



Matrix
======



.. function:: psi4.Matrix.accumulate_product

   Python Library Documentation: method accumulate_product

   

   accumulate_product(...) unbound psi4.Matrix method

       accumulate_product( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :

           docstring

       

           C++ signature :

               void accumulate_product(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.add

   Python Library Documentation: method add

   

   add(...) unbound psi4.Matrix method

       add( (Matrix)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void add(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.add_and_orthogonalize_row

   Python Library Documentation: method add_and_orthogonalize_row

   

   add_and_orthogonalize_row(...) unbound psi4.Matrix method

       add_and_orthogonalize_row( (Matrix)arg1, (Vector)arg2) -> bool :

           docstring

       

           C++ signature :

               b add_and_orthogonalize_row(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.Matrix.array_interfaces

   Python Library Documentation: method array_interfaces

   

   array_interfaces(...) unbound psi4.Matrix method

       array_interfaces( (Matrix)arg1) -> list :

           docstring

       

           C++ signature :

               N5boost6python4listE array_interfaces(N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.back_transform

   Python Library Documentation: method back_transform

   

   back_transform(...) unbound psi4.Matrix method

       back_transform( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :

           docstring

       

           C++ signature :

               void back_transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.canonical_orthogonalization

   Python Library Documentation: method canonical_orthogonalization

   

   canonical_orthogonalization(...) unbound psi4.Matrix method

       canonical_orthogonalization( (Matrix)arg1, (float)arg2 [, (Matrix)arg3]) -> Matrix :

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE canonical_orthogonalization(N3psi6MatrixE {lvalue},d [,N5boost10shared_ptrIN3psi6MatrixEEE])



.. function:: psi4.Matrix.cholesky_factorize

   Python Library Documentation: method cholesky_factorize

   

   cholesky_factorize(...) unbound psi4.Matrix method

       cholesky_factorize( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void cholesky_factorize(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.clone

   Python Library Documentation: method clone

   

   clone(...) unbound psi4.Matrix method

       clone( (Matrix)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE clone(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.coldim

   Python Library Documentation: method coldim

   

   coldim(...) unbound psi4.Matrix method

       coldim( (Matrix)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE coldim(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.cols

   Python Library Documentation: method cols

   

   cols(...) unbound psi4.Matrix method

       cols( (Matrix)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i cols(N3psi6MatrixE {lvalue},i)



.. function:: psi4.Matrix.copy_lower_to_upper

   Python Library Documentation: method copy_lower_to_upper

   

   copy_lower_to_upper(...) unbound psi4.Matrix method

       copy_lower_to_upper( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void copy_lower_to_upper(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.copy_upper_to_lower

   Python Library Documentation: method copy_upper_to_lower

   

   copy_upper_to_lower(...) unbound psi4.Matrix method

       copy_upper_to_lower( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void copy_upper_to_lower(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.diagonalize

   Python Library Documentation: method diagonalize

   

   diagonalize(...) unbound psi4.Matrix method

       diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :

           docstring

       

           C++ signature :

               void diagonalize(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue},N3psi17diagonalize_orderE)



.. function:: psi4.Matrix.doublet

   Python Library Documentation: method doublet

   

   doublet(...) unbound psi4.Matrix method

       doublet( (Matrix)arg1, (Matrix)arg2, (bool)arg3, (bool)arg4) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b)



.. function:: psi4.Matrix.from_array

   Python Library Documentation: method array_to_matrix in module p4util.numpy_helper

   

   array_to_matrix(self, arr, name='New Matrix', dim1=None, dim2=None) method of Boost.Python.class instance

       Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list).

       

       Parameters

       ----------

       arr : array or list of arrays

           Numpy array or list of arrays to use as the data for a new psi4.Matrix

       name : str

           Name to give the new psi4.Matrix

       dim1 : list, tuple, or psi4.Dimension (optional)

           If a single dense numpy array is given, a dimension can be supplied to

           apply irreps to this array. Note that this discards all extra information

           given in the matrix besides the diagonal blocks determined by the passed

           dimension.

       dim2 :

           Same as dim1 only if using a Psi4.Dimension object.

       

       Returns

       -------

       ret : psi4.Vector or psi4.Matrix

          Returns the given Psi4 object 

       

       Notes

       -----

       This is a generalized function to convert a NumPy array to 

       

       Examples

       --------

       

       >>> data = np.random.rand(20)

       >>> vector = array_to_matrix(data)

       

       >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]

       >>> matrix = array_to_matrix(irrep_data)

       >>> print matrix.rowspi().to_tuple()

       >>> (2, 0, 4)



.. function:: psi4.Matrix.gemm

   Python Library Documentation: method gemm

   

   gemm(...) unbound psi4.Matrix method

       gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :

           docstring

       

           C++ signature :

               void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d)



.. function:: psi4.Matrix.get

   Python Library Documentation: method get

   

   get(...) unbound psi4.Matrix method

       get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :

           docstring

       

           C++ signature :

               d get(N3psi6MatrixE {lvalue},i,i [,i])



.. function:: psi4.Matrix.identity

   Python Library Documentation: method identity

   

   identity(...) unbound psi4.Matrix method

       identity( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void identity(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.invert

   Python Library Documentation: method invert

   

   invert(...) unbound psi4.Matrix method

       invert( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void invert(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.load

   Python Library Documentation: method load

   

   load(...) unbound psi4.Matrix method

       load( (Matrix)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void load(N3psi6MatrixE {lvalue},Ss)



.. function:: psi4.Matrix.load_mpqc

   Python Library Documentation: method load_mpqc

   

   load_mpqc(...) unbound psi4.Matrix method

       load_mpqc( (Matrix)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void load_mpqc(N3psi6MatrixE {lvalue},Ss)



.. function:: psi4.Matrix.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.Matrix method

       name( (Matrix)arg1) -> str :

           docstring

       

           C++ signature :

               Ss name(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.Matrix method

       nirrep( (Matrix)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.np

   Python Library Documentation: property

   



.. function:: psi4.Matrix.partial_cholesky_factorize

   Python Library Documentation: method partial_cholesky_factorize

   

   partial_cholesky_factorize(...) unbound psi4.Matrix method

       partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b)



.. function:: psi4.Matrix.power

   Python Library Documentation: method power

   

   power(...) unbound psi4.Matrix method

       power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d)



.. function:: psi4.Matrix.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.Matrix method

       print_out( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.project_out

   Python Library Documentation: method project_out

   

   project_out(...) unbound psi4.Matrix method

       project_out( (Matrix)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.remove_symmetry

   Python Library Documentation: method remove_symmetry

   

   remove_symmetry(...) unbound psi4.Matrix method

       remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :

           docstring

       

           C++ signature :

               void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.rms

   Python Library Documentation: method rms

   

   rms(...) unbound psi4.Matrix method

       rms( (Matrix)arg1) -> float :

           docstring

       

           C++ signature :

               d rms(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.rowdim

   Python Library Documentation: method rowdim

   

   rowdim(...) unbound psi4.Matrix method

       rowdim( (Matrix)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE rowdim(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.rows

   Python Library Documentation: method rows

   

   rows(...) unbound psi4.Matrix method

       rows( (Matrix)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i rows(N3psi6MatrixE {lvalue},i)



.. function:: psi4.Matrix.save

   Python Library Documentation: method save

   

   save(...) unbound psi4.Matrix method

       save( (Matrix)arg1, (str)arg2, (bool)arg3, (bool)arg4, (bool)arg5) -> None :

           docstring

       

           C++ signature :

               void save(N3psi6MatrixE {lvalue},Ss,b,b,b)



.. function:: psi4.Matrix.scale

   Python Library Documentation: method scale

   

   scale(...) unbound psi4.Matrix method

       scale( (Matrix)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void scale(N3psi6MatrixE {lvalue},d)



.. function:: psi4.Matrix.scale_column

   Python Library Documentation: method scale_column

   

   scale_column(...) unbound psi4.Matrix method

       scale_column( (Matrix)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

           docstring

       

           C++ signature :

               void scale_column(N3psi6MatrixE {lvalue},i,i,d)



.. function:: psi4.Matrix.scale_row

   Python Library Documentation: method scale_row

   

   scale_row(...) unbound psi4.Matrix method

       scale_row( (Matrix)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

           docstring

       

           C++ signature :

               void scale_row(N3psi6MatrixE {lvalue},i,i,d)



.. function:: psi4.Matrix.schmidt

   Python Library Documentation: method schmidt

   

   schmidt(...) unbound psi4.Matrix method

       schmidt( (Matrix)arg1) -> None :

       

           C++ signature :

               void schmidt(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.set

   Python Library Documentation: method set

   

   set(...) unbound psi4.Matrix method

       set( (Matrix)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

           docstring

       

           C++ signature :

               void set(N3psi6MatrixE {lvalue},i,i,d)

       

       set( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> None :

           docstring

       

           C++ signature :

               void set(N3psi6MatrixE {lvalue},i,i,i,d)

       

       set( (Matrix)arg1, (list)arg2) -> None :

           docstring

       

           C++ signature :

               void set(N3psi6MatrixE {lvalue},N5boost6python4listE)



.. function:: psi4.Matrix.set_name

   Python Library Documentation: method set_name

   

   set_name(...) unbound psi4.Matrix method

       set_name( (Matrix)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_name(N3psi6MatrixE {lvalue},Ss)



.. function:: psi4.Matrix.shape

   Python Library Documentation: property

   



.. function:: psi4.Matrix.subtract

   Python Library Documentation: method subtract

   

   subtract(...) unbound psi4.Matrix method

       subtract( (Matrix)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void subtract(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.sum_of_squares

   Python Library Documentation: method sum_of_squares

   

   sum_of_squares(...) unbound psi4.Matrix method

       sum_of_squares( (Matrix)arg1) -> float :

           docstring

       

           C++ signature :

               d sum_of_squares(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.symmetrize_gradient

   Python Library Documentation: method symmetrize_gradient

   

   symmetrize_gradient(...) unbound psi4.Matrix method

       symmetrize_gradient( (Matrix)arg1, (Molecule)arg2) -> None :

           docstring

       

           C++ signature :

               void symmetrize_gradient(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE)



.. function:: psi4.Matrix.symmetry

   Python Library Documentation: method symmetry

   

   symmetry(...) unbound psi4.Matrix method

       symmetry( (Matrix)arg1) -> int :

           docstring

       

           C++ signature :

               i symmetry(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.to_array

   Python Library Documentation: method to_array in module p4util.numpy_helper

   

   to_array(matrix, copy=True, dense=False) unbound psi4.Matrix method

       Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply

       consturcts a view.



.. function:: psi4.Matrix.trace

   Python Library Documentation: method trace

   

   trace(...) unbound psi4.Matrix method

       trace( (Matrix)arg1) -> float :

           docstring

       

           C++ signature :

               d trace(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.transform

   Python Library Documentation: method transform

   

   transform(...) unbound psi4.Matrix method

       transform( (Matrix)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)

       

       transform( (Matrix)arg1, (Matrix)arg2 [, (Matrix)arg3]) -> None :

           docstring

       

           C++ signature :

               void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE [,N5boost10shared_ptrIN3psi6MatrixEEE])



.. function:: psi4.Matrix.vector_dot

   Python Library Documentation: method vector_dot

   

   vector_dot(...) unbound psi4.Matrix method

       vector_dot( (Matrix)arg1, (Matrix)arg2) -> float :

           docstring

       

           C++ signature :

               d vector_dot(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.Matrix.zero

   Python Library Documentation: method zero

   

   zero(...) unbound psi4.Matrix method

       zero( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void zero(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.zero_diagonal

   Python Library Documentation: method zero_diagonal

   

   zero_diagonal(...) unbound psi4.Matrix method

       zero_diagonal( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void zero_diagonal(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.zero_lower

   Python Library Documentation: method zero_lower

   

   zero_lower(...) unbound psi4.Matrix method

       zero_lower( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void zero_lower(N3psi6MatrixE {lvalue})



.. function:: psi4.Matrix.zero_upper

   Python Library Documentation: method zero_upper

   

   zero_upper(...) unbound psi4.Matrix method

       zero_upper( (Matrix)arg1) -> None :

           docstring

       

           C++ signature :

               void zero_upper(N3psi6MatrixE {lvalue})



.. _`sec:psimod_MatrixFactory`:



MatrixFactory
=============



.. function:: psi4.MatrixFactory.create_matrix

   Python Library Documentation: method create_matrix

   

   create_matrix(...) unbound psi4.MatrixFactory method

       create_matrix( (MatrixFactory)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue})

       

       create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss)



.. function:: psi4.MatrixFactory.shared_object

   Python Library Documentation: built-in function shared_object

   

   shared_object(...)

       shared_object() -> MatrixFactory :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi13MatrixFactoryEEE shared_object()



.. _`sec:psimod_MintsHelper`:



MintsHelper
===========



.. function:: psi4.MintsHelper.ao_angular_momentum

   Python Library Documentation: method ao_angular_momentum

   

   ao_angular_momentum(...) unbound psi4.MintsHelper method

       ao_angular_momentum( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE ao_angular_momentum(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.ao_erf_eri

   Python Library Documentation: method ao_erf_eri

   

   ao_erf_eri(...) unbound psi4.MintsHelper method

       ao_erf_eri( (MintsHelper)arg1, (float)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_erf_eri(N3psi11MintsHelperE {lvalue},d)



.. function:: psi4.MintsHelper.ao_eri

   Python Library Documentation: method ao_eri

   

   ao_eri(...) unbound psi4.MintsHelper method

       ao_eri( (MintsHelper)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_eri(N3psi11MintsHelperE {lvalue})

       

       ao_eri( (MintsHelper)arg1, (BasisSet)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_eri(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.ao_eri_shell

   Python Library Documentation: method ao_eri_shell

   

   ao_eri_shell(...) unbound psi4.MintsHelper method

       ao_eri_shell( (MintsHelper)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_eri_shell(N3psi11MintsHelperE {lvalue},i,i,i,i)



.. function:: psi4.MintsHelper.ao_f12

   Python Library Documentation: method ao_f12

   

   ao_f12(...) unbound psi4.MintsHelper method

       ao_f12( (MintsHelper)arg1, (CorrelationFactor)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE)

       

       ao_f12( (MintsHelper)arg1, (CorrelationFactor)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5, (BasisSet)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.ao_f12_double_commutator

   Python Library Documentation: method ao_f12_double_commutator

   

   ao_f12_double_commutator(...) unbound psi4.MintsHelper method

       ao_f12_double_commutator( (MintsHelper)arg1, (CorrelationFactor)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12_double_commutator(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE)



.. function:: psi4.MintsHelper.ao_f12_scaled

   Python Library Documentation: method ao_f12_scaled

   

   ao_f12_scaled(...) unbound psi4.MintsHelper method

       ao_f12_scaled( (MintsHelper)arg1, (CorrelationFactor)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12_scaled(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE)

       

       ao_f12_scaled( (MintsHelper)arg1, (CorrelationFactor)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5, (BasisSet)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12_scaled(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.ao_f12_squared

   Python Library Documentation: method ao_f12_squared

   

   ao_f12_squared(...) unbound psi4.MintsHelper method

       ao_f12_squared( (MintsHelper)arg1, (CorrelationFactor)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12_squared(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE)

       

       ao_f12_squared( (MintsHelper)arg1, (CorrelationFactor)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5, (BasisSet)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12_squared(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.ao_f12g12

   Python Library Documentation: method ao_f12g12

   

   ao_f12g12(...) unbound psi4.MintsHelper method

       ao_f12g12( (MintsHelper)arg1, (CorrelationFactor)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_f12g12(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE)



.. function:: psi4.MintsHelper.ao_kinetic

   Python Library Documentation: method ao_kinetic

   

   ao_kinetic(...) unbound psi4.MintsHelper method

       ao_kinetic( (MintsHelper)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_kinetic(N3psi11MintsHelperE {lvalue})

       

       ao_kinetic( (MintsHelper)arg1, (BasisSet)arg2, (BasisSet)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_kinetic(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.ao_nabla

   Python Library Documentation: method ao_nabla

   

   ao_nabla(...) unbound psi4.MintsHelper method

       ao_nabla( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE ao_nabla(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.ao_overlap

   Python Library Documentation: method ao_overlap

   

   ao_overlap(...) unbound psi4.MintsHelper method

       ao_overlap( (MintsHelper)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_overlap(N3psi11MintsHelperE {lvalue})

       

       ao_overlap( (MintsHelper)arg1, (BasisSet)arg2, (BasisSet)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_overlap(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.ao_potential

   Python Library Documentation: method ao_potential

   

   ao_potential(...) unbound psi4.MintsHelper method

       ao_potential( (MintsHelper)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_potential(N3psi11MintsHelperE {lvalue})

       

       ao_potential( (MintsHelper)arg1, (BasisSet)arg2, (BasisSet)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE ao_potential(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE)



.. function:: psi4.MintsHelper.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.MintsHelper method

       basisset( (MintsHelper)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.cdsalcs

   Python Library Documentation: method cdsalcs

   

   cdsalcs(...) unbound psi4.MintsHelper method

       cdsalcs( (MintsHelper)arg1, (int)arg2, (bool)arg3, (bool)arg4) -> CdSalcList :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10CdSalcListEEE cdsalcs(N3psi11MintsHelperE {lvalue},i,b,b)



.. function:: psi4.MintsHelper.factory

   Python Library Documentation: method factory

   

   factory(...) unbound psi4.MintsHelper method

       factory( (MintsHelper)arg1) -> MatrixFactory :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi13MatrixFactoryEEE factory(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.integral

   Python Library Documentation: method integral

   

   integral(...) unbound psi4.MintsHelper method

       integral( (MintsHelper)arg1) -> IntegralFactory :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi15IntegralFactoryEEE integral(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.integrals

   Python Library Documentation: method integrals

   

   integrals(...) unbound psi4.MintsHelper method

       integrals( (MintsHelper)arg1) -> None :

           docstring

       

           C++ signature :

               void integrals(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.integrals_erf

   Python Library Documentation: method integrals_erf

   

   integrals_erf(...) unbound psi4.MintsHelper method

       integrals_erf( (MintsHelper)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void integrals_erf(N3psi11MintsHelperE {lvalue},d)



.. function:: psi4.MintsHelper.integrals_erfc

   Python Library Documentation: method integrals_erfc

   

   integrals_erfc(...) unbound psi4.MintsHelper method

       integrals_erfc( (MintsHelper)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void integrals_erfc(N3psi11MintsHelperE {lvalue},d)



.. function:: psi4.MintsHelper.mo_erf_eri

   Python Library Documentation: method mo_erf_eri

   

   mo_erf_eri(...) unbound psi4.MintsHelper method

       mo_erf_eri( (MintsHelper)arg1, (float)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5, (Matrix)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_erf_eri(N3psi11MintsHelperE {lvalue},d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_eri

   Python Library Documentation: method mo_eri

   

   mo_eri(...) unbound psi4.MintsHelper method

       mo_eri( (MintsHelper)arg1, (Matrix)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_eri(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_f12

   Python Library Documentation: method mo_f12

   

   mo_f12(...) unbound psi4.MintsHelper method

       mo_f12( (MintsHelper)arg1, (CorrelationFactor)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5, (Matrix)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_f12(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_f12_double_commutator

   Python Library Documentation: method mo_f12_double_commutator

   

   mo_f12_double_commutator(...) unbound psi4.MintsHelper method

       mo_f12_double_commutator( (MintsHelper)arg1, (CorrelationFactor)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5, (Matrix)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_f12_double_commutator(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_f12_squared

   Python Library Documentation: method mo_f12_squared

   

   mo_f12_squared(...) unbound psi4.MintsHelper method

       mo_f12_squared( (MintsHelper)arg1, (CorrelationFactor)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5, (Matrix)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_f12_squared(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_f12g12

   Python Library Documentation: method mo_f12g12

   

   mo_f12g12(...) unbound psi4.MintsHelper method

       mo_f12g12( (MintsHelper)arg1, (CorrelationFactor)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5, (Matrix)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_f12g12(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_spin_eri

   Python Library Documentation: method mo_spin_eri

   

   mo_spin_eri(...) unbound psi4.MintsHelper method

       mo_spin_eri( (MintsHelper)arg1, (Matrix)arg2, (Matrix)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_spin_eri(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.mo_transform

   Python Library Documentation: method mo_transform

   

   mo_transform(...) unbound psi4.MintsHelper method

       mo_transform( (MintsHelper)arg1, (Matrix)arg2, (Matrix)arg3, (Matrix)arg4, (Matrix)arg5, (Matrix)arg6) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE mo_transform(N3psi11MintsHelperE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.MintsHelper.one_electron_integrals

   Python Library Documentation: method one_electron_integrals

   

   one_electron_integrals(...) unbound psi4.MintsHelper method

       one_electron_integrals( (MintsHelper)arg1) -> None :

           docstring

       

           C++ signature :

               void one_electron_integrals(N3psi11MintsHelperE {lvalue})

       

       one_electron_integrals( (MintsHelper)arg1) -> None :

           docstring

       

           C++ signature :

               void one_electron_integrals(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.petite_list

   Python Library Documentation: method petite_list

   

   petite_list(...) unbound psi4.MintsHelper method

       petite_list( (MintsHelper)arg1) -> PetiteList :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.petite_list1

   Python Library Documentation: method petite_list1

   

   petite_list1(...) unbound psi4.MintsHelper method

       petite_list1( (MintsHelper)arg1, (bool)arg2) -> PetiteList :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10PetiteListEEE petite_list1(N3psi11MintsHelperE {lvalue},b)



.. function:: psi4.MintsHelper.play

   Python Library Documentation: method play

   

   play(...) unbound psi4.MintsHelper method

       play( (MintsHelper)arg1) -> None :

           docstring

       

           C++ signature :

               void play(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.set_print

   Python Library Documentation: method set_print

   

   set_print(...) unbound psi4.MintsHelper method

       set_print( (MintsHelper)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void set_print(N3psi11MintsHelperE {lvalue},i)



.. function:: psi4.MintsHelper.so_angular_momentum

   Python Library Documentation: method so_angular_momentum

   

   so_angular_momentum(...) unbound psi4.MintsHelper method

       so_angular_momentum( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_angular_momentum(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.so_dipole

   Python Library Documentation: method so_dipole

   

   so_dipole(...) unbound psi4.MintsHelper method

       so_dipole( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_dipole(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.so_kinetic

   Python Library Documentation: method so_kinetic

   

   so_kinetic(...) unbound psi4.MintsHelper method

       so_kinetic( (MintsHelper)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE so_kinetic(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.so_nabla

   Python Library Documentation: method so_nabla

   

   so_nabla(...) unbound psi4.MintsHelper method

       so_nabla( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_nabla(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.so_overlap

   Python Library Documentation: method so_overlap

   

   so_overlap(...) unbound psi4.MintsHelper method

       so_overlap( (MintsHelper)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE so_overlap(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.so_potential

   Python Library Documentation: method so_potential

   

   so_potential(...) unbound psi4.MintsHelper method

       so_potential( (MintsHelper)arg1, (bool)arg2) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE so_potential(N3psi11MintsHelperE {lvalue},b)



.. function:: psi4.MintsHelper.so_quadrupole

   Python Library Documentation: method so_quadrupole

   

   so_quadrupole(...) unbound psi4.MintsHelper method

       so_quadrupole( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_quadrupole(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.so_traceless_quadrupole

   Python Library Documentation: method so_traceless_quadrupole

   

   so_traceless_quadrupole(...) unbound psi4.MintsHelper method

       so_traceless_quadrupole( (MintsHelper)arg1) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_traceless_quadrupole(N3psi11MintsHelperE {lvalue})



.. function:: psi4.MintsHelper.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.MintsHelper method

       sobasisset( (MintsHelper)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi11MintsHelperE {lvalue})



.. _`sec:psimod_MoldenWriter`:



MoldenWriter
============



.. function:: psi4.MoldenWriter.write

   Python Library Documentation: method write

   

   write(...) unbound psi4.MoldenWriter method

       write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :

           docstring

       

           C++ signature :

               void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.MoldenWriter.writeNO

   Python Library Documentation: method writeNO

   

   writeNO(...) unbound psi4.MoldenWriter method

       writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :

           docstring

       

           C++ signature :

               void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. _`sec:psimod_Molecule`:



Molecule
========



.. function:: psi4.Molecule.BFS

   Python Library Documentation: method BFS in module molutil

   

   BFS(self) unbound psi4.Molecule method

       Perform a breadth-first search (BFS) on the real atoms

       in molecule, returning an array of atom indices of fragments.

       Relies upon van der Waals radii and so faulty for close

       (esp. hydrogen-bonded) fragments. Original code from

       Michael S. Marshall.



.. function:: psi4.Molecule.Z

   Python Library Documentation: method Z

   

   Z(...) unbound psi4.Molecule method

       Z( (Molecule)arg1, (int)arg2) -> float :

           Nuclear charge of atom

       

           C++ signature :

               d Z(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.activate_all_fragments

   Python Library Documentation: method activate_all_fragments

   

   activate_all_fragments(...) unbound psi4.Molecule method

       activate_all_fragments( (Molecule)arg1) -> None :

           Sets all fragments in the molecule to be active

       

           C++ signature :

               void activate_all_fragments(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.add_atom

   Python Library Documentation: method add_atom

   

   add_atom(...) unbound psi4.Molecule method

       add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :

           Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional)

       

           C++ signature :

               void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i)



.. function:: psi4.Molecule.atom_at_position

   Python Library Documentation: method atom_at_position

   

   atom_at_position(...) unbound psi4.Molecule method

       atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :

           Tests to see if an atom is at the position arg2 with a given tolerance arg3

       

           C++ signature :

               i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d)



.. function:: psi4.Molecule.center_of_mass

   Python Library Documentation: method center_of_mass

   

   center_of_mass(...) unbound psi4.Molecule method

       center_of_mass( (Molecule)arg1) -> Vector3 :

           Computes center of mass of molecule (does not translate molecule)

       

           C++ signature :

               N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.charge

   Python Library Documentation: method charge

   

   charge(...) unbound psi4.Molecule method

       charge( (Molecule)arg1, (int)arg2) -> float :

           Gets charge of atom

       

           C++ signature :

               d charge(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.clone

   Python Library Documentation: method clone

   

   clone(...) unbound psi4.Molecule method

       clone( (Molecule)arg1) -> Molecule :

           Returns a new Molecule identical to arg1

       

           C++ signature :

               N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.create_molecule_from_string

   Python Library Documentation: built-in function create_molecule_from_string

   

   create_molecule_from_string(...)

       create_molecule_from_string( (str)arg1) -> Molecule :

           Returns a new Molecule with member data from the geometry string arg1 in psi4 format

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss)



.. function:: psi4.Molecule.create_psi4_string_from_molecule

   Python Library Documentation: method create_psi4_string_from_molecule

   

   create_psi4_string_from_molecule(...) unbound psi4.Molecule method

       create_psi4_string_from_molecule( (Molecule)arg1) -> str :

           Gets a string reexpressing in input format the current states of the molecule

       

           C++ signature :

               Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.deactivate_all_fragments

   Python Library Documentation: method deactivate_all_fragments

   

   deactivate_all_fragments(...) unbound psi4.Molecule method

       deactivate_all_fragments( (Molecule)arg1) -> None :

           Sets all fragments in the molecule to be inactive

       

           C++ signature :

               void deactivate_all_fragments(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.extract_subsets

   Python Library Documentation: method extract_subsets

   

   extract_subsets(...) unbound psi4.Molecule method

       extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :

           Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3psi8MoleculeE {lvalue},N5boost6python4listE,N5boost6python4listE)

       

       extract_subsets( (Molecule)arg1, (list)arg2, (int)arg3) -> Molecule :

           Returns copy of arg1 with arg2 fragments Real and arg3 fragment Ghost

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3psi8MoleculeE {lvalue},N5boost6python4listE,i)

       

       extract_subsets( (Molecule)arg1, (int)arg2, (list)arg3) -> Molecule :

           Returns copy of arg1 with arg2 fragment Real and arg3 fragments Ghost

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3psi8MoleculeE {lvalue},i,N5boost6python4listE)

       

       extract_subsets( (Molecule)arg1, (int)arg2, (int)arg3) -> Molecule :

           Returns copy of arg1 with arg2 fragment Real and arg3 fragment Ghost

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3psi8MoleculeE {lvalue},i,i)

       

       extract_subsets( (Molecule)arg1, (list)arg2) -> Molecule :

           Returns copy of arg1 with arg2 fragments Real

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3psi8MoleculeE {lvalue},N5boost6python4listE)

       

       extract_subsets( (Molecule)arg1, (int)arg2) -> Molecule :

           Returns copy of arg1 with arg2 fragment Real

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.find_point_group

   Python Library Documentation: method find_point_group

   

   find_point_group(...) unbound psi4.Molecule method

       find_point_group( (Molecule)arg1, (float)arg2) -> PointGroup :

           Finds computational molecular point group, user can override this with the symmetry keyword

       

           C++ signature :

               N5boost10shared_ptrIN3psi10PointGroupEEE find_point_group(N3psi8MoleculeE {lvalue},d)



.. function:: psi4.Molecule.fix_com

   Python Library Documentation: method fix_com

   

   fix_com(...) unbound psi4.Molecule method

       fix_com( (Molecule)arg1, (bool)arg2) -> None :

           Whether to fix the Cartesian position, or to translate to the C.O.M.

       

           C++ signature :

               void fix_com(N3psi8MoleculeE {lvalue},b)



.. function:: psi4.Molecule.fix_orientation

   Python Library Documentation: method fix_orientation

   

   fix_orientation(...) unbound psi4.Molecule method

       fix_orientation( (Molecule)arg1, (bool)arg2) -> None :

           Fix the orientation at its current frame

       

           C++ signature :

               void fix_orientation(N3psi8MoleculeE {lvalue},b)



.. function:: psi4.Molecule.form_symmetry_information

   Python Library Documentation: method form_symmetry_information

   

   form_symmetry_information(...) unbound psi4.Molecule method

       form_symmetry_information( (Molecule)arg1, (float)arg2) -> None :

           Uses the point group object obtain by calling point_group()

       

           C++ signature :

               void form_symmetry_information(N3psi8MoleculeE {lvalue},d)



.. function:: psi4.Molecule.geometry

   Python Library Documentation: method geometry

   

   geometry(...) unbound psi4.Molecule method

       geometry( (Molecule)arg1) -> Matrix :

           Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr)

       

           C++ signature :

               N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.get_full_point_group

   Python Library Documentation: method get_full_point_group

   

   get_full_point_group(...) unbound psi4.Molecule method

       get_full_point_group( (Molecule)arg1) -> str :

           Gets point group name such as C3v or S8

       

           C++ signature :

               Ss get_full_point_group(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.get_variable

   Python Library Documentation: method get_variable

   

   get_variable(...) unbound psi4.Molecule method

       get_variable( (Molecule)arg1, (str)arg2) -> float :

           Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not

       

           C++ signature :

               d get_variable(N3psi8MoleculeE {lvalue},Ss)



.. function:: psi4.Molecule.is_variable

   Python Library Documentation: method is_variable

   

   is_variable(...) unbound psi4.Molecule method

       is_variable( (Molecule)arg1, (str)arg2) -> bool :

           Checks if variable arg2 is in the list, returns true if it is, and returns false if not

       

           C++ signature :

               b is_variable(N3psi8MoleculeE {lvalue},Ss)



.. function:: psi4.Molecule.label

   Python Library Documentation: method label

   

   label(...) unbound psi4.Molecule method

       label( (Molecule)arg1, (int)arg2) -> str :

           Gets the original label of the atom as given in the input file (C2, H4)

       

           C++ signature :

               Ss label(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.mass

   Python Library Documentation: method mass

   

   mass(...) unbound psi4.Molecule method

       mass( (Molecule)arg1, (int)arg2) -> float :

           Gets mass of atom arg2

       

           C++ signature :

               d mass(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.molecular_charge

   Python Library Documentation: method molecular_charge

   

   molecular_charge(...) unbound psi4.Molecule method

       molecular_charge( (Molecule)arg1) -> int :

           Gets the molecular charge

       

           C++ signature :

               i molecular_charge(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.move_to_com

   Python Library Documentation: method move_to_com

   

   move_to_com(...) unbound psi4.Molecule method

       move_to_com( (Molecule)arg1) -> None :

           Moves molecule to center of mass

       

           C++ signature :

               void move_to_com(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.multiplicity

   Python Library Documentation: method multiplicity

   

   multiplicity(...) unbound psi4.Molecule method

       multiplicity( (Molecule)arg1) -> int :

           Gets the multiplicity (defined as 2Ms + 1)

       

           C++ signature :

               i multiplicity(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.Molecule method

       name( (Molecule)arg1) -> str :

           Gets molecule name

       

           C++ signature :

               Ss name(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.natom

   Python Library Documentation: method natom

   

   natom(...) unbound psi4.Molecule method

       natom( (Molecule)arg1) -> int :

           Number of real atoms

       

           C++ signature :

               i natom(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.nfragments

   Python Library Documentation: method nfragments

   

   nfragments(...) unbound psi4.Molecule method

       nfragments( (Molecule)arg1) -> int :

           Gets the number of fragments in the molecule

       

           C++ signature :

               i nfragments(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.nuclear_repulsion_energy

   Python Library Documentation: method nuclear_repulsion_energy

   

   nuclear_repulsion_energy(...) unbound psi4.Molecule method

       nuclear_repulsion_energy( (Molecule)arg1) -> float :

           Computes nuclear repulsion energy

       

           C++ signature :

               d nuclear_repulsion_energy(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.point_group

   Python Library Documentation: method point_group

   

   point_group(...) unbound psi4.Molecule method

       point_group( (Molecule)arg1) -> PointGroup :

           Returns the current point group object

       

           C++ signature :

               N5boost10shared_ptrIN3psi10PointGroupEEE point_group(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.print_cluster

   Python Library Documentation: method print_cluster

   

   print_cluster(...) unbound psi4.Molecule method

       print_cluster( (Molecule)arg1) -> None :

           Prints the molecule in Cartesians in input units adding fragment separators

       

           C++ signature :

               void print_cluster(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.print_in_input_format

   Python Library Documentation: method print_in_input_format

   

   print_in_input_format(...) unbound psi4.Molecule method

       print_in_input_format( (Molecule)arg1) -> None :

           Prints the molecule as Cartesian or ZMatrix entries, just as inputted.

       

           C++ signature :

               void print_in_input_format(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.Molecule method

       print_out( (Molecule)arg1) -> None :

           Prints the molecule in Cartesians in input units

       

           C++ signature :

               void print_out(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.print_out_in_angstrom

   Python Library Documentation: method print_out_in_angstrom

   

   print_out_in_angstrom(...) unbound psi4.Molecule method

       print_out_in_angstrom( (Molecule)arg1) -> None :

           Prints the molecule in Cartesians in Angstroms

       

           C++ signature :

               void print_out_in_angstrom(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.print_out_in_bohr

   Python Library Documentation: method print_out_in_bohr

   

   print_out_in_bohr(...) unbound psi4.Molecule method

       print_out_in_bohr( (Molecule)arg1) -> None :

           Prints the molecule in Cartesians in Bohr

       

           C++ signature :

               void print_out_in_bohr(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.reinterpret_coordentry

   Python Library Documentation: method reinterpret_coordentry

   

   reinterpret_coordentry(...) unbound psi4.Molecule method

       reinterpret_coordentry( (Molecule)arg1, (bool)arg2) -> None :

           Do reinterpret coordinate entries during update_geometry().

       

           C++ signature :

               void reinterpret_coordentry(N3psi8MoleculeE {lvalue},b)



.. function:: psi4.Molecule.reset_point_group

   Python Library Documentation: method reset_point_group

   

   reset_point_group(...) unbound psi4.Molecule method

       reset_point_group( (Molecule)arg1, (str)arg2) -> None :

           Overrides symmetry from outside the molecule string

       

           C++ signature :

               void reset_point_group(N3psi8MoleculeE {lvalue},Ss)



.. function:: psi4.Molecule.rotational_constants

   Python Library Documentation: method rotational_constants

   

   rotational_constants(...) unbound psi4.Molecule method

       rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :

           Prints the rotational constants of the molecule

       

           C++ signature :

               N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d)



.. function:: psi4.Molecule.run_dftd3

   Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3

   

   run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method

       Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/)

       to compute the -D correction of level *dashlvl* using parameters for

       the functional *func*. The dictionary *dashparam* can be used to supply

       a full set of dispersion parameters in the absense of *func* or to supply

       individual overrides in the presence of *func*. Returns energy if *dertype* is 0,

       gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*

       unspecified. The dftd3 executable must be independently compiled and found in

       :envvar:`PATH` or :envvar:`PSIPATH`.

       *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule

       (works b/c psi4.Molecule has been extended by this method py-side and

       only public interface fns used) or a string that can be instantiated

       into a qcdb.Molecule.



.. function:: psi4.Molecule.save_string_xyz

   Python Library Documentation: method save_string_xyz

   

   save_string_xyz(...) unbound psi4.Molecule method

       save_string_xyz( (Molecule)arg1) -> str :

           Saves the string of an XYZ file to arg2

       

           C++ signature :

               Ss save_string_xyz(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.save_string_xyz_file

   Python Library Documentation: method save_string_xyz_file

   

   save_string_xyz_file(...) unbound psi4.Molecule method

       save_string_xyz_file( (Molecule)arg1) -> str :

           Saves an XYZ file to arg2

       

           C++ signature :

               Ss save_string_xyz_file(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.save_xyz_file

   Python Library Documentation: method save_xyz_file

   

   save_xyz_file(...) unbound psi4.Molecule method

       save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :

           Saves an XYZ file to arg2

       

           C++ signature :

               void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b)



.. function:: psi4.Molecule.schoenflies_symbol

   Python Library Documentation: method schoenflies_symbol

   

   schoenflies_symbol(...) unbound psi4.Molecule method

       schoenflies_symbol( (Molecule)arg1) -> str :

           Returns the Schoenflies symbol

       

           C++ signature :

               Ss schoenflies_symbol(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.set_active_fragment

   Python Library Documentation: method set_active_fragment

   

   set_active_fragment(...) unbound psi4.Molecule method

       set_active_fragment( (Molecule)arg1, (int)arg2) -> None :

           Sets the specified fragment arg2 to be Real

       

           C++ signature :

               void set_active_fragment(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.set_active_fragments

   Python Library Documentation: method set_active_fragments

   

   set_active_fragments(...) unbound psi4.Molecule method

       set_active_fragments( (Molecule)arg1, (list)arg2) -> None :

           Sets the specified list arg2 of fragments to be Real

       

           C++ signature :

               void set_active_fragments(N3psi8MoleculeE {lvalue},N5boost6python4listE)



.. function:: psi4.Molecule.set_basis_all_atoms

   Python Library Documentation: method set_basis_all_atoms

   

   set_basis_all_atoms(...) unbound psi4.Molecule method

       set_basis_all_atoms( (Molecule)arg1, (str)arg2, (str)arg3) -> None :

           Sets basis set arg2 to all atoms

       

           C++ signature :

               void set_basis_all_atoms(N3psi8MoleculeE {lvalue},Ss,Ss)



.. function:: psi4.Molecule.set_basis_by_label

   Python Library Documentation: method set_basis_by_label

   

   set_basis_by_label(...) unbound psi4.Molecule method

       set_basis_by_label( (Molecule)arg1, (str)arg2, (str)arg3, (str)arg4) -> None :

           Sets basis set arg3 to all atoms with label (e.g., H4) arg2

       

           C++ signature :

               void set_basis_by_label(N3psi8MoleculeE {lvalue},Ss,Ss,Ss)



.. function:: psi4.Molecule.set_basis_by_symbol

   Python Library Documentation: method set_basis_by_symbol

   

   set_basis_by_symbol(...) unbound psi4.Molecule method

       set_basis_by_symbol( (Molecule)arg1, (str)arg2, (str)arg3, (str)arg4) -> None :

           Sets basis set arg3 to all atoms with symbol (e.g., H) arg2

       

           C++ signature :

               void set_basis_by_symbol(N3psi8MoleculeE {lvalue},Ss,Ss,Ss)



.. function:: psi4.Molecule.set_geometry

   Python Library Documentation: method set_geometry

   

   set_geometry(...) unbound psi4.Molecule method

       set_geometry( (Molecule)arg1, (Matrix)arg2) -> None :

           Sets the geometry, given a (Natom X 3) matrix arg2 of coordinates (in Bohr)

       

           C++ signature :

               void set_geometry(N3psi8MoleculeE {lvalue},N3psi6MatrixE)



.. function:: psi4.Molecule.set_ghost_fragment

   Python Library Documentation: method set_ghost_fragment

   

   set_ghost_fragment(...) unbound psi4.Molecule method

       set_ghost_fragment( (Molecule)arg1, (int)arg2) -> None :

           Sets the specified fragment arg2 to be Ghost

       

           C++ signature :

               void set_ghost_fragment(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.set_ghost_fragments

   Python Library Documentation: method set_ghost_fragments

   

   set_ghost_fragments(...) unbound psi4.Molecule method

       set_ghost_fragments( (Molecule)arg1, (list)arg2) -> None :

           Sets the specified list arg2 of fragments to be Ghost

       

           C++ signature :

               void set_ghost_fragments(N3psi8MoleculeE {lvalue},N5boost6python4listE)



.. function:: psi4.Molecule.set_mass

   Python Library Documentation: method set_mass

   

   set_mass(...) unbound psi4.Molecule method

       set_mass( (Molecule)arg1, (int)arg2, (float)arg3) -> None :

           Gets mass of atom arg2

       

           C++ signature :

               void set_mass(N3psi8MoleculeE {lvalue},i,d)



.. function:: psi4.Molecule.set_molecular_charge

   Python Library Documentation: method set_molecular_charge

   

   set_molecular_charge(...) unbound psi4.Molecule method

       set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :

           Sets the molecular charge

       

           C++ signature :

               void set_molecular_charge(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.set_multiplicity

   Python Library Documentation: method set_multiplicity

   

   set_multiplicity(...) unbound psi4.Molecule method

       set_multiplicity( (Molecule)arg1, (int)arg2) -> None :

           Sets the multiplicity (defined as 2Ms + 1)

       

           C++ signature :

               void set_multiplicity(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.set_name

   Python Library Documentation: method set_name

   

   set_name(...) unbound psi4.Molecule method

       set_name( (Molecule)arg1, (str)arg2) -> None :

           Sets molecule name

       

           C++ signature :

               void set_name(N3psi8MoleculeE {lvalue},Ss)



.. function:: psi4.Molecule.set_point_group

   Python Library Documentation: method set_point_group

   

   set_point_group(...) unbound psi4.Molecule method

       set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :

           Sets the molecular point group to the point group object arg2

       

           C++ signature :

               void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE)



.. function:: psi4.Molecule.set_variable

   Python Library Documentation: method set_variable

   

   set_variable(...) unbound psi4.Molecule method

       set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :

           Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry()

       

           C++ signature :

               void set_variable(N3psi8MoleculeE {lvalue},Ss,d)



.. function:: psi4.Molecule.symbol

   Python Library Documentation: method symbol

   

   symbol(...) unbound psi4.Molecule method

       symbol( (Molecule)arg1, (int)arg2) -> str :

           Gets the cleaned up label of atom arg2 (C2 => C, H4 = H)

       

           C++ signature :

               Ss symbol(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.symmetrize

   Python Library Documentation: method symmetrize

   

   symmetrize(...) unbound psi4.Molecule method

       symmetrize( (Molecule)arg1, (float)arg2) -> None :

           Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.

       

           C++ signature :

               void symmetrize(N3psi8MoleculeE {lvalue},d)



.. function:: psi4.Molecule.translate

   Python Library Documentation: method translate

   

   translate(...) unbound psi4.Molecule method

       translate( (Molecule)arg1, (Vector3)arg2) -> None :

           Translates molecule by arg2

       

           C++ signature :

               void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E)



.. function:: psi4.Molecule.units

   Python Library Documentation: property

   

       Units (Angstrom or Bohr) used to define the geometry



.. function:: psi4.Molecule.update_geometry

   Python Library Documentation: method update_geometry

   

   update_geometry(...) unbound psi4.Molecule method

       update_geometry( (Molecule)arg1) -> None :

           Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.

       

           C++ signature :

               void update_geometry(N3psi8MoleculeE {lvalue})



.. function:: psi4.Molecule.x

   Python Library Documentation: method x

   

   x(...) unbound psi4.Molecule method

       x( (Molecule)arg1, (int)arg2) -> float :

           x position of atom

       

           C++ signature :

               d x(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.y

   Python Library Documentation: method y

   

   y(...) unbound psi4.Molecule method

       y( (Molecule)arg1, (int)arg2) -> float :

           y position of atom

       

           C++ signature :

               d y(N3psi8MoleculeE {lvalue},i)



.. function:: psi4.Molecule.z

   Python Library Documentation: method z

   

   z(...) unbound psi4.Molecule method

       z( (Molecule)arg1, (int)arg2) -> float :

           z position of atom

       

           C++ signature :

               d z(N3psi8MoleculeE {lvalue},i)



.. _`sec:psimod_MultipoleInt`:



MultipoleInt
============



.. function:: psi4.MultipoleInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.MultipoleInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.MultipoleInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.MultipoleInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.MultipoleInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.MultipoleInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.MultipoleInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.MultipoleInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.MultipoleInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.MultipoleInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_MultipoleSymmetry`:



MultipoleSymmetry
=================



.. function:: psi4.MultipoleSymmetry.create_matrices

   Python Library Documentation: method create_matrices

   

   create_matrices(...) unbound psi4.MultipoleSymmetry method

       create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :

           docstring

       

           C++ signature :

               St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE create_matrices(N3psi16OperatorSymmetryE {lvalue},Ss)



.. _`sec:psimod_NBOWriter`:



NBOWriter
=========



.. function:: psi4.NBOWriter.write

   Python Library Documentation: method write

   

   write(...) unbound psi4.NBOWriter method

       write( (NBOWriter)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void write(N3psi9NBOWriterE {lvalue},Ss)



.. _`sec:psimod_NablaInt`:



NablaInt
========



.. function:: psi4.NablaInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.NablaInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.NablaInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.NablaInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.NablaInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.NablaInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.NablaInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.NablaInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.NablaInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.NablaInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_OEProp`:



OEProp
======



.. function:: psi4.OEProp.add

   Python Library Documentation: method add

   

   add(...) unbound psi4.OEProp method

       add( (OEProp)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void add(N3psi6OEPropE {lvalue},Ss)



.. function:: psi4.OEProp.clear

   Python Library Documentation: method clear

   

   clear(...) unbound psi4.OEProp method

       clear( (OEProp)arg1) -> None :

           docstring

       

           C++ signature :

               void clear(N3psi6OEPropE {lvalue})



.. function:: psi4.OEProp.compute

   Python Library Documentation: method compute

   

   compute(...) unbound psi4.OEProp method

       compute( (OEProp)arg1) -> None :

           docstring

       

           C++ signature :

               void compute(N3psi6OEPropE {lvalue})



.. function:: psi4.OEProp.set_Da_ao

   Python Library Documentation: method set_Da_ao

   

   set_Da_ao(...) unbound psi4.OEProp method

       set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.OEProp.set_Da_mo

   Python Library Documentation: method set_Da_mo

   

   set_Da_mo(...) unbound psi4.OEProp method

       set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.OEProp.set_Da_so

   Python Library Documentation: method set_Da_so

   

   set_Da_so(...) unbound psi4.OEProp method

       set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.OEProp.set_Db_ao

   Python Library Documentation: method set_Db_ao

   

   set_Db_ao(...) unbound psi4.OEProp method

       set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i)



.. function:: psi4.OEProp.set_Db_mo

   Python Library Documentation: method set_Db_mo

   

   set_Db_mo(...) unbound psi4.OEProp method

       set_Db_mo( (OEProp)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_Db_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.OEProp.set_Db_so

   Python Library Documentation: method set_Db_so

   

   set_Db_so(...) unbound psi4.OEProp method

       set_Db_so( (OEProp)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_Db_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.OEProp.set_title

   Python Library Documentation: method set_title

   

   set_title(...) unbound psi4.OEProp method

       set_title( (OEProp)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_title(N3psi6OEPropE {lvalue},Ss)



.. _`sec:psimod_OneBodyAOInt`:



OneBodyAOInt
============



.. function:: psi4.OneBodyAOInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.OneBodyAOInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.OneBodyAOInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.OneBodyAOInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.OneBodyAOInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.OneBodyAOInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.OneBodyAOInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.OneBodyAOInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.OneBodyAOInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.OneBodyAOInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_OrbitalSpace`:



OrbitalSpace
============



.. function:: psi4.OrbitalSpace.C

   Python Library Documentation: method C

   

   C(...) unbound psi4.OrbitalSpace method

       C( (OrbitalSpace)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE C(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.OrbitalSpace method

       basisset( (OrbitalSpace)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.build_cabs_space

   Python Library Documentation: built-in function build_cabs_space

   

   build_cabs_space(...)

       build_cabs_space( (OrbitalSpace)arg1, (OrbitalSpace)arg2, (float)arg3) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE build_cabs_space(N3psi12OrbitalSpaceE,N3psi12OrbitalSpaceE,d)



.. function:: psi4.OrbitalSpace.build_ri_space

   Python Library Documentation: built-in function build_ri_space

   

   build_ri_space(...)

       build_ri_space( (Molecule)arg1, (str)arg2, (str)arg3, (float)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d)



.. function:: psi4.OrbitalSpace.dim

   Python Library Documentation: method dim

   

   dim(...) unbound psi4.OrbitalSpace method

       dim( (OrbitalSpace)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE dim(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.evals

   Python Library Documentation: method evals

   

   evals(...) unbound psi4.OrbitalSpace method

       evals( (OrbitalSpace)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE evals(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.id

   Python Library Documentation: method id

   

   id(...) unbound psi4.OrbitalSpace method

       id( (OrbitalSpace)arg1) -> str :

           docstring

       

           C++ signature :

               Ss id(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.integral

   Python Library Documentation: method integral

   

   integral(...) unbound psi4.OrbitalSpace method

       integral( (OrbitalSpace)arg1) -> IntegralFactory :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi15IntegralFactoryEEE integral(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.OrbitalSpace method

       name( (OrbitalSpace)arg1) -> str :

           docstring

       

           C++ signature :

               Ss name(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.OrbitalSpace method

       nirrep( (OrbitalSpace)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12OrbitalSpaceE {lvalue})



.. function:: psi4.OrbitalSpace.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.OrbitalSpace method

       print_out( (OrbitalSpace)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi12OrbitalSpaceE {lvalue})



.. _`sec:psimod_OverlapInt`:



OverlapInt
==========



.. function:: psi4.OverlapInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.OverlapInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.OverlapInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.OverlapInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.OverlapInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.OverlapInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.OverlapInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.OverlapInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.OverlapInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.OverlapInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_PMLocalizer`:



PMLocalizer
===========



.. function:: psi4.PMLocalizer.L

   Python Library Documentation: property

   

       Localized orbital coefficients



.. function:: psi4.PMLocalizer.U

   Python Library Documentation: property

   

       Orbital rotation matrix



.. function:: psi4.PMLocalizer.build

   Python Library Documentation: built-in function build

   

   build(...)

       build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE)



.. function:: psi4.PMLocalizer.converged

   Python Library Documentation: property

   

       Did the localization procedure converge?



.. function:: psi4.PMLocalizer.localize

   Python Library Documentation: method localize

   

   localize(...) unbound psi4.PMLocalizer method

       localize( (Localizer)arg1) -> None :

           Perform the localization procedure

       

           C++ signature :

               void localize(N3psi9LocalizerE {lvalue})



.. _`sec:psimod_PetiteList`:



PetiteList
==========



.. function:: psi4.PetiteList.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.PetiteList method

       aotoso( (PetiteList)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue})



.. function:: psi4.PetiteList.print

   Python Library Documentation: method print

   

   print(...) unbound psi4.PetiteList method

       print( (PetiteList)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void print(N3psi10PetiteListE {lvalue},Ss)



.. function:: psi4.PetiteList.sotoao

   Python Library Documentation: method sotoao

   

   sotoao(...) unbound psi4.PetiteList method

       sotoao( (PetiteList)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue})



.. _`sec:psimod_PointGroup`:



PointGroup
==========



.. function:: psi4.PointGroup.symbol

   Python Library Documentation: method symbol

   

   symbol(...) unbound psi4.PointGroup method

       symbol( (PointGroup)arg1) -> str :

           Returns Schoenflies symbol for point group

       

           C++ signature :

               Ss symbol(N3psi10PointGroupE {lvalue})



.. _`sec:psimod_PotentialInt`:



PotentialInt
============



.. function:: psi4.PotentialInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.PotentialInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.PotentialInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.PotentialInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.PotentialInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.PotentialInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.PotentialInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.PotentialInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.PotentialInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.PotentialInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_Process`:



Process
=======



.. function:: psi4.Process.environment

   Python Library Documentation: Environment in module psi4 object

   

   class Environment(Boost.Python.instance)

    |  Method resolution order:

    |      Environment

    |      Boost.Python.instance

    |      __builtin__.object

    |  

    |  Methods defined here:

    |  

    |  __getitem__(...)

    |      __getitem__( (Environment)arg1, (str)arg2) -> str :

    |          docstring

    |      

    |          C++ signature :

    |              Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss)

    |  

    |  __init__(...)

    |      __init__( (object)arg1) -> None :

    |      

    |          C++ signature :

    |              void __init__(P7_object)

    |  

    |  __reduce__ = <unnamed Boost.Python function>(...)

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __instance_size__ = 464

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.instance:

    |  

    |  __dict__

    |  

    |  __weakref__

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from Boost.Python.instance:

    |  

    |  __new__ = <built-in method __new__ of Boost.Python.class object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. _`sec:psimod_PseudoTrial`:



PseudoTrial
===========



.. function:: psi4.PseudoTrial.getA

   Python Library Documentation: method getA

   

   getA(...) unbound psi4.PseudoTrial method

       getA( (PseudoTrial)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue})



.. function:: psi4.PseudoTrial.getI

   Python Library Documentation: method getI

   

   getI(...) unbound psi4.PseudoTrial method

       getI( (PseudoTrial)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue})



.. function:: psi4.PseudoTrial.getIPS

   Python Library Documentation: method getIPS

   

   getIPS(...) unbound psi4.PseudoTrial method

       getIPS( (PseudoTrial)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue})



.. function:: psi4.PseudoTrial.getQ

   Python Library Documentation: method getQ

   

   getQ(...) unbound psi4.PseudoTrial method

       getQ( (PseudoTrial)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE getQ(N3psi11PseudoTrialE {lvalue})



.. function:: psi4.PseudoTrial.getR

   Python Library Documentation: method getR

   

   getR(...) unbound psi4.PseudoTrial method

       getR( (PseudoTrial)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE getR(N3psi11PseudoTrialE {lvalue})



.. _`sec:psimod_PseudospectralInt`:



PseudospectralInt
=================



.. function:: psi4.PseudospectralInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.PseudospectralInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.PseudospectralInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.PseudospectralInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.PseudospectralInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.PseudospectralInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.PseudospectralInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.PseudospectralInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.PseudospectralInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.PseudospectralInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_PsiReturnType`:



PsiReturnType
=============



.. function:: psi4.PsiReturnType.Balk

   Python Library Documentation: PsiReturnType in module psi4 object

   

   class PsiReturnType(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      PsiReturnType

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Balk = psi4.PsiReturnType.Balk

    |  

    |  EndLoop = psi4.PsiReturnType.EndLoop

    |  

    |  Failure = psi4.PsiReturnType.Failure

    |  

    |  Success = psi4.PsiReturnType.Success

    |  

    |  names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...

    |  

    |  values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.PsiReturnType.EndLoop

   Python Library Documentation: PsiReturnType in module psi4 object

   

   class PsiReturnType(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      PsiReturnType

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Balk = psi4.PsiReturnType.Balk

    |  

    |  EndLoop = psi4.PsiReturnType.EndLoop

    |  

    |  Failure = psi4.PsiReturnType.Failure

    |  

    |  Success = psi4.PsiReturnType.Success

    |  

    |  names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...

    |  

    |  values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.PsiReturnType.Failure

   Python Library Documentation: PsiReturnType in module psi4 object

   

   class PsiReturnType(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      PsiReturnType

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Balk = psi4.PsiReturnType.Balk

    |  

    |  EndLoop = psi4.PsiReturnType.EndLoop

    |  

    |  Failure = psi4.PsiReturnType.Failure

    |  

    |  Success = psi4.PsiReturnType.Success

    |  

    |  names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...

    |  

    |  values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.PsiReturnType.Success

   Python Library Documentation: PsiReturnType in module psi4 object

   

   class PsiReturnType(Boost.Python.enum)

    |  docstring

    |  

    |  Method resolution order:

    |      PsiReturnType

    |      Boost.Python.enum

    |      __builtin__.int

    |      __builtin__.object

    |  

    |  Data and other attributes defined here:

    |  

    |  Balk = psi4.PsiReturnType.Balk

    |  

    |  EndLoop = psi4.PsiReturnType.EndLoop

    |  

    |  Failure = psi4.PsiReturnType.Failure

    |  

    |  Success = psi4.PsiReturnType.Success

    |  

    |  names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...

    |  

    |  values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from Boost.Python.enum:

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __str__(...)

    |      x.__str__() <==> str(x)

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from Boost.Python.enum:

    |  

    |  name

    |  

    |  ----------------------------------------------------------------------

    |  Methods inherited from __builtin__.int:

    |  

    |  __abs__(...)

    |      x.__abs__() <==> abs(x)

    |  

    |  __add__(...)

    |      x.__add__(y) <==> x+y

    |  

    |  __and__(...)

    |      x.__and__(y) <==> x&y

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __coerce__(...)

    |      x.__coerce__(y) <==> coerce(x, y)

    |  

    |  __div__(...)

    |      x.__div__(y) <==> x/y

    |  

    |  __divmod__(...)

    |      x.__divmod__(y) <==> divmod(x, y)

    |  

    |  __float__(...)

    |      x.__float__() <==> float(x)

    |  

    |  __floordiv__(...)

    |      x.__floordiv__(y) <==> x//y

    |  

    |  __format__(...)

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getnewargs__(...)

    |  

    |  __hash__(...)

    |      x.__hash__() <==> hash(x)

    |  

    |  __hex__(...)

    |      x.__hex__() <==> hex(x)

    |  

    |  __index__(...)

    |      x[y:z] <==> x[y.__index__():z.__index__()]

    |  

    |  __int__(...)

    |      x.__int__() <==> int(x)

    |  

    |  __invert__(...)

    |      x.__invert__() <==> ~x

    |  

    |  __long__(...)

    |      x.__long__() <==> long(x)

    |  

    |  __lshift__(...)

    |      x.__lshift__(y) <==> x<<y

    |  

    |  __mod__(...)

    |      x.__mod__(y) <==> x%y

    |  

    |  __mul__(...)

    |      x.__mul__(y) <==> x*y

    |  

    |  __neg__(...)

    |      x.__neg__() <==> -x

    |  

    |  __nonzero__(...)

    |      x.__nonzero__() <==> x != 0

    |  

    |  __oct__(...)

    |      x.__oct__() <==> oct(x)

    |  

    |  __or__(...)

    |      x.__or__(y) <==> x|y

    |  

    |  __pos__(...)

    |      x.__pos__() <==> +x

    |  

    |  __pow__(...)

    |      x.__pow__(y[, z]) <==> pow(x, y[, z])

    |  

    |  __radd__(...)

    |      x.__radd__(y) <==> y+x

    |  

    |  __rand__(...)

    |      x.__rand__(y) <==> y&x

    |  

    |  __rdiv__(...)

    |      x.__rdiv__(y) <==> y/x

    |  

    |  __rdivmod__(...)

    |      x.__rdivmod__(y) <==> divmod(y, x)

    |  

    |  __rfloordiv__(...)

    |      x.__rfloordiv__(y) <==> y//x

    |  

    |  __rlshift__(...)

    |      x.__rlshift__(y) <==> y<<x

    |  

    |  __rmod__(...)

    |      x.__rmod__(y) <==> y%x

    |  

    |  __rmul__(...)

    |      x.__rmul__(y) <==> y*x

    |  

    |  __ror__(...)

    |      x.__ror__(y) <==> y|x

    |  

    |  __rpow__(...)

    |      y.__rpow__(x[, z]) <==> pow(x, y[, z])

    |  

    |  __rrshift__(...)

    |      x.__rrshift__(y) <==> y>>x

    |  

    |  __rshift__(...)

    |      x.__rshift__(y) <==> x>>y

    |  

    |  __rsub__(...)

    |      x.__rsub__(y) <==> y-x

    |  

    |  __rtruediv__(...)

    |      x.__rtruediv__(y) <==> y/x

    |  

    |  __rxor__(...)

    |      x.__rxor__(y) <==> y^x

    |  

    |  __sub__(...)

    |      x.__sub__(y) <==> x-y

    |  

    |  __truediv__(...)

    |      x.__truediv__(y) <==> x/y

    |  

    |  __trunc__(...)

    |      Truncating an Integral returns itself.

    |  

    |  __xor__(...)

    |      x.__xor__(y) <==> x^y

    |  

    |  bit_length(...)

    |      int.bit_length() -> int

    |      

    |      Number of bits necessary to represent self in binary.

    |      >>> bin(37)

    |      '0b100101'

    |      >>> (37).bit_length()

    |      6

    |  

    |  conjugate(...)

    |      Returns self, the complex conjugate of any int.

    |  

    |  ----------------------------------------------------------------------

    |  Data descriptors inherited from __builtin__.int:

    |  

    |  denominator

    |      the denominator of a rational number in lowest terms

    |  

    |  imag

    |      the imaginary part of a complex number

    |  

    |  numerator

    |      the numerator of a rational number in lowest terms

    |  

    |  real

    |      the real part of a complex number

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes inherited from __builtin__.int:

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.PsiReturnType.bit_length

   Python Library Documentation: method_descriptor

   

   bit_length(...)

       int.bit_length() -> int

       

       Number of bits necessary to represent self in binary.

       >>> bin(37)

       '0b100101'

       >>> (37).bit_length()

       6



.. function:: psi4.PsiReturnType.conjugate

   Python Library Documentation: method_descriptor

   

   conjugate(...)

       Returns self, the complex conjugate of any int.



.. function:: psi4.PsiReturnType.denominator

   Python Library Documentation: getset descriptor __builtin__.int.denominator

   

   denominator

       the denominator of a rational number in lowest terms



.. function:: psi4.PsiReturnType.imag

   Python Library Documentation: getset descriptor __builtin__.int.imag

   

   imag

       the imaginary part of a complex number



.. function:: psi4.PsiReturnType.name

   Python Library Documentation: member descriptor Boost.Python.enum.name

   

   name



.. function:: psi4.PsiReturnType.names

   Python Library Documentation: dict object

   

   class dict(object)

    |  dict() -> new empty dictionary

    |  dict(mapping) -> new dictionary initialized from a mapping object's

    |      (key, value) pairs

    |  dict(iterable) -> new dictionary initialized as if via:

    |      d = {}

    |      for k, v in iterable:

    |          d[k] = v

    |  dict(**kwargs) -> new dictionary initialized with the name=value pairs

    |      in the keyword argument list.  For example:  dict(one=1, two=2)

    |  

    |  Methods defined here:

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __contains__(...)

    |      D.__contains__(k) -> True if D has a key k, else False

    |  

    |  __delitem__(...)

    |      x.__delitem__(y) <==> del x[y]

    |  

    |  __eq__(...)

    |      x.__eq__(y) <==> x==y

    |  

    |  __ge__(...)

    |      x.__ge__(y) <==> x>=y

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getitem__(...)

    |      x.__getitem__(y) <==> x[y]

    |  

    |  __gt__(...)

    |      x.__gt__(y) <==> x>y

    |  

    |  __init__(...)

    |      x.__init__(...) initializes x; see help(type(x)) for signature

    |  

    |  __iter__(...)

    |      x.__iter__() <==> iter(x)

    |  

    |  __le__(...)

    |      x.__le__(y) <==> x<=y

    |  

    |  __len__(...)

    |      x.__len__() <==> len(x)

    |  

    |  __lt__(...)

    |      x.__lt__(y) <==> x<y

    |  

    |  __ne__(...)

    |      x.__ne__(y) <==> x!=y

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __setitem__(...)

    |      x.__setitem__(i, y) <==> x[i]=y

    |  

    |  __sizeof__(...)

    |      D.__sizeof__() -> size of D in memory, in bytes

    |  

    |  clear(...)

    |      D.clear() -> None.  Remove all items from D.

    |  

    |  copy(...)

    |      D.copy() -> a shallow copy of D

    |  

    |  fromkeys(...)

    |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.

    |      v defaults to None.

    |  

    |  get(...)

    |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.

    |  

    |  has_key(...)

    |      D.has_key(k) -> True if D has a key k, else False

    |  

    |  items(...)

    |      D.items() -> list of D's (key, value) pairs, as 2-tuples

    |  

    |  iteritems(...)

    |      D.iteritems() -> an iterator over the (key, value) items of D

    |  

    |  iterkeys(...)

    |      D.iterkeys() -> an iterator over the keys of D

    |  

    |  itervalues(...)

    |      D.itervalues() -> an iterator over the values of D

    |  

    |  keys(...)

    |      D.keys() -> list of D's keys

    |  

    |  pop(...)

    |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    |      If key is not found, d is returned if given, otherwise KeyError is raised

    |  

    |  popitem(...)

    |      D.popitem() -> (k, v), remove and return some (key, value) pair as a

    |      2-tuple; but raise KeyError if D is empty.

    |  

    |  setdefault(...)

    |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D

    |  

    |  update(...)

    |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.

    |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    |      In either case, this is followed by: for k in F: D[k] = F[k]

    |  

    |  values(...)

    |      D.values() -> list of D's values

    |  

    |  viewitems(...)

    |      D.viewitems() -> a set-like object providing a view on D's items

    |  

    |  viewkeys(...)

    |      D.viewkeys() -> a set-like object providing a view on D's keys

    |  

    |  viewvalues(...)

    |      D.viewvalues() -> an object providing a view on D's values

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __hash__ = None

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. function:: psi4.PsiReturnType.numerator

   Python Library Documentation: getset descriptor __builtin__.int.numerator

   

   numerator

       the numerator of a rational number in lowest terms



.. function:: psi4.PsiReturnType.real

   Python Library Documentation: getset descriptor __builtin__.int.real

   

   real

       the real part of a complex number



.. function:: psi4.PsiReturnType.values

   Python Library Documentation: dict object

   

   class dict(object)

    |  dict() -> new empty dictionary

    |  dict(mapping) -> new dictionary initialized from a mapping object's

    |      (key, value) pairs

    |  dict(iterable) -> new dictionary initialized as if via:

    |      d = {}

    |      for k, v in iterable:

    |          d[k] = v

    |  dict(**kwargs) -> new dictionary initialized with the name=value pairs

    |      in the keyword argument list.  For example:  dict(one=1, two=2)

    |  

    |  Methods defined here:

    |  

    |  __cmp__(...)

    |      x.__cmp__(y) <==> cmp(x,y)

    |  

    |  __contains__(...)

    |      D.__contains__(k) -> True if D has a key k, else False

    |  

    |  __delitem__(...)

    |      x.__delitem__(y) <==> del x[y]

    |  

    |  __eq__(...)

    |      x.__eq__(y) <==> x==y

    |  

    |  __ge__(...)

    |      x.__ge__(y) <==> x>=y

    |  

    |  __getattribute__(...)

    |      x.__getattribute__('name') <==> x.name

    |  

    |  __getitem__(...)

    |      x.__getitem__(y) <==> x[y]

    |  

    |  __gt__(...)

    |      x.__gt__(y) <==> x>y

    |  

    |  __init__(...)

    |      x.__init__(...) initializes x; see help(type(x)) for signature

    |  

    |  __iter__(...)

    |      x.__iter__() <==> iter(x)

    |  

    |  __le__(...)

    |      x.__le__(y) <==> x<=y

    |  

    |  __len__(...)

    |      x.__len__() <==> len(x)

    |  

    |  __lt__(...)

    |      x.__lt__(y) <==> x<y

    |  

    |  __ne__(...)

    |      x.__ne__(y) <==> x!=y

    |  

    |  __repr__(...)

    |      x.__repr__() <==> repr(x)

    |  

    |  __setitem__(...)

    |      x.__setitem__(i, y) <==> x[i]=y

    |  

    |  __sizeof__(...)

    |      D.__sizeof__() -> size of D in memory, in bytes

    |  

    |  clear(...)

    |      D.clear() -> None.  Remove all items from D.

    |  

    |  copy(...)

    |      D.copy() -> a shallow copy of D

    |  

    |  fromkeys(...)

    |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.

    |      v defaults to None.

    |  

    |  get(...)

    |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.

    |  

    |  has_key(...)

    |      D.has_key(k) -> True if D has a key k, else False

    |  

    |  items(...)

    |      D.items() -> list of D's (key, value) pairs, as 2-tuples

    |  

    |  iteritems(...)

    |      D.iteritems() -> an iterator over the (key, value) items of D

    |  

    |  iterkeys(...)

    |      D.iterkeys() -> an iterator over the keys of D

    |  

    |  itervalues(...)

    |      D.itervalues() -> an iterator over the values of D

    |  

    |  keys(...)

    |      D.keys() -> list of D's keys

    |  

    |  pop(...)

    |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    |      If key is not found, d is returned if given, otherwise KeyError is raised

    |  

    |  popitem(...)

    |      D.popitem() -> (k, v), remove and return some (key, value) pair as a

    |      2-tuple; but raise KeyError if D is empty.

    |  

    |  setdefault(...)

    |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D

    |  

    |  update(...)

    |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.

    |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    |      In either case, this is followed by: for k in F: D[k] = F[k]

    |  

    |  values(...)

    |      D.values() -> list of D's values

    |  

    |  viewitems(...)

    |      D.viewitems() -> a set-like object providing a view on D's items

    |  

    |  viewkeys(...)

    |      D.viewkeys() -> a set-like object providing a view on D's keys

    |  

    |  viewvalues(...)

    |      D.viewvalues() -> an object providing a view on D's values

    |  

    |  ----------------------------------------------------------------------

    |  Data and other attributes defined here:

    |  

    |  __hash__ = None

    |  

    |  __new__ = <built-in method __new__ of type object>

    |      T.__new__(S, ...) -> a new object with type S, a subtype of T



.. _`sec:psimod_Psi_Numpy_Interface`:



Psi_Numpy_Interface
===================



.. _`sec:psimod_QuadrupoleInt`:



QuadrupoleInt
=============



.. function:: psi4.QuadrupoleInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.QuadrupoleInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.QuadrupoleInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.QuadrupoleInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.QuadrupoleInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.QuadrupoleInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.QuadrupoleInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.QuadrupoleInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.QuadrupoleInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.QuadrupoleInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_RHF`:



RHF
===



.. function:: psi4.RHF.Ca

   Python Library Documentation: method Ca

   

   Ca(...) unbound psi4.RHF method

       Ca( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.Ca_subset

   Python Library Documentation: method Ca_subset

   

   Ca_subset(...) unbound psi4.RHF method

       Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.RHF.Cb

   Python Library Documentation: method Cb

   

   Cb(...) unbound psi4.RHF method

       Cb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.Cb_subset

   Python Library Documentation: method Cb_subset

   

   Cb_subset(...) unbound psi4.RHF method

       Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.RHF.Da

   Python Library Documentation: method Da

   

   Da(...) unbound psi4.RHF method

       Da( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Da(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.Db

   Python Library Documentation: method Db

   

   Db(...) unbound psi4.RHF method

       Db( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Db(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.Fa

   Python Library Documentation: method Fa

   

   Fa(...) unbound psi4.RHF method

       Fa( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fa(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.Fb

   Python Library Documentation: method Fb

   

   Fb(...) unbound psi4.RHF method

       Fb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.X

   Python Library Documentation: method X

   

   X(...) unbound psi4.RHF method

       X( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE X(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.add_postiteration_callback

   Python Library Documentation: method add_postiteration_callback

   

   add_postiteration_callback(...) unbound psi4.RHF method

       add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_postiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.RHF.add_preiteration_callback

   Python Library Documentation: method add_preiteration_callback

   

   add_preiteration_callback(...) unbound psi4.RHF method

       add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_preiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.RHF.alpha_orbital_space

   Python Library Documentation: method alpha_orbital_space

   

   alpha_orbital_space(...) unbound psi4.RHF method

       alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE alpha_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.RHF.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.RHF method

       aotoso( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.atomic_point_charges

   Python Library Documentation: method atomic_point_charges

   

   atomic_point_charges(...) unbound psi4.RHF method

       atomic_point_charges( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE atomic_point_charges(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.RHF method

       basisset( (Wavefunction)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.beta_orbital_space

   Python Library Documentation: method beta_orbital_space

   

   beta_orbital_space(...) unbound psi4.RHF method

       beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.RHF.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.RHF method

       compute_energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.RHF method

       compute_gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.deep_copy

   Python Library Documentation: method deep_copy

   

   deep_copy(...) unbound psi4.RHF method

       deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.RHF.doccpi

   Python Library Documentation: method doccpi

   

   doccpi(...) unbound psi4.RHF method

       doccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.energy

   Python Library Documentation: method energy

   

   energy(...) unbound psi4.RHF method

       energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.epsilon_a

   Python Library Documentation: method epsilon_a

   

   epsilon_a(...) unbound psi4.RHF method

       epsilon_a( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.epsilon_a_subset

   Python Library Documentation: method epsilon_a_subset

   

   epsilon_a_subset(...) unbound psi4.RHF method

       epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.RHF.epsilon_b

   Python Library Documentation: method epsilon_b

   

   epsilon_b(...) unbound psi4.RHF method

       epsilon_b( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.epsilon_b_subset

   Python Library Documentation: method epsilon_b_subset

   

   epsilon_b_subset(...) unbound psi4.RHF method

       epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.RHF.frequencies

   Python Library Documentation: method frequencies

   

   frequencies(...) unbound psi4.RHF method

       frequencies( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE frequencies(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.frzcpi

   Python Library Documentation: method frzcpi

   

   frzcpi(...) unbound psi4.RHF method

       frzcpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzcpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.frzvpi

   Python Library Documentation: method frzvpi

   

   frzvpi(...) unbound psi4.RHF method

       frzvpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzvpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.gradient

   Python Library Documentation: method gradient

   

   gradient(...) unbound psi4.RHF method

       gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.hessian

   Python Library Documentation: method hessian

   

   hessian(...) unbound psi4.RHF method

       hessian( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hessian(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.molecule

   Python Library Documentation: method molecule

   

   molecule(...) unbound psi4.RHF method

       molecule( (Wavefunction)arg1) -> Molecule :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE molecule(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nalpha

   Python Library Documentation: method nalpha

   

   nalpha(...) unbound psi4.RHF method

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})

       

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nalphapi

   Python Library Documentation: method nalphapi

   

   nalphapi(...) unbound psi4.RHF method

       nalphapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nalphapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.RHF method

       name( (Wavefunction)arg1) -> str :

           The level of theory this wavefunction corresponds to.

       

           C++ signature :

               Ss name(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nbeta

   Python Library Documentation: method nbeta

   

   nbeta(...) unbound psi4.RHF method

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})

       

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nbetapi

   Python Library Documentation: method nbetapi

   

   nbetapi(...) unbound psi4.RHF method

       nbetapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nbetapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nfrzc

   Python Library Documentation: method nfrzc

   

   nfrzc(...) unbound psi4.RHF method

       nfrzc( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nfrzc(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.RHF method

       nirrep( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nmo

   Python Library Documentation: method nmo

   

   nmo(...) unbound psi4.RHF method

       nmo( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nmo(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nmopi

   Python Library Documentation: method nmopi

   

   nmopi(...) unbound psi4.RHF method

       nmopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nmopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.normalmodes

   Python Library Documentation: method normalmodes

   

   normalmodes(...) unbound psi4.RHF method

       normalmodes( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE normalmodes(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nso

   Python Library Documentation: method nso

   

   nso(...) unbound psi4.RHF method

       nso( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.nsopi

   Python Library Documentation: method nsopi

   

   nsopi(...) unbound psi4.RHF method

       nsopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nsopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.occupation_a

   Python Library Documentation: method occupation_a

   

   occupation_a(...) unbound psi4.RHF method

       occupation_a( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue})



.. function:: psi4.RHF.occupation_b

   Python Library Documentation: method occupation_b

   

   occupation_b(...) unbound psi4.RHF method

       occupation_b( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue})



.. function:: psi4.RHF.reference_wavefunction

   Python Library Documentation: method reference_wavefunction

   

   reference_wavefunction(...) unbound psi4.RHF method

       reference_wavefunction( (Wavefunction)arg1) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE reference_wavefunction(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.same_a_b_dens

   Python Library Documentation: method same_a_b_dens

   

   same_a_b_dens(...) unbound psi4.RHF method

       same_a_b_dens( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_dens(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.same_a_b_orbs

   Python Library Documentation: method same_a_b_orbs

   

   same_a_b_orbs(...) unbound psi4.RHF method

       same_a_b_orbs( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_orbs(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.semicanonicalize

   Python Library Documentation: method semicanonicalize

   

   semicanonicalize(...) unbound psi4.RHF method

       semicanonicalize( (HF)arg1) -> None :

           docstring

       

           C++ signature :

               void semicanonicalize(N3psi3scf2HFE {lvalue})



.. function:: psi4.RHF.set_frequencies

   Python Library Documentation: method set_frequencies

   

   set_frequencies(...) unbound psi4.RHF method

       set_frequencies( (Wavefunction)arg1, (Vector)arg2) -> None :

           docstring

       

           C++ signature :

               void set_frequencies(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue})



.. function:: psi4.RHF.set_gradient

   Python Library Documentation: method set_gradient

   

   set_gradient(...) unbound psi4.RHF method

       set_gradient( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gradient(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.RHF.set_hessian

   Python Library Documentation: method set_hessian

   

   set_hessian(...) unbound psi4.RHF method

       set_hessian( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.RHF.set_reference_wavefunction

   Python Library Documentation: method set_reference_wavefunction

   

   set_reference_wavefunction(...) unbound psi4.RHF method

       set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.RHF.shallow_copy

   Python Library Documentation: method shallow_copy

   

   shallow_copy(...) unbound psi4.RHF method

       shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.RHF.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.RHF method

       sobasisset( (Wavefunction)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.RHF.soccpi

   Python Library Documentation: method soccpi

   

   soccpi(...) unbound psi4.RHF method

       soccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue})



.. _`sec:psimod_ROHF`:



ROHF
====



.. function:: psi4.ROHF.Ca

   Python Library Documentation: method Ca

   

   Ca(...) unbound psi4.ROHF method

       Ca( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.Ca_subset

   Python Library Documentation: method Ca_subset

   

   Ca_subset(...) unbound psi4.ROHF method

       Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.ROHF.Cb

   Python Library Documentation: method Cb

   

   Cb(...) unbound psi4.ROHF method

       Cb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.Cb_subset

   Python Library Documentation: method Cb_subset

   

   Cb_subset(...) unbound psi4.ROHF method

       Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.ROHF.Da

   Python Library Documentation: method Da

   

   Da(...) unbound psi4.ROHF method

       Da( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Da(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.Db

   Python Library Documentation: method Db

   

   Db(...) unbound psi4.ROHF method

       Db( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Db(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.Fa

   Python Library Documentation: method Fa

   

   Fa(...) unbound psi4.ROHF method

       Fa( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fa(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.Fb

   Python Library Documentation: method Fb

   

   Fb(...) unbound psi4.ROHF method

       Fb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.X

   Python Library Documentation: method X

   

   X(...) unbound psi4.ROHF method

       X( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE X(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.add_postiteration_callback

   Python Library Documentation: method add_postiteration_callback

   

   add_postiteration_callback(...) unbound psi4.ROHF method

       add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_postiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.ROHF.add_preiteration_callback

   Python Library Documentation: method add_preiteration_callback

   

   add_preiteration_callback(...) unbound psi4.ROHF method

       add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_preiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.ROHF.alpha_orbital_space

   Python Library Documentation: method alpha_orbital_space

   

   alpha_orbital_space(...) unbound psi4.ROHF method

       alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE alpha_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.ROHF.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.ROHF method

       aotoso( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.atomic_point_charges

   Python Library Documentation: method atomic_point_charges

   

   atomic_point_charges(...) unbound psi4.ROHF method

       atomic_point_charges( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE atomic_point_charges(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.ROHF method

       basisset( (Wavefunction)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.beta_orbital_space

   Python Library Documentation: method beta_orbital_space

   

   beta_orbital_space(...) unbound psi4.ROHF method

       beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.ROHF.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.ROHF method

       compute_energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.ROHF method

       compute_gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.deep_copy

   Python Library Documentation: method deep_copy

   

   deep_copy(...) unbound psi4.ROHF method

       deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.ROHF.doccpi

   Python Library Documentation: method doccpi

   

   doccpi(...) unbound psi4.ROHF method

       doccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.energy

   Python Library Documentation: method energy

   

   energy(...) unbound psi4.ROHF method

       energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.epsilon_a

   Python Library Documentation: method epsilon_a

   

   epsilon_a(...) unbound psi4.ROHF method

       epsilon_a( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.epsilon_a_subset

   Python Library Documentation: method epsilon_a_subset

   

   epsilon_a_subset(...) unbound psi4.ROHF method

       epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.ROHF.epsilon_b

   Python Library Documentation: method epsilon_b

   

   epsilon_b(...) unbound psi4.ROHF method

       epsilon_b( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.epsilon_b_subset

   Python Library Documentation: method epsilon_b_subset

   

   epsilon_b_subset(...) unbound psi4.ROHF method

       epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.ROHF.frequencies

   Python Library Documentation: method frequencies

   

   frequencies(...) unbound psi4.ROHF method

       frequencies( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE frequencies(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.frzcpi

   Python Library Documentation: method frzcpi

   

   frzcpi(...) unbound psi4.ROHF method

       frzcpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzcpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.frzvpi

   Python Library Documentation: method frzvpi

   

   frzvpi(...) unbound psi4.ROHF method

       frzvpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzvpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.gradient

   Python Library Documentation: method gradient

   

   gradient(...) unbound psi4.ROHF method

       gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.hessian

   Python Library Documentation: method hessian

   

   hessian(...) unbound psi4.ROHF method

       hessian( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hessian(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.moFa

   Python Library Documentation: method moFa

   

   moFa(...) unbound psi4.ROHF method

       moFa( (ROHF)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue})



.. function:: psi4.ROHF.moFb

   Python Library Documentation: method moFb

   

   moFb(...) unbound psi4.ROHF method

       moFb( (ROHF)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4ROHFE {lvalue})



.. function:: psi4.ROHF.moFeff

   Python Library Documentation: method moFeff

   

   moFeff(...) unbound psi4.ROHF method

       moFeff( (ROHF)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue})



.. function:: psi4.ROHF.molecule

   Python Library Documentation: method molecule

   

   molecule(...) unbound psi4.ROHF method

       molecule( (Wavefunction)arg1) -> Molecule :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE molecule(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nalpha

   Python Library Documentation: method nalpha

   

   nalpha(...) unbound psi4.ROHF method

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})

       

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nalphapi

   Python Library Documentation: method nalphapi

   

   nalphapi(...) unbound psi4.ROHF method

       nalphapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nalphapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.ROHF method

       name( (Wavefunction)arg1) -> str :

           The level of theory this wavefunction corresponds to.

       

           C++ signature :

               Ss name(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nbeta

   Python Library Documentation: method nbeta

   

   nbeta(...) unbound psi4.ROHF method

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})

       

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nbetapi

   Python Library Documentation: method nbetapi

   

   nbetapi(...) unbound psi4.ROHF method

       nbetapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nbetapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nfrzc

   Python Library Documentation: method nfrzc

   

   nfrzc(...) unbound psi4.ROHF method

       nfrzc( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nfrzc(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.ROHF method

       nirrep( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nmo

   Python Library Documentation: method nmo

   

   nmo(...) unbound psi4.ROHF method

       nmo( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nmo(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nmopi

   Python Library Documentation: method nmopi

   

   nmopi(...) unbound psi4.ROHF method

       nmopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nmopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.normalmodes

   Python Library Documentation: method normalmodes

   

   normalmodes(...) unbound psi4.ROHF method

       normalmodes( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE normalmodes(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nso

   Python Library Documentation: method nso

   

   nso(...) unbound psi4.ROHF method

       nso( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.nsopi

   Python Library Documentation: method nsopi

   

   nsopi(...) unbound psi4.ROHF method

       nsopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nsopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.occupation_a

   Python Library Documentation: method occupation_a

   

   occupation_a(...) unbound psi4.ROHF method

       occupation_a( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue})



.. function:: psi4.ROHF.occupation_b

   Python Library Documentation: method occupation_b

   

   occupation_b(...) unbound psi4.ROHF method

       occupation_b( (HF)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue})



.. function:: psi4.ROHF.reference_wavefunction

   Python Library Documentation: method reference_wavefunction

   

   reference_wavefunction(...) unbound psi4.ROHF method

       reference_wavefunction( (Wavefunction)arg1) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE reference_wavefunction(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.same_a_b_dens

   Python Library Documentation: method same_a_b_dens

   

   same_a_b_dens(...) unbound psi4.ROHF method

       same_a_b_dens( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_dens(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.same_a_b_orbs

   Python Library Documentation: method same_a_b_orbs

   

   same_a_b_orbs(...) unbound psi4.ROHF method

       same_a_b_orbs( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_orbs(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.semicanonicalize

   Python Library Documentation: method semicanonicalize

   

   semicanonicalize(...) unbound psi4.ROHF method

       semicanonicalize( (HF)arg1) -> None :

           docstring

       

           C++ signature :

               void semicanonicalize(N3psi3scf2HFE {lvalue})



.. function:: psi4.ROHF.set_frequencies

   Python Library Documentation: method set_frequencies

   

   set_frequencies(...) unbound psi4.ROHF method

       set_frequencies( (Wavefunction)arg1, (Vector)arg2) -> None :

           docstring

       

           C++ signature :

               void set_frequencies(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue})



.. function:: psi4.ROHF.set_gradient

   Python Library Documentation: method set_gradient

   

   set_gradient(...) unbound psi4.ROHF method

       set_gradient( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gradient(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.ROHF.set_hessian

   Python Library Documentation: method set_hessian

   

   set_hessian(...) unbound psi4.ROHF method

       set_hessian( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.ROHF.set_reference_wavefunction

   Python Library Documentation: method set_reference_wavefunction

   

   set_reference_wavefunction(...) unbound psi4.ROHF method

       set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.ROHF.shallow_copy

   Python Library Documentation: method shallow_copy

   

   shallow_copy(...) unbound psi4.ROHF method

       shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.ROHF.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.ROHF method

       sobasisset( (Wavefunction)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.ROHF.soccpi

   Python Library Documentation: method soccpi

   

   soccpi(...) unbound psi4.ROHF method

       soccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue})



.. _`sec:psimod_SOBasisSet`:



SOBasisSet
==========



.. function:: psi4.SOBasisSet.petite_list

   Python Library Documentation: method petite_list

   

   petite_list(...) unbound psi4.SOBasisSet method

       petite_list( (SOBasisSet)arg1) -> PetiteList :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue})



.. _`sec:psimod_SuperFunctional`:



SuperFunctional
===============



.. function:: psi4.SuperFunctional.add_c_functional

   Python Library Documentation: method add_c_functional

   

   add_c_functional(...) unbound psi4.SuperFunctional method

       add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :

           docstring

       

           C++ signature :

               void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE)



.. function:: psi4.SuperFunctional.add_x_functional

   Python Library Documentation: method add_x_functional

   

   add_x_functional(...) unbound psi4.SuperFunctional method

       add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :

           docstring

       

           C++ signature :

               void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE)



.. function:: psi4.SuperFunctional.allocate

   Python Library Documentation: method allocate

   

   allocate(...) unbound psi4.SuperFunctional method

       allocate( (SuperFunctional)arg1) -> None :

           docstring

       

           C++ signature :

               void allocate(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.ansatz

   Python Library Documentation: method ansatz

   

   ansatz(...) unbound psi4.SuperFunctional method

       ansatz( (SuperFunctional)arg1) -> int :

           docstring

       

           C++ signature :

               i ansatz(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.blank

   Python Library Documentation: built-in function blank

   

   blank(...)

       blank() -> SuperFunctional :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank()



.. function:: psi4.SuperFunctional.build

   Python Library Documentation: built-in function build

   

   build(...)

       build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i)



.. function:: psi4.SuperFunctional.c_alpha

   Python Library Documentation: method c_alpha

   

   c_alpha(...) unbound psi4.SuperFunctional method

       c_alpha( (SuperFunctional)arg1) -> float :

           docstring

       

           C++ signature :

               d c_alpha(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.c_functional

   Python Library Documentation: method c_functional

   

   c_functional(...) unbound psi4.SuperFunctional method

       c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss)



.. function:: psi4.SuperFunctional.c_omega

   Python Library Documentation: method c_omega

   

   c_omega(...) unbound psi4.SuperFunctional method

       c_omega( (SuperFunctional)arg1) -> float :

           docstring

       

           C++ signature :

               d c_omega(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.c_os_alpha

   Python Library Documentation: method c_os_alpha

   

   c_os_alpha(...) unbound psi4.SuperFunctional method

       c_os_alpha( (SuperFunctional)arg1) -> float :

           docstring

       

           C++ signature :

               d c_os_alpha(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.c_ss_alpha

   Python Library Documentation: method c_ss_alpha

   

   c_ss_alpha(...) unbound psi4.SuperFunctional method

       c_ss_alpha( (SuperFunctional)arg1) -> float :

           docstring

       

           C++ signature :

               d c_ss_alpha(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.citation

   Python Library Documentation: method citation

   

   citation(...) unbound psi4.SuperFunctional method

       citation( (SuperFunctional)arg1) -> str :

           docstring

       

           C++ signature :

               Ss citation(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.deriv

   Python Library Documentation: method deriv

   

   deriv(...) unbound psi4.SuperFunctional method

       deriv( (SuperFunctional)arg1) -> int :

           docstring

       

           C++ signature :

               i deriv(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.description

   Python Library Documentation: method description

   

   description(...) unbound psi4.SuperFunctional method

       description( (SuperFunctional)arg1) -> str :

           docstring

       

           C++ signature :

               Ss description(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.dispersion

   Python Library Documentation: method dispersion

   

   dispersion(...) unbound psi4.SuperFunctional method

       dispersion( (SuperFunctional)arg1) -> Dispersion :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10DispersionEEE dispersion(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_c_hybrid

   Python Library Documentation: method is_c_hybrid

   

   is_c_hybrid(...) unbound psi4.SuperFunctional method

       is_c_hybrid( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_c_hybrid(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_c_lrc

   Python Library Documentation: method is_c_lrc

   

   is_c_lrc(...) unbound psi4.SuperFunctional method

       is_c_lrc( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_c_lrc(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_c_scs_hybrid

   Python Library Documentation: method is_c_scs_hybrid

   

   is_c_scs_hybrid(...) unbound psi4.SuperFunctional method

       is_c_scs_hybrid( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_c_scs_hybrid(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_gga

   Python Library Documentation: method is_gga

   

   is_gga(...) unbound psi4.SuperFunctional method

       is_gga( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_gga(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_meta

   Python Library Documentation: method is_meta

   

   is_meta(...) unbound psi4.SuperFunctional method

       is_meta( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_meta(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_x_hybrid

   Python Library Documentation: method is_x_hybrid

   

   is_x_hybrid(...) unbound psi4.SuperFunctional method

       is_x_hybrid( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_x_hybrid(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.is_x_lrc

   Python Library Documentation: method is_x_lrc

   

   is_x_lrc(...) unbound psi4.SuperFunctional method

       is_x_lrc( (SuperFunctional)arg1) -> bool :

           docstring

       

           C++ signature :

               b is_x_lrc(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.max_points

   Python Library Documentation: method max_points

   

   max_points(...) unbound psi4.SuperFunctional method

       max_points( (SuperFunctional)arg1) -> int :

           docstring

       

           C++ signature :

               i max_points(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.SuperFunctional method

       name( (SuperFunctional)arg1) -> str :

           docstring

       

           C++ signature :

               Ss name(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.print_detail

   Python Library Documentation: method print_detail

   

   print_detail(...) unbound psi4.SuperFunctional method

       print_detail( (SuperFunctional)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void print_detail(N3psi15SuperFunctionalE {lvalue},i)



.. function:: psi4.SuperFunctional.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.SuperFunctional method

       print_out( (SuperFunctional)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.set_c_alpha

   Python Library Documentation: method set_c_alpha

   

   set_c_alpha(...) unbound psi4.SuperFunctional method

       set_c_alpha( (SuperFunctional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_c_alpha(N3psi15SuperFunctionalE {lvalue},d)



.. function:: psi4.SuperFunctional.set_c_omega

   Python Library Documentation: method set_c_omega

   

   set_c_omega(...) unbound psi4.SuperFunctional method

       set_c_omega( (SuperFunctional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_c_omega(N3psi15SuperFunctionalE {lvalue},d)



.. function:: psi4.SuperFunctional.set_c_os_alpha

   Python Library Documentation: method set_c_os_alpha

   

   set_c_os_alpha(...) unbound psi4.SuperFunctional method

       set_c_os_alpha( (SuperFunctional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_c_os_alpha(N3psi15SuperFunctionalE {lvalue},d)



.. function:: psi4.SuperFunctional.set_c_ss_alpha

   Python Library Documentation: method set_c_ss_alpha

   

   set_c_ss_alpha(...) unbound psi4.SuperFunctional method

       set_c_ss_alpha( (SuperFunctional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_c_ss_alpha(N3psi15SuperFunctionalE {lvalue},d)



.. function:: psi4.SuperFunctional.set_citation

   Python Library Documentation: method set_citation

   

   set_citation(...) unbound psi4.SuperFunctional method

       set_citation( (SuperFunctional)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_citation(N3psi15SuperFunctionalE {lvalue},Ss)



.. function:: psi4.SuperFunctional.set_deriv

   Python Library Documentation: method set_deriv

   

   set_deriv(...) unbound psi4.SuperFunctional method

       set_deriv( (SuperFunctional)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void set_deriv(N3psi15SuperFunctionalE {lvalue},i)



.. function:: psi4.SuperFunctional.set_description

   Python Library Documentation: method set_description

   

   set_description(...) unbound psi4.SuperFunctional method

       set_description( (SuperFunctional)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_description(N3psi15SuperFunctionalE {lvalue},Ss)



.. function:: psi4.SuperFunctional.set_dispersion

   Python Library Documentation: method set_dispersion

   

   set_dispersion(...) unbound psi4.SuperFunctional method

       set_dispersion( (SuperFunctional)arg1, (Dispersion)arg2) -> None :

           docstring

       

           C++ signature :

               void set_dispersion(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10DispersionEEE)



.. function:: psi4.SuperFunctional.set_max_points

   Python Library Documentation: method set_max_points

   

   set_max_points(...) unbound psi4.SuperFunctional method

       set_max_points( (SuperFunctional)arg1, (int)arg2) -> None :

           docstring

       

           C++ signature :

               void set_max_points(N3psi15SuperFunctionalE {lvalue},i)



.. function:: psi4.SuperFunctional.set_name

   Python Library Documentation: method set_name

   

   set_name(...) unbound psi4.SuperFunctional method

       set_name( (SuperFunctional)arg1, (str)arg2) -> None :

           docstring

       

           C++ signature :

               void set_name(N3psi15SuperFunctionalE {lvalue},Ss)



.. function:: psi4.SuperFunctional.set_x_alpha

   Python Library Documentation: method set_x_alpha

   

   set_x_alpha(...) unbound psi4.SuperFunctional method

       set_x_alpha( (SuperFunctional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_x_alpha(N3psi15SuperFunctionalE {lvalue},d)



.. function:: psi4.SuperFunctional.set_x_omega

   Python Library Documentation: method set_x_omega

   

   set_x_omega(...) unbound psi4.SuperFunctional method

       set_x_omega( (SuperFunctional)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void set_x_omega(N3psi15SuperFunctionalE {lvalue},d)



.. function:: psi4.SuperFunctional.test_functional

   Python Library Documentation: method test_functional

   

   test_functional(...) unbound psi4.SuperFunctional method

       test_functional( (SuperFunctional)arg1, (Vector)arg2, (Vector)arg3, (Vector)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :

           docstring

       

           C++ signature :

               void test_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.SuperFunctional.value

   Python Library Documentation: method value

   

   value(...) unbound psi4.SuperFunctional method

       value( (SuperFunctional)arg1, (str)arg2) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE value(N3psi15SuperFunctionalE {lvalue},Ss)



.. function:: psi4.SuperFunctional.x_alpha

   Python Library Documentation: method x_alpha

   

   x_alpha(...) unbound psi4.SuperFunctional method

       x_alpha( (SuperFunctional)arg1) -> float :

           docstring

       

           C++ signature :

               d x_alpha(N3psi15SuperFunctionalE {lvalue})



.. function:: psi4.SuperFunctional.x_functional

   Python Library Documentation: method x_functional

   

   x_functional(...) unbound psi4.SuperFunctional method

       x_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10FunctionalEEE x_functional(N3psi15SuperFunctionalE {lvalue},Ss)



.. function:: psi4.SuperFunctional.x_omega

   Python Library Documentation: method x_omega

   

   x_omega(...) unbound psi4.SuperFunctional method

       x_omega( (SuperFunctional)arg1) -> float :

           docstring

       

           C++ signature :

               d x_omega(N3psi15SuperFunctionalE {lvalue})



.. _`sec:psimod_SymmetryOperation`:



SymmetryOperation
=================



.. function:: psi4.SymmetryOperation.E

   Python Library Documentation: method E

   

   E(...) unbound psi4.SymmetryOperation method

       E( (SymmetryOperation)arg1) -> None :

           Set equal to E

       

           C++ signature :

               void E(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.c2_x

   Python Library Documentation: method c2_x

   

   c2_x(...) unbound psi4.SymmetryOperation method

       c2_x( (SymmetryOperation)arg1) -> None :

           Set equal to C2 about the x axis

       

           C++ signature :

               void c2_x(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.c2_y

   Python Library Documentation: method c2_y

   

   c2_y(...) unbound psi4.SymmetryOperation method

       c2_y( (SymmetryOperation)arg1) -> None :

           Set equal to C2 about the y axis

       

           C++ signature :

               void c2_y(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.c2_z

   Python Library Documentation: method c2_z

   

   c2_z(...) unbound psi4.SymmetryOperation method

       c2_z( (SymmetryOperation)arg1) -> None :

           Set equal to C2 about the z axis

       

           C++ signature :

               void c2_z(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.i

   Python Library Documentation: method i

   

   i(...) unbound psi4.SymmetryOperation method

       i( (SymmetryOperation)arg1) -> None :

           Set equal to an inversion

       

           C++ signature :

               void i(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.operate

   Python Library Documentation: method operate

   

   operate(...) unbound psi4.SymmetryOperation method

       operate( (SymmetryOperation)arg1, (SymmetryOperation)arg2) -> SymmetryOperation :

           Performs the operation arg2 * arg1

       

           C++ signature :

               N3psi17SymmetryOperationE operate(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE)



.. function:: psi4.SymmetryOperation.rotate_n

   Python Library Documentation: method rotate_n

   

   rotate_n(...) unbound psi4.SymmetryOperation method

       rotate_n( (SymmetryOperation)arg1, (int)arg2) -> None :

           Set equal to a clockwise rotation by 2pi/n

       

           C++ signature :

               void rotate_n(N3psi17SymmetryOperationE {lvalue},i)



.. function:: psi4.SymmetryOperation.rotate_theta

   Python Library Documentation: method rotate_theta

   

   rotate_theta(...) unbound psi4.SymmetryOperation method

       rotate_theta( (SymmetryOperation)arg1, (float)arg2) -> None :

           Set equal to a clockwise rotation by theta

       

           C++ signature :

               void rotate_theta(N3psi17SymmetryOperationE {lvalue},d)



.. function:: psi4.SymmetryOperation.sigma_xy

   Python Library Documentation: method sigma_xy

   

   sigma_xy(...) unbound psi4.SymmetryOperation method

       sigma_xy( (SymmetryOperation)arg1) -> None :

           Set equal to reflection in xy plane

       

           C++ signature :

               void sigma_xy(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.sigma_xz

   Python Library Documentation: method sigma_xz

   

   sigma_xz(...) unbound psi4.SymmetryOperation method

       sigma_xz( (SymmetryOperation)arg1) -> None :

           Set equal to reflection in xz plane

       

           C++ signature :

               void sigma_xz(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.sigma_yz

   Python Library Documentation: method sigma_yz

   

   sigma_yz(...) unbound psi4.SymmetryOperation method

       sigma_yz( (SymmetryOperation)arg1) -> None :

           Set equal to reflection in yz plane

       

           C++ signature :

               void sigma_yz(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.trace

   Python Library Documentation: method trace

   

   trace(...) unbound psi4.SymmetryOperation method

       trace( (SymmetryOperation)arg1) -> float :

           Returns trace of transformation matrix

       

           C++ signature :

               d trace(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.transform

   Python Library Documentation: method transform

   

   transform(...) unbound psi4.SymmetryOperation method

       transform( (SymmetryOperation)arg1, (SymmetryOperation)arg2) -> SymmetryOperation :

           Performs the transform arg2 * arg1 * arg2~

       

           C++ signature :

               N3psi17SymmetryOperationE transform(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE)



.. function:: psi4.SymmetryOperation.transpose

   Python Library Documentation: method transpose

   

   transpose(...) unbound psi4.SymmetryOperation method

       transpose( (SymmetryOperation)arg1) -> None :

           Performs transposition of matrix operation

       

           C++ signature :

               void transpose(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.unit

   Python Library Documentation: method unit

   

   unit(...) unbound psi4.SymmetryOperation method

       unit( (SymmetryOperation)arg1) -> None :

           Set equal to a unit matrix

       

           C++ signature :

               void unit(N3psi17SymmetryOperationE {lvalue})



.. function:: psi4.SymmetryOperation.zero

   Python Library Documentation: method zero

   

   zero(...) unbound psi4.SymmetryOperation method

       zero( (SymmetryOperation)arg1) -> None :

           Zero out the symmetry operation

       

           C++ signature :

               void zero(N3psi17SymmetryOperationE {lvalue})



.. _`sec:psimod_ThreeCenterOverlapInt`:



ThreeCenterOverlapInt
=====================



.. function:: psi4.ThreeCenterOverlapInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.ThreeCenterOverlapInt method

       compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i)



.. function:: psi4.ThreeCenterOverlapInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.ThreeCenterOverlapInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.ThreeCenterOverlapInt method

       set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b)



.. _`sec:psimod_TracelessQuadrupoleInt`:



TracelessQuadrupoleInt
======================



.. function:: psi4.TracelessQuadrupoleInt.basis

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.TracelessQuadrupoleInt.basis1

   Python Library Documentation: property

   

       The basis set on center one



.. function:: psi4.TracelessQuadrupoleInt.basis2

   Python Library Documentation: property

   

       The basis set on center two



.. function:: psi4.TracelessQuadrupoleInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.TracelessQuadrupoleInt method

       compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :

           docstring

       

           C++ signature :

               void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i)



.. function:: psi4.TracelessQuadrupoleInt.origin

   Python Library Documentation: property

   

       The origin about which the one body ints are being computed.



.. function:: psi4.TracelessQuadrupoleInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.TracelessQuadrupoleInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.TracelessQuadrupoleInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.TracelessQuadrupoleInt method

       set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b)



.. _`sec:psimod_TwoBodyAOInt`:



TwoBodyAOInt
============



.. function:: psi4.TwoBodyAOInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.TwoBodyAOInt method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.TwoBodyAOInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.TwoBodyAOInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.TwoBodyAOInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.TwoBodyAOInt method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_TwoElectronInt`:



TwoElectronInt
==============



.. function:: psi4.TwoElectronInt.compute_shell

   Python Library Documentation: method compute_shell

   

   compute_shell(...) unbound psi4.TwoElectronInt method

       compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :

           docstring

       

           C++ signature :

               m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i)



.. function:: psi4.TwoElectronInt.py_buffer

   Python Library Documentation: property

   

       docstring



.. function:: psi4.TwoElectronInt.py_buffer_object

   Python Library Documentation: property

   

       docstring



.. function:: psi4.TwoElectronInt.set_enable_pybuffer

   Python Library Documentation: method set_enable_pybuffer

   

   set_enable_pybuffer(...) unbound psi4.TwoElectronInt method

       set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :

           docstring

       

           C++ signature :

               void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b)



.. _`sec:psimod_Vector`:



Vector
======



.. function:: psi4.Vector.array_interfaces

   Python Library Documentation: method array_interfaces

   

   array_interfaces(...) unbound psi4.Vector method

       array_interfaces( (Vector)arg1) -> list :

           docstring

       

           C++ signature :

               N5boost6python4listE array_interfaces(N5boost10shared_ptrIN3psi6VectorEEE)



.. function:: psi4.Vector.dim

   Python Library Documentation: method dim

   

   dim(...) unbound psi4.Vector method

       dim( (Vector)arg1, (int)arg2) -> int :

           docstring

       

           C++ signature :

               i dim(N3psi6VectorE {lvalue},i)



.. function:: psi4.Vector.from_array

   Python Library Documentation: method array_to_matrix in module p4util.numpy_helper

   

   array_to_matrix(self, arr, name='New Matrix', dim1=None, dim2=None) method of Boost.Python.class instance

       Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list).

       

       Parameters

       ----------

       arr : array or list of arrays

           Numpy array or list of arrays to use as the data for a new psi4.Matrix

       name : str

           Name to give the new psi4.Matrix

       dim1 : list, tuple, or psi4.Dimension (optional)

           If a single dense numpy array is given, a dimension can be supplied to

           apply irreps to this array. Note that this discards all extra information

           given in the matrix besides the diagonal blocks determined by the passed

           dimension.

       dim2 :

           Same as dim1 only if using a Psi4.Dimension object.

       

       Returns

       -------

       ret : psi4.Vector or psi4.Matrix

          Returns the given Psi4 object 

       

       Notes

       -----

       This is a generalized function to convert a NumPy array to 

       

       Examples

       --------

       

       >>> data = np.random.rand(20)

       >>> vector = array_to_matrix(data)

       

       >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]

       >>> matrix = array_to_matrix(irrep_data)

       >>> print matrix.rowspi().to_tuple()

       >>> (2, 0, 4)



.. function:: psi4.Vector.get

   Python Library Documentation: method get

   

   get(...) unbound psi4.Vector method

       get( (Vector)arg1, (int)arg2) -> float :

           docstring

       

           C++ signature :

               d get(N3psi6VectorE {lvalue},i)

       

       get( (Vector)arg1, (int)arg2, (int)arg3) -> float :

           docstring

       

           C++ signature :

               d get(N3psi6VectorE {lvalue},i,i)



.. function:: psi4.Vector.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.Vector method

       nirrep( (Vector)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi6VectorE {lvalue})



.. function:: psi4.Vector.np

   Python Library Documentation: property

   



.. function:: psi4.Vector.print_out

   Python Library Documentation: method print_out

   

   print_out(...) unbound psi4.Vector method

       print_out( (Vector)arg1) -> None :

           docstring

       

           C++ signature :

               void print_out(N3psi6VectorE {lvalue})



.. function:: psi4.Vector.scale

   Python Library Documentation: method scale

   

   scale(...) unbound psi4.Vector method

       scale( (Vector)arg1, (float)arg2) -> None :

           docstring

       

           C++ signature :

               void scale(N3psi6VectorE {lvalue},d)



.. function:: psi4.Vector.set

   Python Library Documentation: method set

   

   set(...) unbound psi4.Vector method

       set( (Vector)arg1, (int)arg2, (float)arg3) -> None :

           docstring

       

           C++ signature :

               void set(N3psi6VectorE {lvalue},i,d)

       

       set( (Vector)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

           docstring

       

           C++ signature :

               void set(N3psi6VectorE {lvalue},i,i,d)



.. function:: psi4.Vector.shape

   Python Library Documentation: property

   



.. function:: psi4.Vector.to_array

   Python Library Documentation: method to_array in module p4util.numpy_helper

   

   to_array(matrix, copy=True, dense=False) unbound psi4.Vector method

       Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply

       consturcts a view.



.. _`sec:psimod_Vector3`:



Vector3
=======



.. function:: psi4.Vector3.cross

   Python Library Documentation: method cross

   

   cross(...) unbound psi4.Vector3 method

       cross( (Vector3)arg1, (Vector3)arg2) -> Vector3 :

           Returns cross product of arg1 and arg2

       

           C++ signature :

               N3psi7Vector3E cross(N3psi7Vector3E {lvalue},N3psi7Vector3E)



.. function:: psi4.Vector3.distance

   Python Library Documentation: method distance

   

   distance(...) unbound psi4.Vector3 method

       distance( (Vector3)arg1, (Vector3)arg2) -> float :

           Returns distance between two points represented by arg1 and arg2

       

           C++ signature :

               d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E)



.. function:: psi4.Vector3.dot

   Python Library Documentation: method dot

   

   dot(...) unbound psi4.Vector3 method

       dot( (Vector3)arg1, (Vector3)arg2) -> float :

           Returns dot product of arg1 and arg2

       

           C++ signature :

               d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E)



.. function:: psi4.Vector3.norm

   Python Library Documentation: method norm

   

   norm(...) unbound psi4.Vector3 method

       norm( (Vector3)arg1) -> float :

           Returns Euclidean norm of arg1

       

           C++ signature :

               d norm(N3psi7Vector3E {lvalue})



.. function:: psi4.Vector3.normalize

   Python Library Documentation: method normalize

   

   normalize(...) unbound psi4.Vector3 method

       normalize( (Vector3)arg1) -> None :

           Returns vector of unit length and arg1 direction

       

           C++ signature :

               void normalize(N3psi7Vector3E {lvalue})



.. _`sec:psimod_View`:



View
====



.. _`sec:psimod_Wavefunction`:



Wavefunction
============



.. function:: psi4.Wavefunction.Ca

   Python Library Documentation: method Ca

   

   Ca(...) unbound psi4.Wavefunction method

       Ca( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.Ca_subset

   Python Library Documentation: method Ca_subset

   

   Ca_subset(...) unbound psi4.Wavefunction method

       Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.Wavefunction.Cb

   Python Library Documentation: method Cb

   

   Cb(...) unbound psi4.Wavefunction method

       Cb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.Cb_subset

   Python Library Documentation: method Cb_subset

   

   Cb_subset(...) unbound psi4.Wavefunction method

       Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.Wavefunction.Da

   Python Library Documentation: method Da

   

   Da(...) unbound psi4.Wavefunction method

       Da( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Da(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.Db

   Python Library Documentation: method Db

   

   Db(...) unbound psi4.Wavefunction method

       Db( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Db(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.Fa

   Python Library Documentation: method Fa

   

   Fa(...) unbound psi4.Wavefunction method

       Fa( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fa(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.Fb

   Python Library Documentation: method Fb

   

   Fb(...) unbound psi4.Wavefunction method

       Fb( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE Fb(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.X

   Python Library Documentation: method X

   

   X(...) unbound psi4.Wavefunction method

       X( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE X(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.add_postiteration_callback

   Python Library Documentation: method add_postiteration_callback

   

   add_postiteration_callback(...) unbound psi4.Wavefunction method

       add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_postiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.Wavefunction.add_preiteration_callback

   Python Library Documentation: method add_preiteration_callback

   

   add_preiteration_callback(...) unbound psi4.Wavefunction method

       add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :

           docstring

       

           C++ signature :

               void add_preiteration_callback(N3psi12WavefunctionE {lvalue},P7_object)



.. function:: psi4.Wavefunction.alpha_orbital_space

   Python Library Documentation: method alpha_orbital_space

   

   alpha_orbital_space(...) unbound psi4.Wavefunction method

       alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE alpha_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.Wavefunction.aotoso

   Python Library Documentation: method aotoso

   

   aotoso(...) unbound psi4.Wavefunction method

       aotoso( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.atomic_point_charges

   Python Library Documentation: method atomic_point_charges

   

   atomic_point_charges(...) unbound psi4.Wavefunction method

       atomic_point_charges( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE atomic_point_charges(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.basisset

   Python Library Documentation: method basisset

   

   basisset(...) unbound psi4.Wavefunction method

       basisset( (Wavefunction)arg1) -> BasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.beta_orbital_space

   Python Library Documentation: method beta_orbital_space

   

   beta_orbital_space(...) unbound psi4.Wavefunction method

       beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :

           docstring

       

           C++ signature :

               N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss)



.. function:: psi4.Wavefunction.compute_energy

   Python Library Documentation: method compute_energy

   

   compute_energy(...) unbound psi4.Wavefunction method

       compute_energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d compute_energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.compute_gradient

   Python Library Documentation: method compute_gradient

   

   compute_gradient(...) unbound psi4.Wavefunction method

       compute_gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.deep_copy

   Python Library Documentation: method deep_copy

   

   deep_copy(...) unbound psi4.Wavefunction method

       deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.Wavefunction.doccpi

   Python Library Documentation: method doccpi

   

   doccpi(...) unbound psi4.Wavefunction method

       doccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.energy

   Python Library Documentation: method energy

   

   energy(...) unbound psi4.Wavefunction method

       energy( (Wavefunction)arg1) -> float :

           docstring

       

           C++ signature :

               d energy(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.epsilon_a

   Python Library Documentation: method epsilon_a

   

   epsilon_a(...) unbound psi4.Wavefunction method

       epsilon_a( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.epsilon_a_subset

   Python Library Documentation: method epsilon_a_subset

   

   epsilon_a_subset(...) unbound psi4.Wavefunction method

       epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.Wavefunction.epsilon_b

   Python Library Documentation: method epsilon_b

   

   epsilon_b(...) unbound psi4.Wavefunction method

       epsilon_b( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.epsilon_b_subset

   Python Library Documentation: method epsilon_b_subset

   

   epsilon_b_subset(...) unbound psi4.Wavefunction method

       epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss)



.. function:: psi4.Wavefunction.frequencies

   Python Library Documentation: method frequencies

   

   frequencies(...) unbound psi4.Wavefunction method

       frequencies( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE frequencies(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.frzcpi

   Python Library Documentation: method frzcpi

   

   frzcpi(...) unbound psi4.Wavefunction method

       frzcpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzcpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.frzvpi

   Python Library Documentation: method frzvpi

   

   frzvpi(...) unbound psi4.Wavefunction method

       frzvpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE frzvpi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.gradient

   Python Library Documentation: method gradient

   

   gradient(...) unbound psi4.Wavefunction method

       gradient( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE gradient(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.hessian

   Python Library Documentation: method hessian

   

   hessian(...) unbound psi4.Wavefunction method

       hessian( (Wavefunction)arg1) -> Matrix :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6MatrixEEE hessian(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.molecule

   Python Library Documentation: method molecule

   

   molecule(...) unbound psi4.Wavefunction method

       molecule( (Wavefunction)arg1) -> Molecule :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi8MoleculeEEE molecule(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nalpha

   Python Library Documentation: method nalpha

   

   nalpha(...) unbound psi4.Wavefunction method

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})

       

       nalpha( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nalpha(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nalphapi

   Python Library Documentation: method nalphapi

   

   nalphapi(...) unbound psi4.Wavefunction method

       nalphapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nalphapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.name

   Python Library Documentation: method name

   

   name(...) unbound psi4.Wavefunction method

       name( (Wavefunction)arg1) -> str :

           The level of theory this wavefunction corresponds to.

       

           C++ signature :

               Ss name(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nbeta

   Python Library Documentation: method nbeta

   

   nbeta(...) unbound psi4.Wavefunction method

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})

       

       nbeta( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nbeta(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nbetapi

   Python Library Documentation: method nbetapi

   

   nbetapi(...) unbound psi4.Wavefunction method

       nbetapi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nbetapi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nfrzc

   Python Library Documentation: method nfrzc

   

   nfrzc(...) unbound psi4.Wavefunction method

       nfrzc( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nfrzc(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nirrep

   Python Library Documentation: method nirrep

   

   nirrep(...) unbound psi4.Wavefunction method

       nirrep( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nirrep(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nmo

   Python Library Documentation: method nmo

   

   nmo(...) unbound psi4.Wavefunction method

       nmo( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nmo(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nmopi

   Python Library Documentation: method nmopi

   

   nmopi(...) unbound psi4.Wavefunction method

       nmopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nmopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.normalmodes

   Python Library Documentation: method normalmodes

   

   normalmodes(...) unbound psi4.Wavefunction method

       normalmodes( (Wavefunction)arg1) -> Vector :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi6VectorEEE normalmodes(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nso

   Python Library Documentation: method nso

   

   nso(...) unbound psi4.Wavefunction method

       nso( (Wavefunction)arg1) -> int :

           docstring

       

           C++ signature :

               i nso(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.nsopi

   Python Library Documentation: method nsopi

   

   nsopi(...) unbound psi4.Wavefunction method

       nsopi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE nsopi(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.reference_wavefunction

   Python Library Documentation: method reference_wavefunction

   

   reference_wavefunction(...) unbound psi4.Wavefunction method

       reference_wavefunction( (Wavefunction)arg1) -> Wavefunction :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi12WavefunctionEEE reference_wavefunction(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.same_a_b_dens

   Python Library Documentation: method same_a_b_dens

   

   same_a_b_dens(...) unbound psi4.Wavefunction method

       same_a_b_dens( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_dens(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.same_a_b_orbs

   Python Library Documentation: method same_a_b_orbs

   

   same_a_b_orbs(...) unbound psi4.Wavefunction method

       same_a_b_orbs( (Wavefunction)arg1) -> bool :

           docstring

       

           C++ signature :

               b same_a_b_orbs(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.set_frequencies

   Python Library Documentation: method set_frequencies

   

   set_frequencies(...) unbound psi4.Wavefunction method

       set_frequencies( (Wavefunction)arg1, (Vector)arg2) -> None :

           docstring

       

           C++ signature :

               void set_frequencies(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue})



.. function:: psi4.Wavefunction.set_gradient

   Python Library Documentation: method set_gradient

   

   set_gradient(...) unbound psi4.Wavefunction method

       set_gradient( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_gradient(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.Wavefunction.set_hessian

   Python Library Documentation: method set_hessian

   

   set_hessian(...) unbound psi4.Wavefunction method

       set_hessian( (Wavefunction)arg1, (Matrix)arg2) -> None :

           docstring

       

           C++ signature :

               void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue})



.. function:: psi4.Wavefunction.set_reference_wavefunction

   Python Library Documentation: method set_reference_wavefunction

   

   set_reference_wavefunction(...) unbound psi4.Wavefunction method

       set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.Wavefunction.shallow_copy

   Python Library Documentation: method shallow_copy

   

   shallow_copy(...) unbound psi4.Wavefunction method

       shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :

           docstring

       

           C++ signature :

               void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE)



.. function:: psi4.Wavefunction.sobasisset

   Python Library Documentation: method sobasisset

   

   sobasisset(...) unbound psi4.Wavefunction method

       sobasisset( (Wavefunction)arg1) -> SOBasisSet :

           docstring

       

           C++ signature :

               N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue})



.. function:: psi4.Wavefunction.soccpi

   Python Library Documentation: method soccpi

   

   soccpi(...) unbound psi4.Wavefunction method

       soccpi( (Wavefunction)arg1) -> Dimension :

           docstring

       

           C++ signature :

               N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue})



.. _`sec:psimod_matrix_vector`:



matrix_vector
=============



.. function:: psi4.matrix_vector.append

   Python Library Documentation: method append

   

   append(...) unbound psi4.matrix_vector method

       append( (matrix_vector)arg1, (object)arg2) -> None :

       

           C++ signature :

               void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE)



.. function:: psi4.matrix_vector.extend

   Python Library Documentation: method extend

   

   extend(...) unbound psi4.matrix_vector method

       extend( (matrix_vector)arg1, (object)arg2) -> None :

       

           C++ signature :

               void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE)



.. _`sec:psimod_vector_of_doubles`:



vector_of_doubles
=================



.. function:: psi4.vector_of_doubles.append

   Python Library Documentation: method append

   

   append(...) unbound psi4.vector_of_doubles method

       append( (vector_of_doubles)arg1, (object)arg2) -> None :

       

           C++ signature :

               void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE)



.. function:: psi4.vector_of_doubles.extend

   Python Library Documentation: method extend

   

   extend(...) unbound psi4.vector_of_doubles method

       extend( (vector_of_doubles)arg1, (object)arg2) -> None :

       

           C++ signature :

               void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE)



Full Docs Output
================

.. literalinclude:: autodoc_man_psi4.txt

